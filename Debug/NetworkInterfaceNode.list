
NetworkInterfaceNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08009470  08009470  0000a470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b8  080098b8  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080098b8  080098b8  0000a8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098c0  080098c0  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098c0  080098c0  0000a8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098c4  080098c4  0000a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080098c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200001d8  08009aa0  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  08009aa0  0000b538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1d5  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218a  00000000  00000000  000193dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0001b568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a18  00000000  00000000  0001c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176ac  00000000  00000000  0001cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2a9  00000000  00000000  0003431c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903b3  00000000  00000000  000435c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3978  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b44  00000000  00000000  000d39bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d8500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009454 	.word	0x08009454

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009454 	.word	0x08009454

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b3e      	ldr	r3, [pc, #248]	@ (8001108 <MX_GPIO_Init+0x114>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a3d      	ldr	r2, [pc, #244]	@ (8001108 <MX_GPIO_Init+0x114>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b3b      	ldr	r3, [pc, #236]	@ (8001108 <MX_GPIO_Init+0x114>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b37      	ldr	r3, [pc, #220]	@ (8001108 <MX_GPIO_Init+0x114>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a36      	ldr	r2, [pc, #216]	@ (8001108 <MX_GPIO_Init+0x114>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b34      	ldr	r3, [pc, #208]	@ (8001108 <MX_GPIO_Init+0x114>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b30      	ldr	r3, [pc, #192]	@ (8001108 <MX_GPIO_Init+0x114>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a2f      	ldr	r2, [pc, #188]	@ (8001108 <MX_GPIO_Init+0x114>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <MX_GPIO_Init+0x114>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b29      	ldr	r3, [pc, #164]	@ (8001108 <MX_GPIO_Init+0x114>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a28      	ldr	r2, [pc, #160]	@ (8001108 <MX_GPIO_Init+0x114>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b26      	ldr	r3, [pc, #152]	@ (8001108 <MX_GPIO_Init+0x114>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2120      	movs	r1, #32
 800107e:	4823      	ldr	r0, [pc, #140]	@ (800110c <MX_GPIO_Init+0x118>)
 8001080:	f001 f9f2 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IDLE_LED_Pin|BUSY_LED_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	21e0      	movs	r1, #224	@ 0xe0
 8001088:	4821      	ldr	r0, [pc, #132]	@ (8001110 <MX_GPIO_Init+0x11c>)
 800108a:	f001 f9ed 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800108e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001094:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	481b      	ldr	r0, [pc, #108]	@ (8001114 <MX_GPIO_Init+0x120>)
 80010a6:	f001 f843 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010aa:	2320      	movs	r3, #32
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4812      	ldr	r0, [pc, #72]	@ (800110c <MX_GPIO_Init+0x118>)
 80010c2:	f001 f835 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : Receiver_Pin */
  GPIO_InitStruct.Pin = Receiver_Pin;
 80010c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Receiver_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_GPIO_Init+0x120>)
 80010de:	f001 f827 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pins : IDLE_LED_Pin BUSY_LED_Pin ERR_LED_Pin */
  GPIO_InitStruct.Pin = IDLE_LED_Pin|BUSY_LED_Pin|ERR_LED_Pin;
 80010e2:	23e0      	movs	r3, #224	@ 0xe0
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_GPIO_Init+0x11c>)
 80010fa:	f001 f819 	bl	8002130 <HAL_GPIO_Init>

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	@ 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020400 	.word	0x40020400
 8001114:	40020800 	.word	0x40020800

08001118 <__io_putchar>:
uint8_t transmit_buffer_index = 0;
volatile bool end_of_transmission = false;


PUTCHAR_PROTOTYPE
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001120:	1d39      	adds	r1, r7, #4
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	2201      	movs	r2, #1
 8001128:	4803      	ldr	r0, [pc, #12]	@ (8001138 <__io_putchar+0x20>)
 800112a:	f003 f831 	bl	8004190 <HAL_UART_Transmit>
 return ch;
 800112e:	687b      	ldr	r3, [r7, #4]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200003a0 	.word	0x200003a0

0800113c <__io_getchar>:
GETCHAR_PROTOTYPE
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 uint8_t ch = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]
 __HAL_UART_CLEAR_OREFLAG(&huart2);
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <__io_getchar+0x38>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <__io_getchar+0x38>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	683b      	ldr	r3, [r7, #0]
 HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800115c:	1df9      	adds	r1, r7, #7
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	2201      	movs	r2, #1
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <__io_getchar+0x38>)
 8001166:	f003 f89e 	bl	80042a6 <HAL_UART_Receive>
 return ch;
 800116a:	79fb      	ldrb	r3, [r7, #7]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200003a0 	.word	0x200003a0

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <main+0x154>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6858      	ldr	r0, [r3, #4]
 8001184:	2300      	movs	r3, #0
 8001186:	2202      	movs	r2, #2
 8001188:	2100      	movs	r1, #0
 800118a:	f004 fc73 	bl	8005a74 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f000 fe4b 	bl	8001e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 f8af 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f7ff ff2d 	bl	8000ff4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800119a:	f000 fda9 	bl	8001cf0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800119e:	f000 fc25 	bl	80019ec <MX_TIM2_Init>
  MX_TIM3_Init();
 80011a2:	f000 fc9b 	bl	8001adc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //printf("Hello World!\n");
  CurrentState = IDLE_STATE;
 80011a6:	4b4a      	ldr	r3, [pc, #296]	@ (80012d0 <main+0x158>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
  updateStateLights();
 80011ac:	f000 f90a 	bl	80013c4 <updateStateLights>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80011b0:	2100      	movs	r1, #0
 80011b2:	4848      	ldr	r0, [pc, #288]	@ (80012d4 <main+0x15c>)
 80011b4:	f002 f85a 	bl	800326c <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //printf("Captured Val: %i\tCurrent State: %i\tPin Value: %d\n", capture_val, CurrentState, pinValue);
	  //HAL_Delay(1000);
	  if(!transmitting) {
 80011b8:	4b47      	ldr	r3, [pc, #284]	@ (80012d8 <main+0x160>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f083 0301 	eor.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f7      	beq.n	80011b8 <main+0x40>
		  fgets(transmit_buffer, 255, stdin);
 80011c8:	4b40      	ldr	r3, [pc, #256]	@ (80012cc <main+0x154>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	461a      	mov	r2, r3
 80011d0:	21ff      	movs	r1, #255	@ 0xff
 80011d2:	4842      	ldr	r0, [pc, #264]	@ (80012dc <main+0x164>)
 80011d4:	f004 fb00 	bl	80057d8 <fgets>
		  transmitting = true;
 80011d8:	4b3f      	ldr	r3, [pc, #252]	@ (80012d8 <main+0x160>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		  manchester_buffer = 0;
 80011de:	4b40      	ldr	r3, [pc, #256]	@ (80012e0 <main+0x168>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
		  transmit_buffer_index = 0;
 80011e4:	4b3f      	ldr	r3, [pc, #252]	@ (80012e4 <main+0x16c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
		  end_of_transmission = false;
 80011ea:	4b3f      	ldr	r3, [pc, #252]	@ (80012e8 <main+0x170>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
		  manchester_buffer = getNextTransmissionChar(true);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f000 f927 	bl	8001444 <getNextTransmissionChar>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b39      	ldr	r3, [pc, #228]	@ (80012e0 <main+0x168>)
 80011fc:	601a      	str	r2, [r3, #0]
		  manchester_bit_count += 16;
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <main+0x174>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	3310      	adds	r3, #16
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <main+0x174>)
 8001208:	701a      	strb	r2, [r3, #0]
		  uint16_t temp = getNextTransmissionChar(false);
 800120a:	2000      	movs	r0, #0
 800120c:	f000 f91a 	bl	8001444 <getNextTransmissionChar>
 8001210:	4603      	mov	r3, r0
 8001212:	80fb      	strh	r3, [r7, #6]
		  if(temp != 0) {
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00d      	beq.n	8001236 <main+0xbe>
			  manchester_buffer |= (temp<<16);
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	4b30      	ldr	r3, [pc, #192]	@ (80012e0 <main+0x168>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4313      	orrs	r3, r2
 8001224:	4a2e      	ldr	r2, [pc, #184]	@ (80012e0 <main+0x168>)
 8001226:	6013      	str	r3, [r2, #0]
			  manchester_bit_count += 16;
 8001228:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <main+0x174>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	3310      	adds	r3, #16
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <main+0x174>)
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e002      	b.n	800123c <main+0xc4>
		  } else {
			  end_of_transmission = true;
 8001236:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <main+0x170>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
		  }
		  if((manchester_buffer & 0b1) != ((manchester_buffer>>1) & 0b1)) {
 800123c:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <main+0x168>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	085a      	lsrs	r2, r3, #1
 8001242:	4b27      	ldr	r3, [pc, #156]	@ (80012e0 <main+0x168>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4053      	eors	r3, r2
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d019      	beq.n	8001284 <main+0x10c>
			manchester_buffer = manchester_buffer>>1;
 8001250:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <main+0x168>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	085b      	lsrs	r3, r3, #1
 8001256:	4a22      	ldr	r2, [pc, #136]	@ (80012e0 <main+0x168>)
 8001258:	6013      	str	r3, [r2, #0]
			manchester_bit_count--;
 800125a:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <main+0x174>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	3b01      	subs	r3, #1
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <main+0x174>)
 8001264:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_AUTORELOAD(&htim3, HALF_PERIOD);
 8001266:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <main+0x178>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800126e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <main+0x178>)
 8001272:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001276:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, HALF_PERIOD);
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <main+0x178>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001280:	641a      	str	r2, [r3, #64]	@ 0x40
 8001282:	e018      	b.n	80012b6 <main+0x13e>
		  } else {
			manchester_buffer = manchester_buffer>>2;
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <main+0x168>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	4a15      	ldr	r2, [pc, #84]	@ (80012e0 <main+0x168>)
 800128c:	6013      	str	r3, [r2, #0]
			manchester_bit_count -= 2;
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <main+0x174>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	3b02      	subs	r3, #2
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <main+0x174>)
 8001298:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_AUTORELOAD(&htim3, FULL_PERIOD);
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <main+0x178>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <main+0x178>)
 80012a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012aa:	60da      	str	r2, [r3, #12]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, FULL_PERIOD);
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <main+0x178>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40
		  }
		  if(CurrentState == IDLE_STATE) {
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <main+0x158>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f47f af7c 	bne.w	80011b8 <main+0x40>
			  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_4);
 80012c0:	210c      	movs	r1, #12
 80012c2:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <main+0x178>)
 80012c4:	f001 fdd2 	bl	8002e6c <HAL_TIM_OC_Start_IT>
	  if(!transmitting) {
 80012c8:	e776      	b.n	80011b8 <main+0x40>
 80012ca:	bf00      	nop
 80012cc:	2000001c 	.word	0x2000001c
 80012d0:	200001fc 	.word	0x200001fc
 80012d4:	20000310 	.word	0x20000310
 80012d8:	20000201 	.word	0x20000201
 80012dc:	20000204 	.word	0x20000204
 80012e0:	20000304 	.word	0x20000304
 80012e4:	20000309 	.word	0x20000309
 80012e8:	2000030a 	.word	0x2000030a
 80012ec:	20000308 	.word	0x20000308
 80012f0:	20000358 	.word	0x20000358

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	@ 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2230      	movs	r2, #48	@ 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f004 fccd 	bl	8005ca2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <SystemClock_Config+0xc8>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	4a26      	ldr	r2, [pc, #152]	@ (80013bc <SystemClock_Config+0xc8>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	@ 0x40
 8001328:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <SystemClock_Config+0xc8>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <SystemClock_Config+0xcc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a20      	ldr	r2, [pc, #128]	@ (80013c0 <SystemClock_Config+0xcc>)
 800133e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <SystemClock_Config+0xcc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001354:	2301      	movs	r3, #1
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001358:	2310      	movs	r3, #16
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135c:	2302      	movs	r3, #2
 800135e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001360:	2300      	movs	r3, #0
 8001362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001364:	2308      	movs	r3, #8
 8001366:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001368:	2332      	movs	r3, #50	@ 0x32
 800136a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136c:	2302      	movs	r3, #2
 800136e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001370:	2304      	movs	r3, #4
 8001372:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4618      	mov	r0, r3
 800137a:	f001 f88f 	bl	800249c <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001384:	f000 f9da 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2302      	movs	r3, #2
 800138e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	2101      	movs	r1, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 faf1 	bl	800298c <HAL_RCC_ClockConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013b0:	f000 f9c4 	bl	800173c <Error_Handler>
  }
}
 80013b4:	bf00      	nop
 80013b6:	3750      	adds	r7, #80	@ 0x50
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <updateStateLights>:

/* USER CODE BEGIN 4 */

void updateStateLights(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	if(CurrentState == 0){
 80013c8:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <updateStateLights+0x78>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10f      	bne.n	80013f0 <updateStateLights+0x2c>
		//IDLE LED
		//gpioa->odr |= (001<<IDLE_LED_Pin);
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2180      	movs	r1, #128	@ 0x80
 80013d4:	481a      	ldr	r0, [pc, #104]	@ (8001440 <updateStateLights+0x7c>)
 80013d6:	f001 f847 	bl	8002468 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2140      	movs	r1, #64	@ 0x40
 80013de:	4818      	ldr	r0, [pc, #96]	@ (8001440 <updateStateLights+0x7c>)
 80013e0:	f001 f842 	bl	8002468 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IDLE_LED_GPIO_Port, IDLE_LED_Pin, 1);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2120      	movs	r1, #32
 80013e8:	4815      	ldr	r0, [pc, #84]	@ (8001440 <updateStateLights+0x7c>)
 80013ea:	f001 f83d 	bl	8002468 <HAL_GPIO_WritePin>
		//gpioa->odr |= (100<<IDLE_LED_Pin);
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, 1);
		HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, 0);
		HAL_GPIO_WritePin(IDLE_LED_GPIO_Port, IDLE_LED_Pin, 0);
	}
}
 80013ee:	e022      	b.n	8001436 <updateStateLights+0x72>
	} else if(CurrentState == 1){
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <updateStateLights+0x78>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10f      	bne.n	8001418 <updateStateLights+0x54>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2180      	movs	r1, #128	@ 0x80
 80013fc:	4810      	ldr	r0, [pc, #64]	@ (8001440 <updateStateLights+0x7c>)
 80013fe:	f001 f833 	bl	8002468 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, 1);
 8001402:	2201      	movs	r2, #1
 8001404:	2140      	movs	r1, #64	@ 0x40
 8001406:	480e      	ldr	r0, [pc, #56]	@ (8001440 <updateStateLights+0x7c>)
 8001408:	f001 f82e 	bl	8002468 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IDLE_LED_GPIO_Port, IDLE_LED_Pin, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2120      	movs	r1, #32
 8001410:	480b      	ldr	r0, [pc, #44]	@ (8001440 <updateStateLights+0x7c>)
 8001412:	f001 f829 	bl	8002468 <HAL_GPIO_WritePin>
}
 8001416:	e00e      	b.n	8001436 <updateStateLights+0x72>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, 1);
 8001418:	2201      	movs	r2, #1
 800141a:	2180      	movs	r1, #128	@ 0x80
 800141c:	4808      	ldr	r0, [pc, #32]	@ (8001440 <updateStateLights+0x7c>)
 800141e:	f001 f823 	bl	8002468 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUSY_LED_GPIO_Port, BUSY_LED_Pin, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2140      	movs	r1, #64	@ 0x40
 8001426:	4806      	ldr	r0, [pc, #24]	@ (8001440 <updateStateLights+0x7c>)
 8001428:	f001 f81e 	bl	8002468 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IDLE_LED_GPIO_Port, IDLE_LED_Pin, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2120      	movs	r1, #32
 8001430:	4803      	ldr	r0, [pc, #12]	@ (8001440 <updateStateLights+0x7c>)
 8001432:	f001 f819 	bl	8002468 <HAL_GPIO_WritePin>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200001fc 	.word	0x200001fc
 8001440:	40020400 	.word	0x40020400

08001444 <getNextTransmissionChar>:

uint16_t getNextTransmissionChar(bool first) {
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
	if(!first) {
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f083 0301 	eor.w	r3, r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d01c      	beq.n	8001494 <getNextTransmissionChar+0x50>
		transmit_buffer_index++;
 800145a:	4b34      	ldr	r3, [pc, #208]	@ (800152c <getNextTransmissionChar+0xe8>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b32      	ldr	r3, [pc, #200]	@ (800152c <getNextTransmissionChar+0xe8>)
 8001464:	701a      	strb	r2, [r3, #0]
		if((transmit_buffer_index == 0) || (transmit_buffer[transmit_buffer_index] == '\n') || (transmit_buffer[transmit_buffer_index] == '\r')) {
 8001466:	4b31      	ldr	r3, [pc, #196]	@ (800152c <getNextTransmissionChar+0xe8>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00d      	beq.n	800148a <getNextTransmissionChar+0x46>
 800146e:	4b2f      	ldr	r3, [pc, #188]	@ (800152c <getNextTransmissionChar+0xe8>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	4b2e      	ldr	r3, [pc, #184]	@ (8001530 <getNextTransmissionChar+0xec>)
 8001476:	5c9b      	ldrb	r3, [r3, r2]
 8001478:	2b0a      	cmp	r3, #10
 800147a:	d006      	beq.n	800148a <getNextTransmissionChar+0x46>
 800147c:	4b2b      	ldr	r3, [pc, #172]	@ (800152c <getNextTransmissionChar+0xe8>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <getNextTransmissionChar+0xec>)
 8001484:	5c9b      	ldrb	r3, [r3, r2]
 8001486:	2b0d      	cmp	r3, #13
 8001488:	d117      	bne.n	80014ba <getNextTransmissionChar+0x76>
			end_of_transmission = true;
 800148a:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <getNextTransmissionChar+0xf0>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
			return 0;
 8001490:	2300      	movs	r3, #0
 8001492:	e044      	b.n	800151e <getNextTransmissionChar+0xda>
		}
	} else if((transmit_buffer[transmit_buffer_index] == '\n') || (transmit_buffer[transmit_buffer_index] == '\r')) {
 8001494:	4b25      	ldr	r3, [pc, #148]	@ (800152c <getNextTransmissionChar+0xe8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <getNextTransmissionChar+0xec>)
 800149c:	5c9b      	ldrb	r3, [r3, r2]
 800149e:	2b0a      	cmp	r3, #10
 80014a0:	d006      	beq.n	80014b0 <getNextTransmissionChar+0x6c>
 80014a2:	4b22      	ldr	r3, [pc, #136]	@ (800152c <getNextTransmissionChar+0xe8>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <getNextTransmissionChar+0xec>)
 80014aa:	5c9b      	ldrb	r3, [r3, r2]
 80014ac:	2b0d      	cmp	r3, #13
 80014ae:	d104      	bne.n	80014ba <getNextTransmissionChar+0x76>
		end_of_transmission = true;
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <getNextTransmissionChar+0xf0>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
		return 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e031      	b.n	800151e <getNextTransmissionChar+0xda>
	}
	uint16_t reverse_manchester = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i<8; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	737b      	strb	r3, [r7, #13]
 80014c2:	e028      	b.n	8001516 <getNextTransmissionChar+0xd2>
		if(((transmit_buffer[transmit_buffer_index]>>(7-i))&0b1)==0b1) {
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <getNextTransmissionChar+0xe8>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <getNextTransmissionChar+0xec>)
 80014cc:	5c9b      	ldrb	r3, [r3, r2]
 80014ce:	461a      	mov	r2, r3
 80014d0:	7b7b      	ldrb	r3, [r7, #13]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	fa42 f303 	asr.w	r3, r2, r3
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <getNextTransmissionChar+0xb6>
			reverse_manchester |= (0b10<<(i*2));
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2202      	movs	r2, #2
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	81fb      	strh	r3, [r7, #14]
 80014f8:	e00a      	b.n	8001510 <getNextTransmissionChar+0xcc>
		} else {
			reverse_manchester |= (0b01<<(i*2));
 80014fa:	7b7b      	ldrb	r3, [r7, #13]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2201      	movs	r2, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	b21a      	sxth	r2, r3
 8001506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800150a:	4313      	orrs	r3, r2
 800150c:	b21b      	sxth	r3, r3
 800150e:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i<8; i++) {
 8001510:	7b7b      	ldrb	r3, [r7, #13]
 8001512:	3301      	adds	r3, #1
 8001514:	737b      	strb	r3, [r7, #13]
 8001516:	7b7b      	ldrb	r3, [r7, #13]
 8001518:	2b07      	cmp	r3, #7
 800151a:	d9d3      	bls.n	80014c4 <getNextTransmissionChar+0x80>
		}
	}
	return reverse_manchester;
 800151c:	89fb      	ldrh	r3, [r7, #14]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000309 	.word	0x20000309
 8001530:	20000204 	.word	0x20000204
 8001534:	2000030a 	.word	0x2000030a

08001538 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	//BUSY!
	if (htim->Instance == TIM2) { // Ensure it's TIM2
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001548:	d122      	bne.n	8001590 <HAL_TIM_IC_CaptureCallback+0x58>
	        capture_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800154a:	2100      	movs	r1, #0
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f002 f98f 	bl	8003870 <HAL_TIM_ReadCapturedValue>
 8001552:	4603      	mov	r3, r0
 8001554:	4a10      	ldr	r2, [pc, #64]	@ (8001598 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001556:	6013      	str	r3, [r2, #0]

	        // Compute the next compare value with delay
	        compare_val = (capture_val + delay_us) % TIMER_MAX;
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_TIM_IC_CaptureCallback+0x60>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_TIM_IC_CaptureCallback+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	441a      	add	r2, r3
 8001562:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001566:	bf2c      	ite	cs
 8001568:	2301      	movcs	r3, #1
 800156a:	2300      	movcc	r3, #0
 800156c:	425b      	negs	r3, r3
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	4a0b      	ldr	r2, [pc, #44]	@ (80015a0 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001572:	6013      	str	r3, [r2, #0]

	        // Set compare value for output compare event
	        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, compare_val);
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <HAL_TIM_IC_CaptureCallback+0x68>)
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	639a      	str	r2, [r3, #56]	@ 0x38

	        // Start Output Compare interrupt
	        HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 800157e:	2104      	movs	r1, #4
 8001580:	4808      	ldr	r0, [pc, #32]	@ (80015a4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001582:	f001 fc73 	bl	8002e6c <HAL_TIM_OC_Start_IT>

	        //Changes LED's for busy state
	    	CurrentState = BUSY_STATE;
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]
	    	updateStateLights();
 800158c:	f7ff ff1a 	bl	80013c4 <updateStateLights>
	}
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200001f4 	.word	0x200001f4
 800159c:	20000000 	.word	0x20000000
 80015a0:	200001f8 	.word	0x200001f8
 80015a4:	20000310 	.word	0x20000310
 80015a8:	200001fc 	.word	0x200001fc

080015ac <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015bc:	d12a      	bne.n	8001614 <HAL_TIM_OC_DelayElapsedCallback+0x68>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7f1b      	ldrb	r3, [r3, #28]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d126      	bne.n	8001614 <HAL_TIM_OC_DelayElapsedCallback+0x68>
        //Error or Idle, do Idle pattern if line is high

    	//pinValue = gpioa->idr(0b1 & (1<<15));
    	pinValue = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80015c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015ca:	4853      	ldr	r0, [pc, #332]	@ (8001718 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 80015cc:	f000 ff34 	bl	8002438 <HAL_GPIO_ReadPin>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b51      	ldr	r3, [pc, #324]	@ (800171c <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 80015d6:	701a      	strb	r2, [r3, #0]
    	if(pinValue == 1){
 80015d8:	4b50      	ldr	r3, [pc, #320]	@ (800171c <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d10f      	bne.n	8001600 <HAL_TIM_OC_DelayElapsedCallback+0x54>
    		//IDLE
    		CurrentState = IDLE_STATE;
 80015e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001720 <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
    		updateStateLights();
 80015e6:	f7ff feed 	bl	80013c4 <updateStateLights>
    		if(transmitting) {
 80015ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001724 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 808c 	beq.w	800170e <HAL_TIM_OC_DelayElapsedCallback+0x162>
  			  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_4);
 80015f6:	210c      	movs	r1, #12
 80015f8:	484b      	ldr	r0, [pc, #300]	@ (8001728 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 80015fa:	f001 fc37 	bl	8002e6c <HAL_TIM_OC_Start_IT>
    	if(pinValue == 1){
 80015fe:	e086      	b.n	800170e <HAL_TIM_OC_DelayElapsedCallback+0x162>
    		}
    	} else {
    		CurrentState = ERR_STATE;
 8001600:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8001602:	2202      	movs	r2, #2
 8001604:	601a      	str	r2, [r3, #0]
    		updateStateLights();
 8001606:	f7ff fedd 	bl	80013c4 <updateStateLights>
    		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_4);
 800160a:	210c      	movs	r1, #12
 800160c:	4846      	ldr	r0, [pc, #280]	@ (8001728 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 800160e:	f001 fd2b 	bl	8003068 <HAL_TIM_OC_Stop_IT>
    	if(pinValue == 1){
 8001612:	e07c      	b.n	800170e <HAL_TIM_OC_DelayElapsedCallback+0x162>
    		//transmitting = false;
    		//HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_4);
    	}

    } else if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a44      	ldr	r2, [pc, #272]	@ (800172c <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d178      	bne.n	8001710 <HAL_TIM_OC_DelayElapsedCallback+0x164>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7f1b      	ldrb	r3, [r3, #28]
 8001622:	2b08      	cmp	r3, #8
 8001624:	d174      	bne.n	8001710 <HAL_TIM_OC_DelayElapsedCallback+0x164>
    	if((manchester_buffer & 0b1) != ((manchester_buffer>>1) & 0b1)) {
 8001626:	4b42      	ldr	r3, [pc, #264]	@ (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	085a      	lsrs	r2, r3, #1
 800162c:	4b40      	ldr	r3, [pc, #256]	@ (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4053      	eors	r3, r2
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d019      	beq.n	800166e <HAL_TIM_OC_DelayElapsedCallback+0xc2>
        	manchester_buffer = manchester_buffer>>1;
 800163a:	4b3d      	ldr	r3, [pc, #244]	@ (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	085b      	lsrs	r3, r3, #1
 8001640:	4a3b      	ldr	r2, [pc, #236]	@ (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 8001642:	6013      	str	r3, [r2, #0]
        	manchester_bit_count--;
 8001644:	4b3b      	ldr	r3, [pc, #236]	@ (8001734 <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	3b01      	subs	r3, #1
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b39      	ldr	r3, [pc, #228]	@ (8001734 <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 800164e:	701a      	strb	r2, [r3, #0]
        	__HAL_TIM_SET_AUTORELOAD(&htim3, HALF_PERIOD);
 8001650:	4b35      	ldr	r3, [pc, #212]	@ (8001728 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001658:	62da      	str	r2, [r3, #44]	@ 0x2c
 800165a:	4b33      	ldr	r3, [pc, #204]	@ (8001728 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 800165c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001660:	60da      	str	r2, [r3, #12]
	        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, HALF_PERIOD);
 8001662:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800166a:	641a      	str	r2, [r3, #64]	@ 0x40
 800166c:	e018      	b.n	80016a0 <HAL_TIM_OC_DelayElapsedCallback+0xf4>
        } else {
        	manchester_buffer = manchester_buffer>>2;
 800166e:	4b30      	ldr	r3, [pc, #192]	@ (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	4a2e      	ldr	r2, [pc, #184]	@ (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 8001676:	6013      	str	r3, [r2, #0]
        	manchester_bit_count -= 2;
 8001678:	4b2e      	ldr	r3, [pc, #184]	@ (8001734 <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	3b02      	subs	r3, #2
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 8001682:	701a      	strb	r2, [r3, #0]
        	__HAL_TIM_SET_AUTORELOAD(&htim3, FULL_PERIOD);
 8001684:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800168c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800168e:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 8001690:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001694:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, FULL_PERIOD);
 8001696:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800169e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
    	if(!end_of_transmission && (manchester_bit_count <= 16)) {
 80016a0:	4b25      	ldr	r3, [pc, #148]	@ (8001738 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f083 0301 	eor.w	r3, r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d022      	beq.n	80016f6 <HAL_TIM_OC_DelayElapsedCallback+0x14a>
 80016b0:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d81e      	bhi.n	80016f6 <HAL_TIM_OC_DelayElapsedCallback+0x14a>
    		uint16_t reverse_manchester = getNextTransmissionChar(false);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fec3 	bl	8001444 <getNextTransmissionChar>
 80016be:	4603      	mov	r3, r0
 80016c0:	81fb      	strh	r3, [r7, #14]
    		manchester_bit_count += 16;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	3310      	adds	r3, #16
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 80016cc:	701a      	strb	r2, [r3, #0]
    		manchester_buffer &= 0xFF;
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 80016d6:	6013      	str	r3, [r2, #0]
    		if(reverse_manchester == 0) {
 80016d8:	89fb      	ldrh	r3, [r7, #14]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <HAL_TIM_OC_DelayElapsedCallback+0x13a>
    			end_of_transmission = true;
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
    	if(!end_of_transmission && (manchester_bit_count <= 16)) {
 80016e4:	e014      	b.n	8001710 <HAL_TIM_OC_DelayElapsedCallback+0x164>
    		} else {
    			manchester_buffer |= (reverse_manchester<<16);
 80016e6:	89fb      	ldrh	r3, [r7, #14]
 80016e8:	041a      	lsls	r2, r3, #16
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 80016f2:	6013      	str	r3, [r2, #0]
    	if(!end_of_transmission && (manchester_bit_count <= 16)) {
 80016f4:	e00c      	b.n	8001710 <HAL_TIM_OC_DelayElapsedCallback+0x164>
    		}
    	} else if(manchester_bit_count == 0) {
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d108      	bne.n	8001710 <HAL_TIM_OC_DelayElapsedCallback+0x164>
    		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_4);
 80016fe:	210c      	movs	r1, #12
 8001700:	4809      	ldr	r0, [pc, #36]	@ (8001728 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 8001702:	f001 fcb1 	bl	8003068 <HAL_TIM_OC_Stop_IT>
    		transmitting = false;
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
    		//HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_4);
    	}

    }
}
 800170c:	e000      	b.n	8001710 <HAL_TIM_OC_DelayElapsedCallback+0x164>
    	if(pinValue == 1){
 800170e:	bf00      	nop
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40020000 	.word	0x40020000
 800171c:	20000200 	.word	0x20000200
 8001720:	200001fc 	.word	0x200001fc
 8001724:	20000201 	.word	0x20000201
 8001728:	20000358 	.word	0x20000358
 800172c:	40000400 	.word	0x40000400
 8001730:	20000304 	.word	0x20000304
 8001734:	20000308 	.word	0x20000308
 8001738:	2000030a 	.word	0x2000030a

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <Error_Handler+0x8>

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <HAL_MspInit+0x5c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	4a13      	ldr	r2, [pc, #76]	@ (80017a4 <HAL_MspInit+0x5c>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175c:	6453      	str	r3, [r2, #68]	@ 0x44
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <HAL_MspInit+0x5c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <HAL_MspInit+0x5c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	4a0c      	ldr	r2, [pc, #48]	@ (80017a4 <HAL_MspInit+0x5c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40
 800177a:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <HAL_MspInit+0x5c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001786:	2007      	movs	r0, #7
 8001788:	f000 fc90 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2005      	movs	r0, #5
 8001792:	f000 fc96 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001796:	2005      	movs	r0, #5
 8001798:	f000 fcaf 	bl	80020fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <NMI_Handler+0x4>

080017b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <MemManage_Handler+0x4>

080017c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <UsageFault_Handler+0x4>

080017d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fe:	f000 fb65 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}

08001806 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <TIM2_IRQHandler+0x10>)
 800181a:	f001 fe41 	bl	80034a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000310 	.word	0x20000310

08001828 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <TIM3_IRQHandler+0x10>)
 800182e:	f001 fe37 	bl	80034a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000358 	.word	0x20000358

0800183c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return 1;
 8001840:	2301      	movs	r3, #1
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_kill>:

int _kill(int pid, int sig)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001856:	f004 fa77 	bl	8005d48 <__errno>
 800185a:	4603      	mov	r3, r0
 800185c:	2216      	movs	r2, #22
 800185e:	601a      	str	r2, [r3, #0]
  return -1;
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <_exit>:

void _exit (int status)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ffe7 	bl	800184c <_kill>
  while (1) {}    /* Make sure we hang here */
 800187e:	bf00      	nop
 8001880:	e7fd      	b.n	800187e <_exit+0x12>

08001882 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	e00a      	b.n	80018aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001894:	f7ff fc52 	bl	800113c <__io_getchar>
 8001898:	4601      	mov	r1, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	60ba      	str	r2, [r7, #8]
 80018a0:	b2ca      	uxtb	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dbf0      	blt.n	8001894 <_read+0x12>
  }

  return len;
 80018b2:	687b      	ldr	r3, [r7, #4]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e009      	b.n	80018e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	60ba      	str	r2, [r7, #8]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fc1e 	bl	8001118 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbf1      	blt.n	80018ce <_write+0x12>
  }
  return len;
 80018ea:	687b      	ldr	r3, [r7, #4]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_close>:

int _close(int file)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800191c:	605a      	str	r2, [r3, #4]
  return 0;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_isatty>:

int _isatty(int file)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001942:	b480      	push	{r7}
 8001944:	b085      	sub	sp, #20
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001964:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <_sbrk+0x5c>)
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <_sbrk+0x60>)
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <_sbrk+0x64>)
 800197a:	4a12      	ldr	r2, [pc, #72]	@ (80019c4 <_sbrk+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	d207      	bcs.n	800199c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800198c:	f004 f9dc 	bl	8005d48 <__errno>
 8001990:	4603      	mov	r3, r0
 8001992:	220c      	movs	r2, #12
 8001994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e009      	b.n	80019b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a2:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <_sbrk+0x64>)
 80019ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20020000 	.word	0x20020000
 80019bc:	00000400 	.word	0x00000400
 80019c0:	2000030c 	.word	0x2000030c
 80019c4:	20000538 	.word	0x20000538

080019c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <SystemInit+0x20>)
 80019ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d2:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <SystemInit+0x20>)
 80019d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	@ 0x38
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
 8001a18:	615a      	str	r2, [r3, #20]
 8001a1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <MX_TIM2_Init+0xec>)
 8001a1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8001a24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad8 <MX_TIM2_Init+0xec>)
 8001a26:	2231      	movs	r2, #49	@ 0x31
 8001a28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <MX_TIM2_Init+0xec>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a30:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <MX_TIM2_Init+0xec>)
 8001a32:	f04f 32ff 	mov.w	r2, #4294967295
 8001a36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <MX_TIM2_Init+0xec>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <MX_TIM2_Init+0xec>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a44:	4824      	ldr	r0, [pc, #144]	@ (8001ad8 <MX_TIM2_Init+0xec>)
 8001a46:	f001 fbc1 	bl	80031cc <HAL_TIM_IC_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a50:	f7ff fe74 	bl	800173c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001a54:	4820      	ldr	r0, [pc, #128]	@ (8001ad8 <MX_TIM2_Init+0xec>)
 8001a56:	f001 f9b9 	bl	8002dcc <HAL_TIM_OC_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a60:	f7ff fe6c 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	633b      	str	r3, [r7, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a70:	4619      	mov	r1, r3
 8001a72:	4819      	ldr	r0, [pc, #100]	@ (8001ad8 <MX_TIM2_Init+0xec>)
 8001a74:	f002 faba 	bl	8003fec <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001a7e:	f7ff fe5d 	bl	800173c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001a82:	230a      	movs	r3, #10
 8001a84:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a86:	2301      	movs	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICFilter = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	2200      	movs	r2, #0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480f      	ldr	r0, [pc, #60]	@ (8001ad8 <MX_TIM2_Init+0xec>)
 8001a9c:	f001 fe4c 	bl	8003738 <HAL_TIM_IC_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8001aa6:	f7ff fe49 	bl	800173c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001aaa:	2330      	movs	r3, #48	@ 0x30
 8001aac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2204      	movs	r2, #4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <MX_TIM2_Init+0xec>)
 8001ac2:	f001 fddd 	bl	8003680 <HAL_TIM_OC_ConfigChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8001acc:	f7ff fe36 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	3738      	adds	r7, #56	@ 0x38
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000310 	.word	0x20000310

08001adc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	@ 0x28
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001afe:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <MX_TIM3_Init+0xac>)
 8001b00:	4a22      	ldr	r2, [pc, #136]	@ (8001b8c <MX_TIM3_Init+0xb0>)
 8001b02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49;
 8001b04:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <MX_TIM3_Init+0xac>)
 8001b06:	2231      	movs	r2, #49	@ 0x31
 8001b08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b88 <MX_TIM3_Init+0xac>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <MX_TIM3_Init+0xac>)
 8001b12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <MX_TIM3_Init+0xac>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <MX_TIM3_Init+0xac>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001b24:	4818      	ldr	r0, [pc, #96]	@ (8001b88 <MX_TIM3_Init+0xac>)
 8001b26:	f001 f951 	bl	8002dcc <HAL_TIM_OC_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b30:	f7ff fe04 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b3c:	f107 0320 	add.w	r3, r7, #32
 8001b40:	4619      	mov	r1, r3
 8001b42:	4811      	ldr	r0, [pc, #68]	@ (8001b88 <MX_TIM3_Init+0xac>)
 8001b44:	f002 fa52 	bl	8003fec <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b4e:	f7ff fdf5 	bl	800173c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001b52:	2330      	movs	r3, #48	@ 0x30
 8001b54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	220c      	movs	r2, #12
 8001b66:	4619      	mov	r1, r3
 8001b68:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <MX_TIM3_Init+0xac>)
 8001b6a:	f001 fd89 	bl	8003680 <HAL_TIM_OC_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b74:	f7ff fde2 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b78:	4803      	ldr	r0, [pc, #12]	@ (8001b88 <MX_TIM3_Init+0xac>)
 8001b7a:	f000 f87f 	bl	8001c7c <HAL_TIM_MspPostInit>

}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	@ 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000358 	.word	0x20000358
 8001b8c:	40000400 	.word	0x40000400

08001b90 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	@ 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb0:	d134      	bne.n	8001c1c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_TIM_IC_MspInit+0x94>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	4a1a      	ldr	r2, [pc, #104]	@ (8001c24 <HAL_TIM_IC_MspInit+0x94>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <HAL_TIM_IC_MspInit+0x94>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <HAL_TIM_IC_MspInit+0x94>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a13      	ldr	r2, [pc, #76]	@ (8001c24 <HAL_TIM_IC_MspInit+0x94>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <HAL_TIM_IC_MspInit+0x94>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4808      	ldr	r0, [pc, #32]	@ (8001c28 <HAL_TIM_IC_MspInit+0x98>)
 8001c08:	f000 fa92 	bl	8002130 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	201c      	movs	r0, #28
 8001c12:	f000 fa56 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c16:	201c      	movs	r0, #28
 8001c18:	f000 fa6f 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	@ 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020000 	.word	0x40020000

08001c2c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM3)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0e      	ldr	r2, [pc, #56]	@ (8001c74 <HAL_TIM_OC_MspInit+0x48>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d115      	bne.n	8001c6a <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <HAL_TIM_OC_MspInit+0x4c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	4a0c      	ldr	r2, [pc, #48]	@ (8001c78 <HAL_TIM_OC_MspInit+0x4c>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_TIM_OC_MspInit+0x4c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	201d      	movs	r0, #29
 8001c60:	f000 fa2f 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c64:	201d      	movs	r0, #29
 8001c66:	f000 fa48 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a12      	ldr	r2, [pc, #72]	@ (8001ce4 <HAL_TIM_MspPostInit+0x68>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d11d      	bne.n	8001cda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <HAL_TIM_MspPostInit+0x6c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <HAL_TIM_MspPostInit+0x6c>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_TIM_MspPostInit+0x6c>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	@ (8001cec <HAL_TIM_MspPostInit+0x70>)
 8001cd6:	f000 fa2b 	bl	8002130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40000400 	.word	0x40000400
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020400 	.word	0x40020400

08001cf0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <MX_USART2_UART_Init+0x50>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cfc:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d28:	f002 f9e2 	bl	80040f0 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d32:	f7ff fd03 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200003a0 	.word	0x200003a0
 8001d40:	40004400 	.word	0x40004400

08001d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	@ 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	@ (8001dc8 <HAL_UART_MspInit+0x84>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d12b      	bne.n	8001dbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <HAL_UART_MspInit+0x88>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4a17      	ldr	r2, [pc, #92]	@ (8001dcc <HAL_UART_MspInit+0x88>)
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_UART_MspInit+0x88>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <HAL_UART_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a10      	ldr	r2, [pc, #64]	@ (8001dcc <HAL_UART_MspInit+0x88>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <HAL_UART_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d9e:	230c      	movs	r3, #12
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dae:	2307      	movs	r3, #7
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <HAL_UART_MspInit+0x8c>)
 8001dba:	f000 f9b9 	bl	8002130 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	@ 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dd8:	f7ff fdf6 	bl	80019c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ddc:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dde:	490d      	ldr	r1, [pc, #52]	@ (8001e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e02:	f003 ffa7 	bl	8005d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e06:	f7ff f9b7 	bl	8001178 <main>
  bx  lr    
 8001e0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001e18:	080098c8 	.word	0x080098c8
  ldr r2, =_sbss
 8001e1c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e20:	20000538 	.word	0x20000538

08001e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <HAL_Init+0x40>)
 8001e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_Init+0x40>)
 8001e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	@ (8001e68 <HAL_Init+0x40>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f92b 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fc74 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f943 	bl	8002116 <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 f90b 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	@ (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000004 	.word	0x20000004
 8001ec4:	2000000c 	.word	0x2000000c
 8001ec8:	20000008 	.word	0x20000008

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	2000000c 	.word	0x2000000c
 8001ef0:	200003e8 	.word	0x200003e8

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	200003e8 	.word	0x200003e8

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	@ (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	@ (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	@ (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	@ (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	@ 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff29 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff3e 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	@ 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e159      	b.n	8002400 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	f040 8148 	bne.w	80023fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d005      	beq.n	8002182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217e:	2b02      	cmp	r3, #2
 8002180:	d130      	bne.n	80021e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 0201 	and.w	r2, r3, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d017      	beq.n	8002220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d123      	bne.n	8002274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	08da      	lsrs	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3208      	adds	r2, #8
 8002234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	69b9      	ldr	r1, [r7, #24]
 8002270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0203 	and.w	r2, r3, #3
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80a2 	beq.w	80023fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b57      	ldr	r3, [pc, #348]	@ (8002418 <HAL_GPIO_Init+0x2e8>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022be:	4a56      	ldr	r2, [pc, #344]	@ (8002418 <HAL_GPIO_Init+0x2e8>)
 80022c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c6:	4b54      	ldr	r3, [pc, #336]	@ (8002418 <HAL_GPIO_Init+0x2e8>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d2:	4a52      	ldr	r2, [pc, #328]	@ (800241c <HAL_GPIO_Init+0x2ec>)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	3302      	adds	r3, #2
 80022da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	220f      	movs	r2, #15
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a49      	ldr	r2, [pc, #292]	@ (8002420 <HAL_GPIO_Init+0x2f0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d019      	beq.n	8002332 <HAL_GPIO_Init+0x202>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a48      	ldr	r2, [pc, #288]	@ (8002424 <HAL_GPIO_Init+0x2f4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0x1fe>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a47      	ldr	r2, [pc, #284]	@ (8002428 <HAL_GPIO_Init+0x2f8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_Init+0x1fa>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a46      	ldr	r2, [pc, #280]	@ (800242c <HAL_GPIO_Init+0x2fc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x1f6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a45      	ldr	r2, [pc, #276]	@ (8002430 <HAL_GPIO_Init+0x300>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_Init+0x1f2>
 800231e:	2304      	movs	r3, #4
 8002320:	e008      	b.n	8002334 <HAL_GPIO_Init+0x204>
 8002322:	2307      	movs	r3, #7
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x204>
 8002326:	2303      	movs	r3, #3
 8002328:	e004      	b.n	8002334 <HAL_GPIO_Init+0x204>
 800232a:	2302      	movs	r3, #2
 800232c:	e002      	b.n	8002334 <HAL_GPIO_Init+0x204>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x204>
 8002332:	2300      	movs	r3, #0
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	f002 0203 	and.w	r2, r2, #3
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	4093      	lsls	r3, r2
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002344:	4935      	ldr	r1, [pc, #212]	@ (800241c <HAL_GPIO_Init+0x2ec>)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002352:	4b38      	ldr	r3, [pc, #224]	@ (8002434 <HAL_GPIO_Init+0x304>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002376:	4a2f      	ldr	r2, [pc, #188]	@ (8002434 <HAL_GPIO_Init+0x304>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800237c:	4b2d      	ldr	r3, [pc, #180]	@ (8002434 <HAL_GPIO_Init+0x304>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a0:	4a24      	ldr	r2, [pc, #144]	@ (8002434 <HAL_GPIO_Init+0x304>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023a6:	4b23      	ldr	r3, [pc, #140]	@ (8002434 <HAL_GPIO_Init+0x304>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002434 <HAL_GPIO_Init+0x304>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d0:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <HAL_GPIO_Init+0x304>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002434 <HAL_GPIO_Init+0x304>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3301      	adds	r3, #1
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b0f      	cmp	r3, #15
 8002404:	f67f aea2 	bls.w	800214c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	40013800 	.word	0x40013800
 8002420:	40020000 	.word	0x40020000
 8002424:	40020400 	.word	0x40020400
 8002428:	40020800 	.word	0x40020800
 800242c:	40020c00 	.word	0x40020c00
 8002430:	40021000 	.word	0x40021000
 8002434:	40013c00 	.word	0x40013c00

08002438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e001      	b.n	800245a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
 8002474:	4613      	mov	r3, r2
 8002476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002478:	787b      	ldrb	r3, [r7, #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002484:	e003      	b.n	800248e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002486:	887b      	ldrh	r3, [r7, #2]
 8002488:	041a      	lsls	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	619a      	str	r2, [r3, #24]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e267      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d075      	beq.n	80025a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024ba:	4b88      	ldr	r3, [pc, #544]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d00c      	beq.n	80024e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c6:	4b85      	ldr	r3, [pc, #532]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d112      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b82      	ldr	r3, [pc, #520]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024de:	d10b      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	4b7e      	ldr	r3, [pc, #504]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d05b      	beq.n	80025a4 <HAL_RCC_OscConfig+0x108>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d157      	bne.n	80025a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e242      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x74>
 8002502:	4b76      	ldr	r3, [pc, #472]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a75      	ldr	r2, [pc, #468]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e01d      	b.n	800254c <HAL_RCC_OscConfig+0xb0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x98>
 800251a:	4b70      	ldr	r3, [pc, #448]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6f      	ldr	r2, [pc, #444]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b6d      	ldr	r3, [pc, #436]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6c      	ldr	r2, [pc, #432]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0xb0>
 8002534:	4b69      	ldr	r3, [pc, #420]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a68      	ldr	r2, [pc, #416]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b66      	ldr	r3, [pc, #408]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a65      	ldr	r2, [pc, #404]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800254a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff fcce 	bl	8001ef4 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff fcca 	bl	8001ef4 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	@ 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e207      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b5b      	ldr	r3, [pc, #364]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0xc0>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff fcba 	bl	8001ef4 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002584:	f7ff fcb6 	bl	8001ef4 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	@ 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e1f3      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	4b51      	ldr	r3, [pc, #324]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0xe8>
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025b2:	4b4a      	ldr	r3, [pc, #296]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b47      	ldr	r3, [pc, #284]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d11c      	bne.n	8002604 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b44      	ldr	r3, [pc, #272]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d116      	bne.n	8002604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_RCC_OscConfig+0x152>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e1c7      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b3b      	ldr	r3, [pc, #236]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4937      	ldr	r1, [pc, #220]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	e03a      	b.n	800267a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260c:	4b34      	ldr	r3, [pc, #208]	@ (80026e0 <HAL_RCC_OscConfig+0x244>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7ff fc6f 	bl	8001ef4 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261a:	f7ff fc6b 	bl	8001ef4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e1a8      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	4b2b      	ldr	r3, [pc, #172]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b28      	ldr	r3, [pc, #160]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4925      	ldr	r1, [pc, #148]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264e:	4b24      	ldr	r3, [pc, #144]	@ (80026e0 <HAL_RCC_OscConfig+0x244>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7ff fc4e 	bl	8001ef4 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265c:	f7ff fc4a 	bl	8001ef4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e187      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d036      	beq.n	80026f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268e:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <HAL_RCC_OscConfig+0x248>)
 8002690:	2201      	movs	r2, #1
 8002692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7ff fc2e 	bl	8001ef4 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269c:	f7ff fc2a 	bl	8001ef4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e167      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_RCC_OscConfig+0x240>)
 80026b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x200>
 80026ba:	e01b      	b.n	80026f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <HAL_RCC_OscConfig+0x248>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7ff fc17 	bl	8001ef4 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	e00e      	b.n	80026e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ca:	f7ff fc13 	bl	8001ef4 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d907      	bls.n	80026e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e150      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
 80026dc:	40023800 	.word	0x40023800
 80026e0:	42470000 	.word	0x42470000
 80026e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b88      	ldr	r3, [pc, #544]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ea      	bne.n	80026ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8097 	beq.w	8002830 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b81      	ldr	r3, [pc, #516]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b7d      	ldr	r3, [pc, #500]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	4a7c      	ldr	r2, [pc, #496]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	@ 0x40
 8002722:	4b7a      	ldr	r3, [pc, #488]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b77      	ldr	r3, [pc, #476]	@ (8002910 <HAL_RCC_OscConfig+0x474>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d118      	bne.n	8002770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b74      	ldr	r3, [pc, #464]	@ (8002910 <HAL_RCC_OscConfig+0x474>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a73      	ldr	r2, [pc, #460]	@ (8002910 <HAL_RCC_OscConfig+0x474>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7ff fbd3 	bl	8001ef4 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7ff fbcf 	bl	8001ef4 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e10c      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	4b6a      	ldr	r3, [pc, #424]	@ (8002910 <HAL_RCC_OscConfig+0x474>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x2ea>
 8002778:	4b64      	ldr	r3, [pc, #400]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277c:	4a63      	ldr	r2, [pc, #396]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	@ 0x70
 8002784:	e01c      	b.n	80027c0 <HAL_RCC_OscConfig+0x324>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b05      	cmp	r3, #5
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x30c>
 800278e:	4b5f      	ldr	r3, [pc, #380]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002792:	4a5e      	ldr	r2, [pc, #376]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6713      	str	r3, [r2, #112]	@ 0x70
 800279a:	4b5c      	ldr	r3, [pc, #368]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	4a5b      	ldr	r2, [pc, #364]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0x324>
 80027a8:	4b58      	ldr	r3, [pc, #352]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ac:	4a57      	ldr	r2, [pc, #348]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b4:	4b55      	ldr	r3, [pc, #340]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b8:	4a54      	ldr	r2, [pc, #336]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d015      	beq.n	80027f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7ff fb94 	bl	8001ef4 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7ff fb90 	bl	8001ef4 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0cb      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	4b49      	ldr	r3, [pc, #292]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0ee      	beq.n	80027d0 <HAL_RCC_OscConfig+0x334>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f4:	f7ff fb7e 	bl	8001ef4 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7ff fb7a 	bl	8001ef4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0b5      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002812:	4b3e      	ldr	r3, [pc, #248]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ee      	bne.n	80027fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b39      	ldr	r3, [pc, #228]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	4a38      	ldr	r2, [pc, #224]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a1 	beq.w	800297c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800283a:	4b34      	ldr	r3, [pc, #208]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b08      	cmp	r3, #8
 8002844:	d05c      	beq.n	8002900 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d141      	bne.n	80028d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b31      	ldr	r3, [pc, #196]	@ (8002914 <HAL_RCC_OscConfig+0x478>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7ff fb4e 	bl	8001ef4 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285c:	f7ff fb4a 	bl	8001ef4 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e087      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	4b27      	ldr	r3, [pc, #156]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69da      	ldr	r2, [r3, #28]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	019b      	lsls	r3, r3, #6
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	3b01      	subs	r3, #1
 8002894:	041b      	lsls	r3, r3, #16
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	491b      	ldr	r1, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <HAL_RCC_OscConfig+0x478>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7ff fb23 	bl	8001ef4 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b2:	f7ff fb1f 	bl	8001ef4 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e05c      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c4:	4b11      	ldr	r3, [pc, #68]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x416>
 80028d0:	e054      	b.n	800297c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <HAL_RCC_OscConfig+0x478>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff fb0c 	bl	8001ef4 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7ff fb08 	bl	8001ef4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e045      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4b06      	ldr	r3, [pc, #24]	@ (800290c <HAL_RCC_OscConfig+0x470>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x444>
 80028fe:	e03d      	b.n	800297c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d107      	bne.n	8002918 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e038      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
 800290c:	40023800 	.word	0x40023800
 8002910:	40007000 	.word	0x40007000
 8002914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002918:	4b1b      	ldr	r3, [pc, #108]	@ (8002988 <HAL_RCC_OscConfig+0x4ec>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d028      	beq.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d121      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d11a      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002948:	4013      	ands	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800294e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002950:	4293      	cmp	r3, r2
 8002952:	d111      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	3b01      	subs	r3, #1
 8002962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d107      	bne.n	8002978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800

0800298c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0cc      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a0:	4b68      	ldr	r3, [pc, #416]	@ (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d90c      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b65      	ldr	r3, [pc, #404]	@ (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b63      	ldr	r3, [pc, #396]	@ (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0b8      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e0:	4b59      	ldr	r3, [pc, #356]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a58      	ldr	r2, [pc, #352]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f8:	4b53      	ldr	r3, [pc, #332]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a52      	ldr	r2, [pc, #328]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b50      	ldr	r3, [pc, #320]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	494d      	ldr	r1, [pc, #308]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d044      	beq.n	8002aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b47      	ldr	r3, [pc, #284]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d119      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e07f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e06f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e067      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b37      	ldr	r3, [pc, #220]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4934      	ldr	r1, [pc, #208]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a7c:	f7ff fa3a 	bl	8001ef4 <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7ff fa36 	bl	8001ef4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e04f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aac:	4b25      	ldr	r3, [pc, #148]	@ (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d20c      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b22      	ldr	r3, [pc, #136]	@ (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e032      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4916      	ldr	r1, [pc, #88]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afe:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	490e      	ldr	r1, [pc, #56]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b12:	f000 f821 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	490a      	ldr	r1, [pc, #40]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	5ccb      	ldrb	r3, [r1, r3]
 8002b26:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	4a09      	ldr	r2, [pc, #36]	@ (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f99a 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023c00 	.word	0x40023c00
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	08009470 	.word	0x08009470
 8002b50:	20000004 	.word	0x20000004
 8002b54:	20000008 	.word	0x20000008

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b5c:	b094      	sub	sp, #80	@ 0x50
 8002b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b70:	4b79      	ldr	r3, [pc, #484]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d00d      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x40>
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	f200 80e1 	bhi.w	8002d44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x34>
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d003      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b8a:	e0db      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b73      	ldr	r3, [pc, #460]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b90:	e0db      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b92:	4b73      	ldr	r3, [pc, #460]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b96:	e0d8      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b98:	4b6f      	ldr	r3, [pc, #444]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ba0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d063      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bae:	4b6a      	ldr	r3, [pc, #424]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bca:	4622      	mov	r2, r4
 8002bcc:	462b      	mov	r3, r5
 8002bce:	f04f 0000 	mov.w	r0, #0
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	0159      	lsls	r1, r3, #5
 8002bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bdc:	0150      	lsls	r0, r2, #5
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4621      	mov	r1, r4
 8002be4:	1a51      	subs	r1, r2, r1
 8002be6:	6139      	str	r1, [r7, #16]
 8002be8:	4629      	mov	r1, r5
 8002bea:	eb63 0301 	sbc.w	r3, r3, r1
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bfc:	4659      	mov	r1, fp
 8002bfe:	018b      	lsls	r3, r1, #6
 8002c00:	4651      	mov	r1, sl
 8002c02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c06:	4651      	mov	r1, sl
 8002c08:	018a      	lsls	r2, r1, #6
 8002c0a:	4651      	mov	r1, sl
 8002c0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c10:	4659      	mov	r1, fp
 8002c12:	eb63 0901 	sbc.w	r9, r3, r1
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c2a:	4690      	mov	r8, r2
 8002c2c:	4699      	mov	r9, r3
 8002c2e:	4623      	mov	r3, r4
 8002c30:	eb18 0303 	adds.w	r3, r8, r3
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	462b      	mov	r3, r5
 8002c38:	eb49 0303 	adc.w	r3, r9, r3
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	024b      	lsls	r3, r1, #9
 8002c4e:	4621      	mov	r1, r4
 8002c50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c54:	4621      	mov	r1, r4
 8002c56:	024a      	lsls	r2, r1, #9
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c5e:	2200      	movs	r2, #0
 8002c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c68:	f7fe f816 	bl	8000c98 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4613      	mov	r3, r2
 8002c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c74:	e058      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c76:	4b38      	ldr	r3, [pc, #224]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	099b      	lsrs	r3, r3, #6
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	4611      	mov	r1, r2
 8002c82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c86:	623b      	str	r3, [r7, #32]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c90:	4642      	mov	r2, r8
 8002c92:	464b      	mov	r3, r9
 8002c94:	f04f 0000 	mov.w	r0, #0
 8002c98:	f04f 0100 	mov.w	r1, #0
 8002c9c:	0159      	lsls	r1, r3, #5
 8002c9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca2:	0150      	lsls	r0, r2, #5
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4641      	mov	r1, r8
 8002caa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cae:	4649      	mov	r1, r9
 8002cb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cc8:	ebb2 040a 	subs.w	r4, r2, sl
 8002ccc:	eb63 050b 	sbc.w	r5, r3, fp
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	00eb      	lsls	r3, r5, #3
 8002cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cde:	00e2      	lsls	r2, r4, #3
 8002ce0:	4614      	mov	r4, r2
 8002ce2:	461d      	mov	r5, r3
 8002ce4:	4643      	mov	r3, r8
 8002ce6:	18e3      	adds	r3, r4, r3
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	464b      	mov	r3, r9
 8002cec:	eb45 0303 	adc.w	r3, r5, r3
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cfe:	4629      	mov	r1, r5
 8002d00:	028b      	lsls	r3, r1, #10
 8002d02:	4621      	mov	r1, r4
 8002d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d08:	4621      	mov	r1, r4
 8002d0a:	028a      	lsls	r2, r1, #10
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d12:	2200      	movs	r2, #0
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	61fa      	str	r2, [r7, #28]
 8002d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d1c:	f7fd ffbc 	bl	8000c98 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4613      	mov	r3, r2
 8002d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	0c1b      	lsrs	r3, r3, #16
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	3301      	adds	r3, #1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d42:	e002      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3750      	adds	r7, #80	@ 0x50
 8002d50:	46bd      	mov	sp, r7
 8002d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	00f42400 	.word	0x00f42400
 8002d60:	007a1200 	.word	0x007a1200

08002d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d68:	4b03      	ldr	r3, [pc, #12]	@ (8002d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000004 	.word	0x20000004

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d80:	f7ff fff0 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0a9b      	lsrs	r3, r3, #10
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	@ (8002da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08009480 	.word	0x08009480

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da8:	f7ff ffdc 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0b5b      	lsrs	r3, r3, #13
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	@ (8002dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08009480 	.word	0x08009480

08002dcc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e041      	b.n	8002e62 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe ff1a 	bl	8001c2c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f000 fd92 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <HAL_TIM_OC_Start_IT+0x28>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e022      	b.n	8002eda <HAL_TIM_OC_Start_IT+0x6e>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d109      	bne.n	8002eae <HAL_TIM_OC_Start_IT+0x42>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	e015      	b.n	8002eda <HAL_TIM_OC_Start_IT+0x6e>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d109      	bne.n	8002ec8 <HAL_TIM_OC_Start_IT+0x5c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	bf14      	ite	ne
 8002ec0:	2301      	movne	r3, #1
 8002ec2:	2300      	moveq	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e008      	b.n	8002eda <HAL_TIM_OC_Start_IT+0x6e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0b3      	b.n	800304a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d104      	bne.n	8002ef2 <HAL_TIM_OC_Start_IT+0x86>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ef0:	e013      	b.n	8002f1a <HAL_TIM_OC_Start_IT+0xae>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d104      	bne.n	8002f02 <HAL_TIM_OC_Start_IT+0x96>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f00:	e00b      	b.n	8002f1a <HAL_TIM_OC_Start_IT+0xae>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d104      	bne.n	8002f12 <HAL_TIM_OC_Start_IT+0xa6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f10:	e003      	b.n	8002f1a <HAL_TIM_OC_Start_IT+0xae>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d841      	bhi.n	8002fa4 <HAL_TIM_OC_Start_IT+0x138>
 8002f20:	a201      	add	r2, pc, #4	@ (adr r2, 8002f28 <HAL_TIM_OC_Start_IT+0xbc>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f5d 	.word	0x08002f5d
 8002f2c:	08002fa5 	.word	0x08002fa5
 8002f30:	08002fa5 	.word	0x08002fa5
 8002f34:	08002fa5 	.word	0x08002fa5
 8002f38:	08002f6f 	.word	0x08002f6f
 8002f3c:	08002fa5 	.word	0x08002fa5
 8002f40:	08002fa5 	.word	0x08002fa5
 8002f44:	08002fa5 	.word	0x08002fa5
 8002f48:	08002f81 	.word	0x08002f81
 8002f4c:	08002fa5 	.word	0x08002fa5
 8002f50:	08002fa5 	.word	0x08002fa5
 8002f54:	08002fa5 	.word	0x08002fa5
 8002f58:	08002f93 	.word	0x08002f93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0202 	orr.w	r2, r2, #2
 8002f6a:	60da      	str	r2, [r3, #12]
      break;
 8002f6c:	e01d      	b.n	8002faa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0204 	orr.w	r2, r2, #4
 8002f7c:	60da      	str	r2, [r3, #12]
      break;
 8002f7e:	e014      	b.n	8002faa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0208 	orr.w	r2, r2, #8
 8002f8e:	60da      	str	r2, [r3, #12]
      break;
 8002f90:	e00b      	b.n	8002faa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0210 	orr.w	r2, r2, #16
 8002fa0:	60da      	str	r2, [r3, #12]
      break;
 8002fa2:	e002      	b.n	8002faa <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d14b      	bne.n	8003048 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fff1 	bl	8003fa0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a24      	ldr	r2, [pc, #144]	@ (8003054 <HAL_TIM_OC_Start_IT+0x1e8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fd6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003054 <HAL_TIM_OC_Start_IT+0x1e8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d018      	beq.n	8003014 <HAL_TIM_OC_Start_IT+0x1a8>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fea:	d013      	beq.n	8003014 <HAL_TIM_OC_Start_IT+0x1a8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	@ (8003058 <HAL_TIM_OC_Start_IT+0x1ec>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00e      	beq.n	8003014 <HAL_TIM_OC_Start_IT+0x1a8>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a18      	ldr	r2, [pc, #96]	@ (800305c <HAL_TIM_OC_Start_IT+0x1f0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d009      	beq.n	8003014 <HAL_TIM_OC_Start_IT+0x1a8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a16      	ldr	r2, [pc, #88]	@ (8003060 <HAL_TIM_OC_Start_IT+0x1f4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d004      	beq.n	8003014 <HAL_TIM_OC_Start_IT+0x1a8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a15      	ldr	r2, [pc, #84]	@ (8003064 <HAL_TIM_OC_Start_IT+0x1f8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d111      	bne.n	8003038 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b06      	cmp	r3, #6
 8003024:	d010      	beq.n	8003048 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003036:	e007      	b.n	8003048 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40010000 	.word	0x40010000
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800
 8003060:	40000c00 	.word	0x40000c00
 8003064:	40014000 	.word	0x40014000

08003068 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b0c      	cmp	r3, #12
 800307a:	d841      	bhi.n	8003100 <HAL_TIM_OC_Stop_IT+0x98>
 800307c:	a201      	add	r2, pc, #4	@ (adr r2, 8003084 <HAL_TIM_OC_Stop_IT+0x1c>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	080030b9 	.word	0x080030b9
 8003088:	08003101 	.word	0x08003101
 800308c:	08003101 	.word	0x08003101
 8003090:	08003101 	.word	0x08003101
 8003094:	080030cb 	.word	0x080030cb
 8003098:	08003101 	.word	0x08003101
 800309c:	08003101 	.word	0x08003101
 80030a0:	08003101 	.word	0x08003101
 80030a4:	080030dd 	.word	0x080030dd
 80030a8:	08003101 	.word	0x08003101
 80030ac:	08003101 	.word	0x08003101
 80030b0:	08003101 	.word	0x08003101
 80030b4:	080030ef 	.word	0x080030ef
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0202 	bic.w	r2, r2, #2
 80030c6:	60da      	str	r2, [r3, #12]
      break;
 80030c8:	e01d      	b.n	8003106 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0204 	bic.w	r2, r2, #4
 80030d8:	60da      	str	r2, [r3, #12]
      break;
 80030da:	e014      	b.n	8003106 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0208 	bic.w	r2, r2, #8
 80030ea:	60da      	str	r2, [r3, #12]
      break;
 80030ec:	e00b      	b.n	8003106 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0210 	bic.w	r2, r2, #16
 80030fc:	60da      	str	r2, [r3, #12]
      break;
 80030fe:	e002      	b.n	8003106 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	bf00      	nop
  }

  if (status == HAL_OK)
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d157      	bne.n	80031bc <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2200      	movs	r2, #0
 8003112:	6839      	ldr	r1, [r7, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 ff43 	bl	8003fa0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2a      	ldr	r2, [pc, #168]	@ (80031c8 <HAL_TIM_OC_Stop_IT+0x160>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d117      	bne.n	8003154 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6a1a      	ldr	r2, [r3, #32]
 800312a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10f      	bne.n	8003154 <HAL_TIM_OC_Stop_IT+0xec>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6a1a      	ldr	r2, [r3, #32]
 800313a:	f240 4344 	movw	r3, #1092	@ 0x444
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d107      	bne.n	8003154 <HAL_TIM_OC_Stop_IT+0xec>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003152:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6a1a      	ldr	r2, [r3, #32]
 800315a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10f      	bne.n	8003184 <HAL_TIM_OC_Stop_IT+0x11c>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6a1a      	ldr	r2, [r3, #32]
 800316a:	f240 4344 	movw	r3, #1092	@ 0x444
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_TIM_OC_Stop_IT+0x11c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <HAL_TIM_OC_Stop_IT+0x12c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003192:	e013      	b.n	80031bc <HAL_TIM_OC_Stop_IT+0x154>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b04      	cmp	r3, #4
 8003198:	d104      	bne.n	80031a4 <HAL_TIM_OC_Stop_IT+0x13c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031a2:	e00b      	b.n	80031bc <HAL_TIM_OC_Stop_IT+0x154>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d104      	bne.n	80031b4 <HAL_TIM_OC_Stop_IT+0x14c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031b2:	e003      	b.n	80031bc <HAL_TIM_OC_Stop_IT+0x154>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40010000 	.word	0x40010000

080031cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e041      	b.n	8003262 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fe fccc 	bl	8001b90 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f000 fb92 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <HAL_TIM_IC_Start_IT+0x1e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e013      	b.n	80032b2 <HAL_TIM_IC_Start_IT+0x46>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d104      	bne.n	800329a <HAL_TIM_IC_Start_IT+0x2e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e00b      	b.n	80032b2 <HAL_TIM_IC_Start_IT+0x46>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d104      	bne.n	80032aa <HAL_TIM_IC_Start_IT+0x3e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	e003      	b.n	80032b2 <HAL_TIM_IC_Start_IT+0x46>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <HAL_TIM_IC_Start_IT+0x58>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e013      	b.n	80032ec <HAL_TIM_IC_Start_IT+0x80>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d104      	bne.n	80032d4 <HAL_TIM_IC_Start_IT+0x68>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	e00b      	b.n	80032ec <HAL_TIM_IC_Start_IT+0x80>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d104      	bne.n	80032e4 <HAL_TIM_IC_Start_IT+0x78>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e003      	b.n	80032ec <HAL_TIM_IC_Start_IT+0x80>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032ee:	7bbb      	ldrb	r3, [r7, #14]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d102      	bne.n	80032fa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032f4:	7b7b      	ldrb	r3, [r7, #13]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d001      	beq.n	80032fe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0c2      	b.n	8003484 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <HAL_TIM_IC_Start_IT+0xa2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800330c:	e013      	b.n	8003336 <HAL_TIM_IC_Start_IT+0xca>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d104      	bne.n	800331e <HAL_TIM_IC_Start_IT+0xb2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800331c:	e00b      	b.n	8003336 <HAL_TIM_IC_Start_IT+0xca>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d104      	bne.n	800332e <HAL_TIM_IC_Start_IT+0xc2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800332c:	e003      	b.n	8003336 <HAL_TIM_IC_Start_IT+0xca>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d104      	bne.n	8003346 <HAL_TIM_IC_Start_IT+0xda>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003344:	e013      	b.n	800336e <HAL_TIM_IC_Start_IT+0x102>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b04      	cmp	r3, #4
 800334a:	d104      	bne.n	8003356 <HAL_TIM_IC_Start_IT+0xea>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003354:	e00b      	b.n	800336e <HAL_TIM_IC_Start_IT+0x102>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d104      	bne.n	8003366 <HAL_TIM_IC_Start_IT+0xfa>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003364:	e003      	b.n	800336e <HAL_TIM_IC_Start_IT+0x102>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b0c      	cmp	r3, #12
 8003372:	d841      	bhi.n	80033f8 <HAL_TIM_IC_Start_IT+0x18c>
 8003374:	a201      	add	r2, pc, #4	@ (adr r2, 800337c <HAL_TIM_IC_Start_IT+0x110>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	080033b1 	.word	0x080033b1
 8003380:	080033f9 	.word	0x080033f9
 8003384:	080033f9 	.word	0x080033f9
 8003388:	080033f9 	.word	0x080033f9
 800338c:	080033c3 	.word	0x080033c3
 8003390:	080033f9 	.word	0x080033f9
 8003394:	080033f9 	.word	0x080033f9
 8003398:	080033f9 	.word	0x080033f9
 800339c:	080033d5 	.word	0x080033d5
 80033a0:	080033f9 	.word	0x080033f9
 80033a4:	080033f9 	.word	0x080033f9
 80033a8:	080033f9 	.word	0x080033f9
 80033ac:	080033e7 	.word	0x080033e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0202 	orr.w	r2, r2, #2
 80033be:	60da      	str	r2, [r3, #12]
      break;
 80033c0:	e01d      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0204 	orr.w	r2, r2, #4
 80033d0:	60da      	str	r2, [r3, #12]
      break;
 80033d2:	e014      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0208 	orr.w	r2, r2, #8
 80033e2:	60da      	str	r2, [r3, #12]
      break;
 80033e4:	e00b      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0210 	orr.w	r2, r2, #16
 80033f4:	60da      	str	r2, [r3, #12]
      break;
 80033f6:	e002      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      break;
 80033fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d13e      	bne.n	8003482 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2201      	movs	r2, #1
 800340a:	6839      	ldr	r1, [r7, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fdc7 	bl	8003fa0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <HAL_TIM_IC_Start_IT+0x220>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d018      	beq.n	800344e <HAL_TIM_IC_Start_IT+0x1e2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003424:	d013      	beq.n	800344e <HAL_TIM_IC_Start_IT+0x1e2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a19      	ldr	r2, [pc, #100]	@ (8003490 <HAL_TIM_IC_Start_IT+0x224>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00e      	beq.n	800344e <HAL_TIM_IC_Start_IT+0x1e2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a17      	ldr	r2, [pc, #92]	@ (8003494 <HAL_TIM_IC_Start_IT+0x228>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_TIM_IC_Start_IT+0x1e2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a16      	ldr	r2, [pc, #88]	@ (8003498 <HAL_TIM_IC_Start_IT+0x22c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_TIM_IC_Start_IT+0x1e2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a14      	ldr	r2, [pc, #80]	@ (800349c <HAL_TIM_IC_Start_IT+0x230>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d111      	bne.n	8003472 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b06      	cmp	r3, #6
 800345e:	d010      	beq.n	8003482 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	e007      	b.n	8003482 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40010000 	.word	0x40010000
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00
 800349c:	40014000 	.word	0x40014000

080034a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d020      	beq.n	8003504 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01b      	beq.n	8003504 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0202 	mvn.w	r2, #2
 80034d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe f824 	bl	8001538 <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fe f85a 	bl	80015ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa07 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d020      	beq.n	8003550 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01b      	beq.n	8003550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0204 	mvn.w	r2, #4
 8003520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd fffe 	bl	8001538 <HAL_TIM_IC_CaptureCallback>
 800353c:	e005      	b.n	800354a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fe f834 	bl	80015ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f9e1 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d020      	beq.n	800359c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01b      	beq.n	800359c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0208 	mvn.w	r2, #8
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2204      	movs	r2, #4
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd ffd8 	bl	8001538 <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fe f80e 	bl	80015ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f9bb 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d020      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0210 	mvn.w	r2, #16
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2208      	movs	r2, #8
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd ffb2 	bl	8001538 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd ffe8 	bl	80015ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f995 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0201 	mvn.w	r2, #1
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f976 	bl	80038f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00c      	beq.n	8003630 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fd56 	bl	80040dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00c      	beq.n	8003654 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f966 	bl	8003920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0220 	mvn.w	r2, #32
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fd28 	bl	80040c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_TIM_OC_ConfigChannel+0x1e>
 800369a:	2302      	movs	r3, #2
 800369c:	e048      	b.n	8003730 <HAL_TIM_OC_ConfigChannel+0xb0>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	d839      	bhi.n	8003720 <HAL_TIM_OC_ConfigChannel+0xa0>
 80036ac:	a201      	add	r2, pc, #4	@ (adr r2, 80036b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036e9 	.word	0x080036e9
 80036b8:	08003721 	.word	0x08003721
 80036bc:	08003721 	.word	0x08003721
 80036c0:	08003721 	.word	0x08003721
 80036c4:	080036f7 	.word	0x080036f7
 80036c8:	08003721 	.word	0x08003721
 80036cc:	08003721 	.word	0x08003721
 80036d0:	08003721 	.word	0x08003721
 80036d4:	08003705 	.word	0x08003705
 80036d8:	08003721 	.word	0x08003721
 80036dc:	08003721 	.word	0x08003721
 80036e0:	08003721 	.word	0x08003721
 80036e4:	08003713 	.word	0x08003713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f9ac 	bl	8003a4c <TIM_OC1_SetConfig>
      break;
 80036f4:	e017      	b.n	8003726 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fa0b 	bl	8003b18 <TIM_OC2_SetConfig>
      break;
 8003702:	e010      	b.n	8003726 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fa70 	bl	8003bf0 <TIM_OC3_SetConfig>
      break;
 8003710:	e009      	b.n	8003726 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fad3 	bl	8003cc4 <TIM_OC4_SetConfig>
      break;
 800371e:	e002      	b.n	8003726 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	75fb      	strb	r3, [r7, #23]
      break;
 8003724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800372e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003752:	2302      	movs	r3, #2
 8003754:	e088      	b.n	8003868 <HAL_TIM_IC_ConfigChannel+0x130>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11b      	bne.n	800379c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003774:	f000 faf6 	bl	8003d64 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 020c 	bic.w	r2, r2, #12
 8003786:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6999      	ldr	r1, [r3, #24]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	619a      	str	r2, [r3, #24]
 800379a:	e060      	b.n	800385e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d11c      	bne.n	80037dc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80037b2:	f000 fb3f 	bl	8003e34 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80037c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6999      	ldr	r1, [r3, #24]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	021a      	lsls	r2, r3, #8
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	619a      	str	r2, [r3, #24]
 80037da:	e040      	b.n	800385e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d11b      	bne.n	800381a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80037f2:	f000 fb5c 	bl	8003eae <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 020c 	bic.w	r2, r2, #12
 8003804:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69d9      	ldr	r1, [r3, #28]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	61da      	str	r2, [r3, #28]
 8003818:	e021      	b.n	800385e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b0c      	cmp	r3, #12
 800381e:	d11c      	bne.n	800385a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003830:	f000 fb79 	bl	8003f26 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003842:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69d9      	ldr	r1, [r3, #28]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	021a      	lsls	r2, r3, #8
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	61da      	str	r2, [r3, #28]
 8003858:	e001      	b.n	800385e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003866:	7dfb      	ldrb	r3, [r7, #23]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d831      	bhi.n	80038e8 <HAL_TIM_ReadCapturedValue+0x78>
 8003884:	a201      	add	r2, pc, #4	@ (adr r2, 800388c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038c1 	.word	0x080038c1
 8003890:	080038e9 	.word	0x080038e9
 8003894:	080038e9 	.word	0x080038e9
 8003898:	080038e9 	.word	0x080038e9
 800389c:	080038cb 	.word	0x080038cb
 80038a0:	080038e9 	.word	0x080038e9
 80038a4:	080038e9 	.word	0x080038e9
 80038a8:	080038e9 	.word	0x080038e9
 80038ac:	080038d5 	.word	0x080038d5
 80038b0:	080038e9 	.word	0x080038e9
 80038b4:	080038e9 	.word	0x080038e9
 80038b8:	080038e9 	.word	0x080038e9
 80038bc:	080038df 	.word	0x080038df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c6:	60fb      	str	r3, [r7, #12]

      break;
 80038c8:	e00f      	b.n	80038ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	60fb      	str	r3, [r7, #12]

      break;
 80038d2:	e00a      	b.n	80038ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	60fb      	str	r3, [r7, #12]

      break;
 80038dc:	e005      	b.n	80038ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	60fb      	str	r3, [r7, #12]

      break;
 80038e6:	e000      	b.n	80038ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80038e8:	bf00      	nop
  }

  return tmpreg;
 80038ea:	68fb      	ldr	r3, [r7, #12]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a3a      	ldr	r2, [pc, #232]	@ (8003a30 <TIM_Base_SetConfig+0xfc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00f      	beq.n	800396c <TIM_Base_SetConfig+0x38>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003952:	d00b      	beq.n	800396c <TIM_Base_SetConfig+0x38>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a37      	ldr	r2, [pc, #220]	@ (8003a34 <TIM_Base_SetConfig+0x100>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <TIM_Base_SetConfig+0x38>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a36      	ldr	r2, [pc, #216]	@ (8003a38 <TIM_Base_SetConfig+0x104>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0x38>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a35      	ldr	r2, [pc, #212]	@ (8003a3c <TIM_Base_SetConfig+0x108>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d108      	bne.n	800397e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a2b      	ldr	r2, [pc, #172]	@ (8003a30 <TIM_Base_SetConfig+0xfc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01b      	beq.n	80039be <TIM_Base_SetConfig+0x8a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398c:	d017      	beq.n	80039be <TIM_Base_SetConfig+0x8a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a28      	ldr	r2, [pc, #160]	@ (8003a34 <TIM_Base_SetConfig+0x100>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <TIM_Base_SetConfig+0x8a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a27      	ldr	r2, [pc, #156]	@ (8003a38 <TIM_Base_SetConfig+0x104>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00f      	beq.n	80039be <TIM_Base_SetConfig+0x8a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a26      	ldr	r2, [pc, #152]	@ (8003a3c <TIM_Base_SetConfig+0x108>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_Base_SetConfig+0x8a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a25      	ldr	r2, [pc, #148]	@ (8003a40 <TIM_Base_SetConfig+0x10c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0x8a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a24      	ldr	r2, [pc, #144]	@ (8003a44 <TIM_Base_SetConfig+0x110>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0x8a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a23      	ldr	r2, [pc, #140]	@ (8003a48 <TIM_Base_SetConfig+0x114>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d108      	bne.n	80039d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a30 <TIM_Base_SetConfig+0xfc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d103      	bne.n	8003a04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f023 0201 	bic.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	611a      	str	r2, [r3, #16]
  }
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40014400 	.word	0x40014400
 8003a48:	40014800 	.word	0x40014800

08003a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f023 0201 	bic.w	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 0302 	bic.w	r3, r3, #2
 8003a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b14 <TIM_OC1_SetConfig+0xc8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d10c      	bne.n	8003ac2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f023 0308 	bic.w	r3, r3, #8
 8003aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	@ (8003b14 <TIM_OC1_SetConfig+0xc8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d111      	bne.n	8003aee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	621a      	str	r2, [r3, #32]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40010000 	.word	0x40010000

08003b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f023 0210 	bic.w	r2, r3, #16
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0320 	bic.w	r3, r3, #32
 8003b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a1e      	ldr	r2, [pc, #120]	@ (8003bec <TIM_OC2_SetConfig+0xd4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d10d      	bne.n	8003b94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a15      	ldr	r2, [pc, #84]	@ (8003bec <TIM_OC2_SetConfig+0xd4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d113      	bne.n	8003bc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40010000 	.word	0x40010000

08003bf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0303 	bic.w	r3, r3, #3
 8003c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc0 <TIM_OC3_SetConfig+0xd0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10d      	bne.n	8003c6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a14      	ldr	r2, [pc, #80]	@ (8003cc0 <TIM_OC3_SetConfig+0xd0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d113      	bne.n	8003c9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	621a      	str	r2, [r3, #32]
}
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40010000 	.word	0x40010000

08003cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	031b      	lsls	r3, r3, #12
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a10      	ldr	r2, [pc, #64]	@ (8003d60 <TIM_OC4_SetConfig+0x9c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d109      	bne.n	8003d38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	019b      	lsls	r3, r3, #6
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40010000 	.word	0x40010000

08003d64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f023 0201 	bic.w	r2, r3, #1
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a24      	ldr	r2, [pc, #144]	@ (8003e20 <TIM_TI1_SetConfig+0xbc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <TIM_TI1_SetConfig+0x56>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d98:	d00f      	beq.n	8003dba <TIM_TI1_SetConfig+0x56>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a21      	ldr	r2, [pc, #132]	@ (8003e24 <TIM_TI1_SetConfig+0xc0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_TI1_SetConfig+0x56>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a20      	ldr	r2, [pc, #128]	@ (8003e28 <TIM_TI1_SetConfig+0xc4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <TIM_TI1_SetConfig+0x56>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4a1f      	ldr	r2, [pc, #124]	@ (8003e2c <TIM_TI1_SetConfig+0xc8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_TI1_SetConfig+0x56>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e30 <TIM_TI1_SetConfig+0xcc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <TIM_TI1_SetConfig+0x5a>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <TIM_TI1_SetConfig+0x5c>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	e003      	b.n	8003dde <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f023 030a 	bic.w	r3, r3, #10
 8003df8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f003 030a 	and.w	r3, r3, #10
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40010000 	.word	0x40010000
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800
 8003e2c:	40000c00 	.word	0x40000c00
 8003e30:	40014000 	.word	0x40014000

08003e34 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f023 0210 	bic.w	r2, r3, #16
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	031b      	lsls	r3, r3, #12
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b087      	sub	sp, #28
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f023 0303 	bic.w	r3, r3, #3
 8003eda:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003efe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	031b      	lsls	r3, r3, #12
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003f78:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	031b      	lsls	r3, r3, #12
 8003f7e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	621a      	str	r2, [r3, #32]
}
 8003f94:	bf00      	nop
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1a      	ldr	r2, [r3, #32]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004000:	2302      	movs	r3, #2
 8004002:	e050      	b.n	80040a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1c      	ldr	r2, [pc, #112]	@ (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d018      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004050:	d013      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a18      	ldr	r2, [pc, #96]	@ (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a16      	ldr	r2, [pc, #88]	@ (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a13      	ldr	r2, [pc, #76]	@ (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10c      	bne.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	4313      	orrs	r3, r2
 800408a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40000800 	.word	0x40000800
 80040c0:	40000c00 	.word	0x40000c00
 80040c4:	40014000 	.word	0x40014000

080040c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e042      	b.n	8004188 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd fe14 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2224      	movs	r2, #36	@ 0x24
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fa09 	bl	800454c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	@ 0x28
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d175      	bne.n	800429c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_UART_Transmit+0x2c>
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e06e      	b.n	800429e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2221      	movs	r2, #33	@ 0x21
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ce:	f7fd fe91 	bl	8001ef4 <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	88fa      	ldrh	r2, [r7, #6]
 80041d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	88fa      	ldrh	r2, [r7, #6]
 80041de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e8:	d108      	bne.n	80041fc <HAL_UART_Transmit+0x6c>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e003      	b.n	8004204 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004204:	e02e      	b.n	8004264 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	2180      	movs	r1, #128	@ 0x80
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f8df 	bl	80043d4 <UART_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e03a      	b.n	800429e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800423c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	3302      	adds	r3, #2
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	e007      	b.n	8004256 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	3301      	adds	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1cb      	bne.n	8004206 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2200      	movs	r2, #0
 8004276:	2140      	movs	r1, #64	@ 0x40
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f8ab 	bl	80043d4 <UART_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e006      	b.n	800429e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b08a      	sub	sp, #40	@ 0x28
 80042aa:	af02      	add	r7, sp, #8
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	4613      	mov	r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	f040 8081 	bne.w	80043ca <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_UART_Receive+0x2e>
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e079      	b.n	80043cc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2222      	movs	r2, #34	@ 0x22
 80042e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ec:	f7fd fe02 	bl	8001ef4 <HAL_GetTick>
 80042f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	88fa      	ldrh	r2, [r7, #6]
 80042f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	88fa      	ldrh	r2, [r7, #6]
 80042fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004306:	d108      	bne.n	800431a <HAL_UART_Receive+0x74>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e003      	b.n	8004322 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004322:	e047      	b.n	80043b4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2200      	movs	r2, #0
 800432c:	2120      	movs	r1, #32
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f850 	bl	80043d4 <UART_WaitOnFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e042      	b.n	80043cc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10c      	bne.n	8004366 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	b29b      	uxth	r3, r3
 8004354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004358:	b29a      	uxth	r2, r3
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	3302      	adds	r3, #2
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e01f      	b.n	80043a6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436e:	d007      	beq.n	8004380 <HAL_UART_Receive+0xda>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <HAL_UART_Receive+0xe8>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d106      	bne.n	800438e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	e008      	b.n	80043a0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800439a:	b2da      	uxtb	r2, r3
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1b2      	bne.n	8004324 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e000      	b.n	80043cc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80043ca:	2302      	movs	r3, #2
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e4:	e03b      	b.n	800445e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d037      	beq.n	800445e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ee:	f7fd fd81 	bl	8001ef4 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	6a3a      	ldr	r2, [r7, #32]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d302      	bcc.n	8004404 <UART_WaitOnFlagUntilTimeout+0x30>
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e03a      	b.n	800447e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d023      	beq.n	800445e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b80      	cmp	r3, #128	@ 0x80
 800441a:	d020      	beq.n	800445e <UART_WaitOnFlagUntilTimeout+0x8a>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b40      	cmp	r3, #64	@ 0x40
 8004420:	d01d      	beq.n	800445e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b08      	cmp	r3, #8
 800442e:	d116      	bne.n	800445e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f81d 	bl	8004486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2208      	movs	r2, #8
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e00f      	b.n	800447e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4013      	ands	r3, r2
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	bf0c      	ite	eq
 800446e:	2301      	moveq	r3, #1
 8004470:	2300      	movne	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	429a      	cmp	r2, r3
 800447a:	d0b4      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004486:	b480      	push	{r7}
 8004488:	b095      	sub	sp, #84	@ 0x54
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800449e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80044b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e5      	bne.n	800448e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3314      	adds	r3, #20
 80044c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e5      	bne.n	80044c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d119      	bne.n	8004532 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	60bb      	str	r3, [r7, #8]
   return(result);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f023 0310 	bic.w	r3, r3, #16
 8004514:	647b      	str	r3, [r7, #68]	@ 0x44
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800451e:	61ba      	str	r2, [r7, #24]
 8004520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	613b      	str	r3, [r7, #16]
   return(result);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e5      	bne.n	80044fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004540:	bf00      	nop
 8004542:	3754      	adds	r7, #84	@ 0x54
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800454c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004550:	b0c0      	sub	sp, #256	@ 0x100
 8004552:	af00      	add	r7, sp, #0
 8004554:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	68d9      	ldr	r1, [r3, #12]
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	ea40 0301 	orr.w	r3, r0, r1
 8004574:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	431a      	orrs	r2, r3
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	431a      	orrs	r2, r3
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045a4:	f021 010c 	bic.w	r1, r1, #12
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045b2:	430b      	orrs	r3, r1
 80045b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c6:	6999      	ldr	r1, [r3, #24]
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	ea40 0301 	orr.w	r3, r0, r1
 80045d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b8f      	ldr	r3, [pc, #572]	@ (8004818 <UART_SetConfig+0x2cc>)
 80045dc:	429a      	cmp	r2, r3
 80045de:	d005      	beq.n	80045ec <UART_SetConfig+0xa0>
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b8d      	ldr	r3, [pc, #564]	@ (800481c <UART_SetConfig+0x2d0>)
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d104      	bne.n	80045f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045ec:	f7fe fbda 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 80045f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045f4:	e003      	b.n	80045fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045f6:	f7fe fbc1 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80045fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004608:	f040 810c 	bne.w	8004824 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800460c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004610:	2200      	movs	r2, #0
 8004612:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004616:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800461a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800461e:	4622      	mov	r2, r4
 8004620:	462b      	mov	r3, r5
 8004622:	1891      	adds	r1, r2, r2
 8004624:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004626:	415b      	adcs	r3, r3
 8004628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800462a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800462e:	4621      	mov	r1, r4
 8004630:	eb12 0801 	adds.w	r8, r2, r1
 8004634:	4629      	mov	r1, r5
 8004636:	eb43 0901 	adc.w	r9, r3, r1
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800464a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800464e:	4690      	mov	r8, r2
 8004650:	4699      	mov	r9, r3
 8004652:	4623      	mov	r3, r4
 8004654:	eb18 0303 	adds.w	r3, r8, r3
 8004658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800465c:	462b      	mov	r3, r5
 800465e:	eb49 0303 	adc.w	r3, r9, r3
 8004662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004672:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800467a:	460b      	mov	r3, r1
 800467c:	18db      	adds	r3, r3, r3
 800467e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004680:	4613      	mov	r3, r2
 8004682:	eb42 0303 	adc.w	r3, r2, r3
 8004686:	657b      	str	r3, [r7, #84]	@ 0x54
 8004688:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800468c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004690:	f7fc fb02 	bl	8000c98 <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4b61      	ldr	r3, [pc, #388]	@ (8004820 <UART_SetConfig+0x2d4>)
 800469a:	fba3 2302 	umull	r2, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	011c      	lsls	r4, r3, #4
 80046a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046b4:	4642      	mov	r2, r8
 80046b6:	464b      	mov	r3, r9
 80046b8:	1891      	adds	r1, r2, r2
 80046ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046bc:	415b      	adcs	r3, r3
 80046be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046c4:	4641      	mov	r1, r8
 80046c6:	eb12 0a01 	adds.w	sl, r2, r1
 80046ca:	4649      	mov	r1, r9
 80046cc:	eb43 0b01 	adc.w	fp, r3, r1
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046e4:	4692      	mov	sl, r2
 80046e6:	469b      	mov	fp, r3
 80046e8:	4643      	mov	r3, r8
 80046ea:	eb1a 0303 	adds.w	r3, sl, r3
 80046ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046f2:	464b      	mov	r3, r9
 80046f4:	eb4b 0303 	adc.w	r3, fp, r3
 80046f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004708:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800470c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004710:	460b      	mov	r3, r1
 8004712:	18db      	adds	r3, r3, r3
 8004714:	643b      	str	r3, [r7, #64]	@ 0x40
 8004716:	4613      	mov	r3, r2
 8004718:	eb42 0303 	adc.w	r3, r2, r3
 800471c:	647b      	str	r3, [r7, #68]	@ 0x44
 800471e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004722:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004726:	f7fc fab7 	bl	8000c98 <__aeabi_uldivmod>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4611      	mov	r1, r2
 8004730:	4b3b      	ldr	r3, [pc, #236]	@ (8004820 <UART_SetConfig+0x2d4>)
 8004732:	fba3 2301 	umull	r2, r3, r3, r1
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	2264      	movs	r2, #100	@ 0x64
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	1acb      	subs	r3, r1, r3
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004746:	4b36      	ldr	r3, [pc, #216]	@ (8004820 <UART_SetConfig+0x2d4>)
 8004748:	fba3 2302 	umull	r2, r3, r3, r2
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004754:	441c      	add	r4, r3
 8004756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800475a:	2200      	movs	r2, #0
 800475c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004760:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004764:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004768:	4642      	mov	r2, r8
 800476a:	464b      	mov	r3, r9
 800476c:	1891      	adds	r1, r2, r2
 800476e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004770:	415b      	adcs	r3, r3
 8004772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004778:	4641      	mov	r1, r8
 800477a:	1851      	adds	r1, r2, r1
 800477c:	6339      	str	r1, [r7, #48]	@ 0x30
 800477e:	4649      	mov	r1, r9
 8004780:	414b      	adcs	r3, r1
 8004782:	637b      	str	r3, [r7, #52]	@ 0x34
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004790:	4659      	mov	r1, fp
 8004792:	00cb      	lsls	r3, r1, #3
 8004794:	4651      	mov	r1, sl
 8004796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479a:	4651      	mov	r1, sl
 800479c:	00ca      	lsls	r2, r1, #3
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	4642      	mov	r2, r8
 80047a6:	189b      	adds	r3, r3, r2
 80047a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047ac:	464b      	mov	r3, r9
 80047ae:	460a      	mov	r2, r1
 80047b0:	eb42 0303 	adc.w	r3, r2, r3
 80047b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047cc:	460b      	mov	r3, r1
 80047ce:	18db      	adds	r3, r3, r3
 80047d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047d2:	4613      	mov	r3, r2
 80047d4:	eb42 0303 	adc.w	r3, r2, r3
 80047d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047e2:	f7fc fa59 	bl	8000c98 <__aeabi_uldivmod>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <UART_SetConfig+0x2d4>)
 80047ec:	fba3 1302 	umull	r1, r3, r3, r2
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	2164      	movs	r1, #100	@ 0x64
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	3332      	adds	r3, #50	@ 0x32
 80047fe:	4a08      	ldr	r2, [pc, #32]	@ (8004820 <UART_SetConfig+0x2d4>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	f003 0207 	and.w	r2, r3, #7
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4422      	add	r2, r4
 8004812:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004814:	e106      	b.n	8004a24 <UART_SetConfig+0x4d8>
 8004816:	bf00      	nop
 8004818:	40011000 	.word	0x40011000
 800481c:	40011400 	.word	0x40011400
 8004820:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004828:	2200      	movs	r2, #0
 800482a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800482e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004832:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004836:	4642      	mov	r2, r8
 8004838:	464b      	mov	r3, r9
 800483a:	1891      	adds	r1, r2, r2
 800483c:	6239      	str	r1, [r7, #32]
 800483e:	415b      	adcs	r3, r3
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24
 8004842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004846:	4641      	mov	r1, r8
 8004848:	1854      	adds	r4, r2, r1
 800484a:	4649      	mov	r1, r9
 800484c:	eb43 0501 	adc.w	r5, r3, r1
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	00eb      	lsls	r3, r5, #3
 800485a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800485e:	00e2      	lsls	r2, r4, #3
 8004860:	4614      	mov	r4, r2
 8004862:	461d      	mov	r5, r3
 8004864:	4643      	mov	r3, r8
 8004866:	18e3      	adds	r3, r4, r3
 8004868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800486c:	464b      	mov	r3, r9
 800486e:	eb45 0303 	adc.w	r3, r5, r3
 8004872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004882:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004892:	4629      	mov	r1, r5
 8004894:	008b      	lsls	r3, r1, #2
 8004896:	4621      	mov	r1, r4
 8004898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800489c:	4621      	mov	r1, r4
 800489e:	008a      	lsls	r2, r1, #2
 80048a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048a4:	f7fc f9f8 	bl	8000c98 <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4b60      	ldr	r3, [pc, #384]	@ (8004a30 <UART_SetConfig+0x4e4>)
 80048ae:	fba3 2302 	umull	r2, r3, r3, r2
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	011c      	lsls	r4, r3, #4
 80048b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048c8:	4642      	mov	r2, r8
 80048ca:	464b      	mov	r3, r9
 80048cc:	1891      	adds	r1, r2, r2
 80048ce:	61b9      	str	r1, [r7, #24]
 80048d0:	415b      	adcs	r3, r3
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048d8:	4641      	mov	r1, r8
 80048da:	1851      	adds	r1, r2, r1
 80048dc:	6139      	str	r1, [r7, #16]
 80048de:	4649      	mov	r1, r9
 80048e0:	414b      	adcs	r3, r1
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048f0:	4659      	mov	r1, fp
 80048f2:	00cb      	lsls	r3, r1, #3
 80048f4:	4651      	mov	r1, sl
 80048f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048fa:	4651      	mov	r1, sl
 80048fc:	00ca      	lsls	r2, r1, #3
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	4603      	mov	r3, r0
 8004904:	4642      	mov	r2, r8
 8004906:	189b      	adds	r3, r3, r2
 8004908:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800490c:	464b      	mov	r3, r9
 800490e:	460a      	mov	r2, r1
 8004910:	eb42 0303 	adc.w	r3, r2, r3
 8004914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004922:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004930:	4649      	mov	r1, r9
 8004932:	008b      	lsls	r3, r1, #2
 8004934:	4641      	mov	r1, r8
 8004936:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800493a:	4641      	mov	r1, r8
 800493c:	008a      	lsls	r2, r1, #2
 800493e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004942:	f7fc f9a9 	bl	8000c98 <__aeabi_uldivmod>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4611      	mov	r1, r2
 800494c:	4b38      	ldr	r3, [pc, #224]	@ (8004a30 <UART_SetConfig+0x4e4>)
 800494e:	fba3 2301 	umull	r2, r3, r3, r1
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2264      	movs	r2, #100	@ 0x64
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	1acb      	subs	r3, r1, r3
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	3332      	adds	r3, #50	@ 0x32
 8004960:	4a33      	ldr	r2, [pc, #204]	@ (8004a30 <UART_SetConfig+0x4e4>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800496c:	441c      	add	r4, r3
 800496e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004972:	2200      	movs	r2, #0
 8004974:	673b      	str	r3, [r7, #112]	@ 0x70
 8004976:	677a      	str	r2, [r7, #116]	@ 0x74
 8004978:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800497c:	4642      	mov	r2, r8
 800497e:	464b      	mov	r3, r9
 8004980:	1891      	adds	r1, r2, r2
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	415b      	adcs	r3, r3
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800498c:	4641      	mov	r1, r8
 800498e:	1851      	adds	r1, r2, r1
 8004990:	6039      	str	r1, [r7, #0]
 8004992:	4649      	mov	r1, r9
 8004994:	414b      	adcs	r3, r1
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049a4:	4659      	mov	r1, fp
 80049a6:	00cb      	lsls	r3, r1, #3
 80049a8:	4651      	mov	r1, sl
 80049aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ae:	4651      	mov	r1, sl
 80049b0:	00ca      	lsls	r2, r1, #3
 80049b2:	4610      	mov	r0, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	4642      	mov	r2, r8
 80049ba:	189b      	adds	r3, r3, r2
 80049bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049be:	464b      	mov	r3, r9
 80049c0:	460a      	mov	r2, r1
 80049c2:	eb42 0303 	adc.w	r3, r2, r3
 80049c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80049d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049e0:	4649      	mov	r1, r9
 80049e2:	008b      	lsls	r3, r1, #2
 80049e4:	4641      	mov	r1, r8
 80049e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ea:	4641      	mov	r1, r8
 80049ec:	008a      	lsls	r2, r1, #2
 80049ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049f2:	f7fc f951 	bl	8000c98 <__aeabi_uldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <UART_SetConfig+0x4e4>)
 80049fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	2164      	movs	r1, #100	@ 0x64
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	3332      	adds	r3, #50	@ 0x32
 8004a0e:	4a08      	ldr	r2, [pc, #32]	@ (8004a30 <UART_SetConfig+0x4e4>)
 8004a10:	fba2 2303 	umull	r2, r3, r2, r3
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	f003 020f 	and.w	r2, r3, #15
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4422      	add	r2, r4
 8004a22:	609a      	str	r2, [r3, #8]
}
 8004a24:	bf00      	nop
 8004a26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a30:	51eb851f 	.word	0x51eb851f

08004a34 <__cvt>:
 8004a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a38:	ec57 6b10 	vmov	r6, r7, d0
 8004a3c:	2f00      	cmp	r7, #0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	4619      	mov	r1, r3
 8004a42:	463b      	mov	r3, r7
 8004a44:	bfbb      	ittet	lt
 8004a46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004a4a:	461f      	movlt	r7, r3
 8004a4c:	2300      	movge	r3, #0
 8004a4e:	232d      	movlt	r3, #45	@ 0x2d
 8004a50:	700b      	strb	r3, [r1, #0]
 8004a52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004a58:	4691      	mov	r9, r2
 8004a5a:	f023 0820 	bic.w	r8, r3, #32
 8004a5e:	bfbc      	itt	lt
 8004a60:	4632      	movlt	r2, r6
 8004a62:	4616      	movlt	r6, r2
 8004a64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a68:	d005      	beq.n	8004a76 <__cvt+0x42>
 8004a6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a6e:	d100      	bne.n	8004a72 <__cvt+0x3e>
 8004a70:	3401      	adds	r4, #1
 8004a72:	2102      	movs	r1, #2
 8004a74:	e000      	b.n	8004a78 <__cvt+0x44>
 8004a76:	2103      	movs	r1, #3
 8004a78:	ab03      	add	r3, sp, #12
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	ab02      	add	r3, sp, #8
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	ec47 6b10 	vmov	d0, r6, r7
 8004a84:	4653      	mov	r3, sl
 8004a86:	4622      	mov	r2, r4
 8004a88:	f001 fa2a 	bl	8005ee0 <_dtoa_r>
 8004a8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a90:	4605      	mov	r5, r0
 8004a92:	d119      	bne.n	8004ac8 <__cvt+0x94>
 8004a94:	f019 0f01 	tst.w	r9, #1
 8004a98:	d00e      	beq.n	8004ab8 <__cvt+0x84>
 8004a9a:	eb00 0904 	add.w	r9, r0, r4
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	4639      	mov	r1, r7
 8004aa6:	f7fc f817 	bl	8000ad8 <__aeabi_dcmpeq>
 8004aaa:	b108      	cbz	r0, 8004ab0 <__cvt+0x7c>
 8004aac:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ab0:	2230      	movs	r2, #48	@ 0x30
 8004ab2:	9b03      	ldr	r3, [sp, #12]
 8004ab4:	454b      	cmp	r3, r9
 8004ab6:	d31e      	bcc.n	8004af6 <__cvt+0xc2>
 8004ab8:	9b03      	ldr	r3, [sp, #12]
 8004aba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004abc:	1b5b      	subs	r3, r3, r5
 8004abe:	4628      	mov	r0, r5
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	b004      	add	sp, #16
 8004ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004acc:	eb00 0904 	add.w	r9, r0, r4
 8004ad0:	d1e5      	bne.n	8004a9e <__cvt+0x6a>
 8004ad2:	7803      	ldrb	r3, [r0, #0]
 8004ad4:	2b30      	cmp	r3, #48	@ 0x30
 8004ad6:	d10a      	bne.n	8004aee <__cvt+0xba>
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2300      	movs	r3, #0
 8004adc:	4630      	mov	r0, r6
 8004ade:	4639      	mov	r1, r7
 8004ae0:	f7fb fffa 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ae4:	b918      	cbnz	r0, 8004aee <__cvt+0xba>
 8004ae6:	f1c4 0401 	rsb	r4, r4, #1
 8004aea:	f8ca 4000 	str.w	r4, [sl]
 8004aee:	f8da 3000 	ldr.w	r3, [sl]
 8004af2:	4499      	add	r9, r3
 8004af4:	e7d3      	b.n	8004a9e <__cvt+0x6a>
 8004af6:	1c59      	adds	r1, r3, #1
 8004af8:	9103      	str	r1, [sp, #12]
 8004afa:	701a      	strb	r2, [r3, #0]
 8004afc:	e7d9      	b.n	8004ab2 <__cvt+0x7e>

08004afe <__exponent>:
 8004afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b00:	2900      	cmp	r1, #0
 8004b02:	bfba      	itte	lt
 8004b04:	4249      	neglt	r1, r1
 8004b06:	232d      	movlt	r3, #45	@ 0x2d
 8004b08:	232b      	movge	r3, #43	@ 0x2b
 8004b0a:	2909      	cmp	r1, #9
 8004b0c:	7002      	strb	r2, [r0, #0]
 8004b0e:	7043      	strb	r3, [r0, #1]
 8004b10:	dd29      	ble.n	8004b66 <__exponent+0x68>
 8004b12:	f10d 0307 	add.w	r3, sp, #7
 8004b16:	461d      	mov	r5, r3
 8004b18:	270a      	movs	r7, #10
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b20:	fb07 1416 	mls	r4, r7, r6, r1
 8004b24:	3430      	adds	r4, #48	@ 0x30
 8004b26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	2c63      	cmp	r4, #99	@ 0x63
 8004b2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b32:	4631      	mov	r1, r6
 8004b34:	dcf1      	bgt.n	8004b1a <__exponent+0x1c>
 8004b36:	3130      	adds	r1, #48	@ 0x30
 8004b38:	1e94      	subs	r4, r2, #2
 8004b3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b3e:	1c41      	adds	r1, r0, #1
 8004b40:	4623      	mov	r3, r4
 8004b42:	42ab      	cmp	r3, r5
 8004b44:	d30a      	bcc.n	8004b5c <__exponent+0x5e>
 8004b46:	f10d 0309 	add.w	r3, sp, #9
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	42ac      	cmp	r4, r5
 8004b4e:	bf88      	it	hi
 8004b50:	2300      	movhi	r3, #0
 8004b52:	3302      	adds	r3, #2
 8004b54:	4403      	add	r3, r0
 8004b56:	1a18      	subs	r0, r3, r0
 8004b58:	b003      	add	sp, #12
 8004b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b64:	e7ed      	b.n	8004b42 <__exponent+0x44>
 8004b66:	2330      	movs	r3, #48	@ 0x30
 8004b68:	3130      	adds	r1, #48	@ 0x30
 8004b6a:	7083      	strb	r3, [r0, #2]
 8004b6c:	70c1      	strb	r1, [r0, #3]
 8004b6e:	1d03      	adds	r3, r0, #4
 8004b70:	e7f1      	b.n	8004b56 <__exponent+0x58>
	...

08004b74 <_printf_float>:
 8004b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b78:	b08d      	sub	sp, #52	@ 0x34
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004b80:	4616      	mov	r6, r2
 8004b82:	461f      	mov	r7, r3
 8004b84:	4605      	mov	r5, r0
 8004b86:	f001 f895 	bl	8005cb4 <_localeconv_r>
 8004b8a:	6803      	ldr	r3, [r0, #0]
 8004b8c:	9304      	str	r3, [sp, #16]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fb fb76 	bl	8000280 <strlen>
 8004b94:	2300      	movs	r3, #0
 8004b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b98:	f8d8 3000 	ldr.w	r3, [r8]
 8004b9c:	9005      	str	r0, [sp, #20]
 8004b9e:	3307      	adds	r3, #7
 8004ba0:	f023 0307 	bic.w	r3, r3, #7
 8004ba4:	f103 0208 	add.w	r2, r3, #8
 8004ba8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004bac:	f8d4 b000 	ldr.w	fp, [r4]
 8004bb0:	f8c8 2000 	str.w	r2, [r8]
 8004bb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004bbc:	9307      	str	r3, [sp, #28]
 8004bbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8004bc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bca:	4b9c      	ldr	r3, [pc, #624]	@ (8004e3c <_printf_float+0x2c8>)
 8004bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd0:	f7fb ffb4 	bl	8000b3c <__aeabi_dcmpun>
 8004bd4:	bb70      	cbnz	r0, 8004c34 <_printf_float+0xc0>
 8004bd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bda:	4b98      	ldr	r3, [pc, #608]	@ (8004e3c <_printf_float+0x2c8>)
 8004bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004be0:	f7fb ff8e 	bl	8000b00 <__aeabi_dcmple>
 8004be4:	bb30      	cbnz	r0, 8004c34 <_printf_float+0xc0>
 8004be6:	2200      	movs	r2, #0
 8004be8:	2300      	movs	r3, #0
 8004bea:	4640      	mov	r0, r8
 8004bec:	4649      	mov	r1, r9
 8004bee:	f7fb ff7d 	bl	8000aec <__aeabi_dcmplt>
 8004bf2:	b110      	cbz	r0, 8004bfa <_printf_float+0x86>
 8004bf4:	232d      	movs	r3, #45	@ 0x2d
 8004bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bfa:	4a91      	ldr	r2, [pc, #580]	@ (8004e40 <_printf_float+0x2cc>)
 8004bfc:	4b91      	ldr	r3, [pc, #580]	@ (8004e44 <_printf_float+0x2d0>)
 8004bfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c02:	bf94      	ite	ls
 8004c04:	4690      	movls	r8, r2
 8004c06:	4698      	movhi	r8, r3
 8004c08:	2303      	movs	r3, #3
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	f02b 0304 	bic.w	r3, fp, #4
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	f04f 0900 	mov.w	r9, #0
 8004c16:	9700      	str	r7, [sp, #0]
 8004c18:	4633      	mov	r3, r6
 8004c1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f000 f9d2 	bl	8004fc8 <_printf_common>
 8004c24:	3001      	adds	r0, #1
 8004c26:	f040 808d 	bne.w	8004d44 <_printf_float+0x1d0>
 8004c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2e:	b00d      	add	sp, #52	@ 0x34
 8004c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	4640      	mov	r0, r8
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	f7fb ff7e 	bl	8000b3c <__aeabi_dcmpun>
 8004c40:	b140      	cbz	r0, 8004c54 <_printf_float+0xe0>
 8004c42:	464b      	mov	r3, r9
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bfbc      	itt	lt
 8004c48:	232d      	movlt	r3, #45	@ 0x2d
 8004c4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e48 <_printf_float+0x2d4>)
 8004c50:	4b7e      	ldr	r3, [pc, #504]	@ (8004e4c <_printf_float+0x2d8>)
 8004c52:	e7d4      	b.n	8004bfe <_printf_float+0x8a>
 8004c54:	6863      	ldr	r3, [r4, #4]
 8004c56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004c5a:	9206      	str	r2, [sp, #24]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	d13b      	bne.n	8004cd8 <_printf_float+0x164>
 8004c60:	2306      	movs	r3, #6
 8004c62:	6063      	str	r3, [r4, #4]
 8004c64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004c68:	2300      	movs	r3, #0
 8004c6a:	6022      	str	r2, [r4, #0]
 8004c6c:	9303      	str	r3, [sp, #12]
 8004c6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004c70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004c74:	ab09      	add	r3, sp, #36	@ 0x24
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	6861      	ldr	r1, [r4, #4]
 8004c7a:	ec49 8b10 	vmov	d0, r8, r9
 8004c7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004c82:	4628      	mov	r0, r5
 8004c84:	f7ff fed6 	bl	8004a34 <__cvt>
 8004c88:	9b06      	ldr	r3, [sp, #24]
 8004c8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c8c:	2b47      	cmp	r3, #71	@ 0x47
 8004c8e:	4680      	mov	r8, r0
 8004c90:	d129      	bne.n	8004ce6 <_printf_float+0x172>
 8004c92:	1cc8      	adds	r0, r1, #3
 8004c94:	db02      	blt.n	8004c9c <_printf_float+0x128>
 8004c96:	6863      	ldr	r3, [r4, #4]
 8004c98:	4299      	cmp	r1, r3
 8004c9a:	dd41      	ble.n	8004d20 <_printf_float+0x1ac>
 8004c9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ca0:	fa5f fa8a 	uxtb.w	sl, sl
 8004ca4:	3901      	subs	r1, #1
 8004ca6:	4652      	mov	r2, sl
 8004ca8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004cac:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cae:	f7ff ff26 	bl	8004afe <__exponent>
 8004cb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004cb4:	1813      	adds	r3, r2, r0
 8004cb6:	2a01      	cmp	r2, #1
 8004cb8:	4681      	mov	r9, r0
 8004cba:	6123      	str	r3, [r4, #16]
 8004cbc:	dc02      	bgt.n	8004cc4 <_printf_float+0x150>
 8004cbe:	6822      	ldr	r2, [r4, #0]
 8004cc0:	07d2      	lsls	r2, r2, #31
 8004cc2:	d501      	bpl.n	8004cc8 <_printf_float+0x154>
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	6123      	str	r3, [r4, #16]
 8004cc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0a2      	beq.n	8004c16 <_printf_float+0xa2>
 8004cd0:	232d      	movs	r3, #45	@ 0x2d
 8004cd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cd6:	e79e      	b.n	8004c16 <_printf_float+0xa2>
 8004cd8:	9a06      	ldr	r2, [sp, #24]
 8004cda:	2a47      	cmp	r2, #71	@ 0x47
 8004cdc:	d1c2      	bne.n	8004c64 <_printf_float+0xf0>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1c0      	bne.n	8004c64 <_printf_float+0xf0>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e7bd      	b.n	8004c62 <_printf_float+0xee>
 8004ce6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cea:	d9db      	bls.n	8004ca4 <_printf_float+0x130>
 8004cec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004cf0:	d118      	bne.n	8004d24 <_printf_float+0x1b0>
 8004cf2:	2900      	cmp	r1, #0
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	dd0b      	ble.n	8004d10 <_printf_float+0x19c>
 8004cf8:	6121      	str	r1, [r4, #16]
 8004cfa:	b913      	cbnz	r3, 8004d02 <_printf_float+0x18e>
 8004cfc:	6822      	ldr	r2, [r4, #0]
 8004cfe:	07d0      	lsls	r0, r2, #31
 8004d00:	d502      	bpl.n	8004d08 <_printf_float+0x194>
 8004d02:	3301      	adds	r3, #1
 8004d04:	440b      	add	r3, r1
 8004d06:	6123      	str	r3, [r4, #16]
 8004d08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d0a:	f04f 0900 	mov.w	r9, #0
 8004d0e:	e7db      	b.n	8004cc8 <_printf_float+0x154>
 8004d10:	b913      	cbnz	r3, 8004d18 <_printf_float+0x1a4>
 8004d12:	6822      	ldr	r2, [r4, #0]
 8004d14:	07d2      	lsls	r2, r2, #31
 8004d16:	d501      	bpl.n	8004d1c <_printf_float+0x1a8>
 8004d18:	3302      	adds	r3, #2
 8004d1a:	e7f4      	b.n	8004d06 <_printf_float+0x192>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e7f2      	b.n	8004d06 <_printf_float+0x192>
 8004d20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d26:	4299      	cmp	r1, r3
 8004d28:	db05      	blt.n	8004d36 <_printf_float+0x1c2>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	6121      	str	r1, [r4, #16]
 8004d2e:	07d8      	lsls	r0, r3, #31
 8004d30:	d5ea      	bpl.n	8004d08 <_printf_float+0x194>
 8004d32:	1c4b      	adds	r3, r1, #1
 8004d34:	e7e7      	b.n	8004d06 <_printf_float+0x192>
 8004d36:	2900      	cmp	r1, #0
 8004d38:	bfd4      	ite	le
 8004d3a:	f1c1 0202 	rsble	r2, r1, #2
 8004d3e:	2201      	movgt	r2, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	e7e0      	b.n	8004d06 <_printf_float+0x192>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	055a      	lsls	r2, r3, #21
 8004d48:	d407      	bmi.n	8004d5a <_printf_float+0x1e6>
 8004d4a:	6923      	ldr	r3, [r4, #16]
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b8      	blx	r7
 8004d54:	3001      	adds	r0, #1
 8004d56:	d12b      	bne.n	8004db0 <_printf_float+0x23c>
 8004d58:	e767      	b.n	8004c2a <_printf_float+0xb6>
 8004d5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d5e:	f240 80dd 	bls.w	8004f1c <_printf_float+0x3a8>
 8004d62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d66:	2200      	movs	r2, #0
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f7fb feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d033      	beq.n	8004dda <_printf_float+0x266>
 8004d72:	4a37      	ldr	r2, [pc, #220]	@ (8004e50 <_printf_float+0x2dc>)
 8004d74:	2301      	movs	r3, #1
 8004d76:	4631      	mov	r1, r6
 8004d78:	4628      	mov	r0, r5
 8004d7a:	47b8      	blx	r7
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	f43f af54 	beq.w	8004c2a <_printf_float+0xb6>
 8004d82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004d86:	4543      	cmp	r3, r8
 8004d88:	db02      	blt.n	8004d90 <_printf_float+0x21c>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	07d8      	lsls	r0, r3, #31
 8004d8e:	d50f      	bpl.n	8004db0 <_printf_float+0x23c>
 8004d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d94:	4631      	mov	r1, r6
 8004d96:	4628      	mov	r0, r5
 8004d98:	47b8      	blx	r7
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	f43f af45 	beq.w	8004c2a <_printf_float+0xb6>
 8004da0:	f04f 0900 	mov.w	r9, #0
 8004da4:	f108 38ff 	add.w	r8, r8, #4294967295
 8004da8:	f104 0a1a 	add.w	sl, r4, #26
 8004dac:	45c8      	cmp	r8, r9
 8004dae:	dc09      	bgt.n	8004dc4 <_printf_float+0x250>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	079b      	lsls	r3, r3, #30
 8004db4:	f100 8103 	bmi.w	8004fbe <_printf_float+0x44a>
 8004db8:	68e0      	ldr	r0, [r4, #12]
 8004dba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dbc:	4298      	cmp	r0, r3
 8004dbe:	bfb8      	it	lt
 8004dc0:	4618      	movlt	r0, r3
 8004dc2:	e734      	b.n	8004c2e <_printf_float+0xba>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	4652      	mov	r2, sl
 8004dc8:	4631      	mov	r1, r6
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b8      	blx	r7
 8004dce:	3001      	adds	r0, #1
 8004dd0:	f43f af2b 	beq.w	8004c2a <_printf_float+0xb6>
 8004dd4:	f109 0901 	add.w	r9, r9, #1
 8004dd8:	e7e8      	b.n	8004dac <_printf_float+0x238>
 8004dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	dc39      	bgt.n	8004e54 <_printf_float+0x2e0>
 8004de0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e50 <_printf_float+0x2dc>)
 8004de2:	2301      	movs	r3, #1
 8004de4:	4631      	mov	r1, r6
 8004de6:	4628      	mov	r0, r5
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	f43f af1d 	beq.w	8004c2a <_printf_float+0xb6>
 8004df0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004df4:	ea59 0303 	orrs.w	r3, r9, r3
 8004df8:	d102      	bne.n	8004e00 <_printf_float+0x28c>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	07d9      	lsls	r1, r3, #31
 8004dfe:	d5d7      	bpl.n	8004db0 <_printf_float+0x23c>
 8004e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e04:	4631      	mov	r1, r6
 8004e06:	4628      	mov	r0, r5
 8004e08:	47b8      	blx	r7
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	f43f af0d 	beq.w	8004c2a <_printf_float+0xb6>
 8004e10:	f04f 0a00 	mov.w	sl, #0
 8004e14:	f104 0b1a 	add.w	fp, r4, #26
 8004e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e1a:	425b      	negs	r3, r3
 8004e1c:	4553      	cmp	r3, sl
 8004e1e:	dc01      	bgt.n	8004e24 <_printf_float+0x2b0>
 8004e20:	464b      	mov	r3, r9
 8004e22:	e793      	b.n	8004d4c <_printf_float+0x1d8>
 8004e24:	2301      	movs	r3, #1
 8004e26:	465a      	mov	r2, fp
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f aefb 	beq.w	8004c2a <_printf_float+0xb6>
 8004e34:	f10a 0a01 	add.w	sl, sl, #1
 8004e38:	e7ee      	b.n	8004e18 <_printf_float+0x2a4>
 8004e3a:	bf00      	nop
 8004e3c:	7fefffff 	.word	0x7fefffff
 8004e40:	08009488 	.word	0x08009488
 8004e44:	0800948c 	.word	0x0800948c
 8004e48:	08009490 	.word	0x08009490
 8004e4c:	08009494 	.word	0x08009494
 8004e50:	08009498 	.word	0x08009498
 8004e54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e5a:	4553      	cmp	r3, sl
 8004e5c:	bfa8      	it	ge
 8004e5e:	4653      	movge	r3, sl
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	4699      	mov	r9, r3
 8004e64:	dc36      	bgt.n	8004ed4 <_printf_float+0x360>
 8004e66:	f04f 0b00 	mov.w	fp, #0
 8004e6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e6e:	f104 021a 	add.w	r2, r4, #26
 8004e72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e74:	9306      	str	r3, [sp, #24]
 8004e76:	eba3 0309 	sub.w	r3, r3, r9
 8004e7a:	455b      	cmp	r3, fp
 8004e7c:	dc31      	bgt.n	8004ee2 <_printf_float+0x36e>
 8004e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e80:	459a      	cmp	sl, r3
 8004e82:	dc3a      	bgt.n	8004efa <_printf_float+0x386>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	07da      	lsls	r2, r3, #31
 8004e88:	d437      	bmi.n	8004efa <_printf_float+0x386>
 8004e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e8c:	ebaa 0903 	sub.w	r9, sl, r3
 8004e90:	9b06      	ldr	r3, [sp, #24]
 8004e92:	ebaa 0303 	sub.w	r3, sl, r3
 8004e96:	4599      	cmp	r9, r3
 8004e98:	bfa8      	it	ge
 8004e9a:	4699      	movge	r9, r3
 8004e9c:	f1b9 0f00 	cmp.w	r9, #0
 8004ea0:	dc33      	bgt.n	8004f0a <_printf_float+0x396>
 8004ea2:	f04f 0800 	mov.w	r8, #0
 8004ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eaa:	f104 0b1a 	add.w	fp, r4, #26
 8004eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eb0:	ebaa 0303 	sub.w	r3, sl, r3
 8004eb4:	eba3 0309 	sub.w	r3, r3, r9
 8004eb8:	4543      	cmp	r3, r8
 8004eba:	f77f af79 	ble.w	8004db0 <_printf_float+0x23c>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	465a      	mov	r2, fp
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	47b8      	blx	r7
 8004ec8:	3001      	adds	r0, #1
 8004eca:	f43f aeae 	beq.w	8004c2a <_printf_float+0xb6>
 8004ece:	f108 0801 	add.w	r8, r8, #1
 8004ed2:	e7ec      	b.n	8004eae <_printf_float+0x33a>
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4628      	mov	r0, r5
 8004eda:	47b8      	blx	r7
 8004edc:	3001      	adds	r0, #1
 8004ede:	d1c2      	bne.n	8004e66 <_printf_float+0x2f2>
 8004ee0:	e6a3      	b.n	8004c2a <_printf_float+0xb6>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	9206      	str	r2, [sp, #24]
 8004eea:	47b8      	blx	r7
 8004eec:	3001      	adds	r0, #1
 8004eee:	f43f ae9c 	beq.w	8004c2a <_printf_float+0xb6>
 8004ef2:	9a06      	ldr	r2, [sp, #24]
 8004ef4:	f10b 0b01 	add.w	fp, fp, #1
 8004ef8:	e7bb      	b.n	8004e72 <_printf_float+0x2fe>
 8004efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004efe:	4631      	mov	r1, r6
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b8      	blx	r7
 8004f04:	3001      	adds	r0, #1
 8004f06:	d1c0      	bne.n	8004e8a <_printf_float+0x316>
 8004f08:	e68f      	b.n	8004c2a <_printf_float+0xb6>
 8004f0a:	9a06      	ldr	r2, [sp, #24]
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	4442      	add	r2, r8
 8004f10:	4631      	mov	r1, r6
 8004f12:	4628      	mov	r0, r5
 8004f14:	47b8      	blx	r7
 8004f16:	3001      	adds	r0, #1
 8004f18:	d1c3      	bne.n	8004ea2 <_printf_float+0x32e>
 8004f1a:	e686      	b.n	8004c2a <_printf_float+0xb6>
 8004f1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f20:	f1ba 0f01 	cmp.w	sl, #1
 8004f24:	dc01      	bgt.n	8004f2a <_printf_float+0x3b6>
 8004f26:	07db      	lsls	r3, r3, #31
 8004f28:	d536      	bpl.n	8004f98 <_printf_float+0x424>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b8      	blx	r7
 8004f34:	3001      	adds	r0, #1
 8004f36:	f43f ae78 	beq.w	8004c2a <_printf_float+0xb6>
 8004f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b8      	blx	r7
 8004f44:	3001      	adds	r0, #1
 8004f46:	f43f ae70 	beq.w	8004c2a <_printf_float+0xb6>
 8004f4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2300      	movs	r3, #0
 8004f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f56:	f7fb fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f5a:	b9c0      	cbnz	r0, 8004f8e <_printf_float+0x41a>
 8004f5c:	4653      	mov	r3, sl
 8004f5e:	f108 0201 	add.w	r2, r8, #1
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d10c      	bne.n	8004f86 <_printf_float+0x412>
 8004f6c:	e65d      	b.n	8004c2a <_printf_float+0xb6>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	465a      	mov	r2, fp
 8004f72:	4631      	mov	r1, r6
 8004f74:	4628      	mov	r0, r5
 8004f76:	47b8      	blx	r7
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f43f ae56 	beq.w	8004c2a <_printf_float+0xb6>
 8004f7e:	f108 0801 	add.w	r8, r8, #1
 8004f82:	45d0      	cmp	r8, sl
 8004f84:	dbf3      	blt.n	8004f6e <_printf_float+0x3fa>
 8004f86:	464b      	mov	r3, r9
 8004f88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f8c:	e6df      	b.n	8004d4e <_printf_float+0x1da>
 8004f8e:	f04f 0800 	mov.w	r8, #0
 8004f92:	f104 0b1a 	add.w	fp, r4, #26
 8004f96:	e7f4      	b.n	8004f82 <_printf_float+0x40e>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	e7e1      	b.n	8004f62 <_printf_float+0x3ee>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	464a      	mov	r2, r9
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	f43f ae3e 	beq.w	8004c2a <_printf_float+0xb6>
 8004fae:	f108 0801 	add.w	r8, r8, #1
 8004fb2:	68e3      	ldr	r3, [r4, #12]
 8004fb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004fb6:	1a5b      	subs	r3, r3, r1
 8004fb8:	4543      	cmp	r3, r8
 8004fba:	dcf0      	bgt.n	8004f9e <_printf_float+0x42a>
 8004fbc:	e6fc      	b.n	8004db8 <_printf_float+0x244>
 8004fbe:	f04f 0800 	mov.w	r8, #0
 8004fc2:	f104 0919 	add.w	r9, r4, #25
 8004fc6:	e7f4      	b.n	8004fb2 <_printf_float+0x43e>

08004fc8 <_printf_common>:
 8004fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fcc:	4616      	mov	r6, r2
 8004fce:	4698      	mov	r8, r3
 8004fd0:	688a      	ldr	r2, [r1, #8]
 8004fd2:	690b      	ldr	r3, [r1, #16]
 8004fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	bfb8      	it	lt
 8004fdc:	4613      	movlt	r3, r2
 8004fde:	6033      	str	r3, [r6, #0]
 8004fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	b10a      	cbz	r2, 8004fee <_printf_common+0x26>
 8004fea:	3301      	adds	r3, #1
 8004fec:	6033      	str	r3, [r6, #0]
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	0699      	lsls	r1, r3, #26
 8004ff2:	bf42      	ittt	mi
 8004ff4:	6833      	ldrmi	r3, [r6, #0]
 8004ff6:	3302      	addmi	r3, #2
 8004ff8:	6033      	strmi	r3, [r6, #0]
 8004ffa:	6825      	ldr	r5, [r4, #0]
 8004ffc:	f015 0506 	ands.w	r5, r5, #6
 8005000:	d106      	bne.n	8005010 <_printf_common+0x48>
 8005002:	f104 0a19 	add.w	sl, r4, #25
 8005006:	68e3      	ldr	r3, [r4, #12]
 8005008:	6832      	ldr	r2, [r6, #0]
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	42ab      	cmp	r3, r5
 800500e:	dc26      	bgt.n	800505e <_printf_common+0x96>
 8005010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005014:	6822      	ldr	r2, [r4, #0]
 8005016:	3b00      	subs	r3, #0
 8005018:	bf18      	it	ne
 800501a:	2301      	movne	r3, #1
 800501c:	0692      	lsls	r2, r2, #26
 800501e:	d42b      	bmi.n	8005078 <_printf_common+0xb0>
 8005020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005024:	4641      	mov	r1, r8
 8005026:	4638      	mov	r0, r7
 8005028:	47c8      	blx	r9
 800502a:	3001      	adds	r0, #1
 800502c:	d01e      	beq.n	800506c <_printf_common+0xa4>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	6922      	ldr	r2, [r4, #16]
 8005032:	f003 0306 	and.w	r3, r3, #6
 8005036:	2b04      	cmp	r3, #4
 8005038:	bf02      	ittt	eq
 800503a:	68e5      	ldreq	r5, [r4, #12]
 800503c:	6833      	ldreq	r3, [r6, #0]
 800503e:	1aed      	subeq	r5, r5, r3
 8005040:	68a3      	ldr	r3, [r4, #8]
 8005042:	bf0c      	ite	eq
 8005044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005048:	2500      	movne	r5, #0
 800504a:	4293      	cmp	r3, r2
 800504c:	bfc4      	itt	gt
 800504e:	1a9b      	subgt	r3, r3, r2
 8005050:	18ed      	addgt	r5, r5, r3
 8005052:	2600      	movs	r6, #0
 8005054:	341a      	adds	r4, #26
 8005056:	42b5      	cmp	r5, r6
 8005058:	d11a      	bne.n	8005090 <_printf_common+0xc8>
 800505a:	2000      	movs	r0, #0
 800505c:	e008      	b.n	8005070 <_printf_common+0xa8>
 800505e:	2301      	movs	r3, #1
 8005060:	4652      	mov	r2, sl
 8005062:	4641      	mov	r1, r8
 8005064:	4638      	mov	r0, r7
 8005066:	47c8      	blx	r9
 8005068:	3001      	adds	r0, #1
 800506a:	d103      	bne.n	8005074 <_printf_common+0xac>
 800506c:	f04f 30ff 	mov.w	r0, #4294967295
 8005070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005074:	3501      	adds	r5, #1
 8005076:	e7c6      	b.n	8005006 <_printf_common+0x3e>
 8005078:	18e1      	adds	r1, r4, r3
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	2030      	movs	r0, #48	@ 0x30
 800507e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005082:	4422      	add	r2, r4
 8005084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800508c:	3302      	adds	r3, #2
 800508e:	e7c7      	b.n	8005020 <_printf_common+0x58>
 8005090:	2301      	movs	r3, #1
 8005092:	4622      	mov	r2, r4
 8005094:	4641      	mov	r1, r8
 8005096:	4638      	mov	r0, r7
 8005098:	47c8      	blx	r9
 800509a:	3001      	adds	r0, #1
 800509c:	d0e6      	beq.n	800506c <_printf_common+0xa4>
 800509e:	3601      	adds	r6, #1
 80050a0:	e7d9      	b.n	8005056 <_printf_common+0x8e>
	...

080050a4 <_printf_i>:
 80050a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a8:	7e0f      	ldrb	r7, [r1, #24]
 80050aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050ac:	2f78      	cmp	r7, #120	@ 0x78
 80050ae:	4691      	mov	r9, r2
 80050b0:	4680      	mov	r8, r0
 80050b2:	460c      	mov	r4, r1
 80050b4:	469a      	mov	sl, r3
 80050b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050ba:	d807      	bhi.n	80050cc <_printf_i+0x28>
 80050bc:	2f62      	cmp	r7, #98	@ 0x62
 80050be:	d80a      	bhi.n	80050d6 <_printf_i+0x32>
 80050c0:	2f00      	cmp	r7, #0
 80050c2:	f000 80d2 	beq.w	800526a <_printf_i+0x1c6>
 80050c6:	2f58      	cmp	r7, #88	@ 0x58
 80050c8:	f000 80b9 	beq.w	800523e <_printf_i+0x19a>
 80050cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050d4:	e03a      	b.n	800514c <_printf_i+0xa8>
 80050d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050da:	2b15      	cmp	r3, #21
 80050dc:	d8f6      	bhi.n	80050cc <_printf_i+0x28>
 80050de:	a101      	add	r1, pc, #4	@ (adr r1, 80050e4 <_printf_i+0x40>)
 80050e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050e4:	0800513d 	.word	0x0800513d
 80050e8:	08005151 	.word	0x08005151
 80050ec:	080050cd 	.word	0x080050cd
 80050f0:	080050cd 	.word	0x080050cd
 80050f4:	080050cd 	.word	0x080050cd
 80050f8:	080050cd 	.word	0x080050cd
 80050fc:	08005151 	.word	0x08005151
 8005100:	080050cd 	.word	0x080050cd
 8005104:	080050cd 	.word	0x080050cd
 8005108:	080050cd 	.word	0x080050cd
 800510c:	080050cd 	.word	0x080050cd
 8005110:	08005251 	.word	0x08005251
 8005114:	0800517b 	.word	0x0800517b
 8005118:	0800520b 	.word	0x0800520b
 800511c:	080050cd 	.word	0x080050cd
 8005120:	080050cd 	.word	0x080050cd
 8005124:	08005273 	.word	0x08005273
 8005128:	080050cd 	.word	0x080050cd
 800512c:	0800517b 	.word	0x0800517b
 8005130:	080050cd 	.word	0x080050cd
 8005134:	080050cd 	.word	0x080050cd
 8005138:	08005213 	.word	0x08005213
 800513c:	6833      	ldr	r3, [r6, #0]
 800513e:	1d1a      	adds	r2, r3, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6032      	str	r2, [r6, #0]
 8005144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800514c:	2301      	movs	r3, #1
 800514e:	e09d      	b.n	800528c <_printf_i+0x1e8>
 8005150:	6833      	ldr	r3, [r6, #0]
 8005152:	6820      	ldr	r0, [r4, #0]
 8005154:	1d19      	adds	r1, r3, #4
 8005156:	6031      	str	r1, [r6, #0]
 8005158:	0606      	lsls	r6, r0, #24
 800515a:	d501      	bpl.n	8005160 <_printf_i+0xbc>
 800515c:	681d      	ldr	r5, [r3, #0]
 800515e:	e003      	b.n	8005168 <_printf_i+0xc4>
 8005160:	0645      	lsls	r5, r0, #25
 8005162:	d5fb      	bpl.n	800515c <_printf_i+0xb8>
 8005164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005168:	2d00      	cmp	r5, #0
 800516a:	da03      	bge.n	8005174 <_printf_i+0xd0>
 800516c:	232d      	movs	r3, #45	@ 0x2d
 800516e:	426d      	negs	r5, r5
 8005170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005174:	4859      	ldr	r0, [pc, #356]	@ (80052dc <_printf_i+0x238>)
 8005176:	230a      	movs	r3, #10
 8005178:	e011      	b.n	800519e <_printf_i+0xfa>
 800517a:	6821      	ldr	r1, [r4, #0]
 800517c:	6833      	ldr	r3, [r6, #0]
 800517e:	0608      	lsls	r0, r1, #24
 8005180:	f853 5b04 	ldr.w	r5, [r3], #4
 8005184:	d402      	bmi.n	800518c <_printf_i+0xe8>
 8005186:	0649      	lsls	r1, r1, #25
 8005188:	bf48      	it	mi
 800518a:	b2ad      	uxthmi	r5, r5
 800518c:	2f6f      	cmp	r7, #111	@ 0x6f
 800518e:	4853      	ldr	r0, [pc, #332]	@ (80052dc <_printf_i+0x238>)
 8005190:	6033      	str	r3, [r6, #0]
 8005192:	bf14      	ite	ne
 8005194:	230a      	movne	r3, #10
 8005196:	2308      	moveq	r3, #8
 8005198:	2100      	movs	r1, #0
 800519a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800519e:	6866      	ldr	r6, [r4, #4]
 80051a0:	60a6      	str	r6, [r4, #8]
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	bfa2      	ittt	ge
 80051a6:	6821      	ldrge	r1, [r4, #0]
 80051a8:	f021 0104 	bicge.w	r1, r1, #4
 80051ac:	6021      	strge	r1, [r4, #0]
 80051ae:	b90d      	cbnz	r5, 80051b4 <_printf_i+0x110>
 80051b0:	2e00      	cmp	r6, #0
 80051b2:	d04b      	beq.n	800524c <_printf_i+0x1a8>
 80051b4:	4616      	mov	r6, r2
 80051b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80051ba:	fb03 5711 	mls	r7, r3, r1, r5
 80051be:	5dc7      	ldrb	r7, [r0, r7]
 80051c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051c4:	462f      	mov	r7, r5
 80051c6:	42bb      	cmp	r3, r7
 80051c8:	460d      	mov	r5, r1
 80051ca:	d9f4      	bls.n	80051b6 <_printf_i+0x112>
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d10b      	bne.n	80051e8 <_printf_i+0x144>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	07df      	lsls	r7, r3, #31
 80051d4:	d508      	bpl.n	80051e8 <_printf_i+0x144>
 80051d6:	6923      	ldr	r3, [r4, #16]
 80051d8:	6861      	ldr	r1, [r4, #4]
 80051da:	4299      	cmp	r1, r3
 80051dc:	bfde      	ittt	le
 80051de:	2330      	movle	r3, #48	@ 0x30
 80051e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051e8:	1b92      	subs	r2, r2, r6
 80051ea:	6122      	str	r2, [r4, #16]
 80051ec:	f8cd a000 	str.w	sl, [sp]
 80051f0:	464b      	mov	r3, r9
 80051f2:	aa03      	add	r2, sp, #12
 80051f4:	4621      	mov	r1, r4
 80051f6:	4640      	mov	r0, r8
 80051f8:	f7ff fee6 	bl	8004fc8 <_printf_common>
 80051fc:	3001      	adds	r0, #1
 80051fe:	d14a      	bne.n	8005296 <_printf_i+0x1f2>
 8005200:	f04f 30ff 	mov.w	r0, #4294967295
 8005204:	b004      	add	sp, #16
 8005206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	f043 0320 	orr.w	r3, r3, #32
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	4833      	ldr	r0, [pc, #204]	@ (80052e0 <_printf_i+0x23c>)
 8005214:	2778      	movs	r7, #120	@ 0x78
 8005216:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	6831      	ldr	r1, [r6, #0]
 800521e:	061f      	lsls	r7, r3, #24
 8005220:	f851 5b04 	ldr.w	r5, [r1], #4
 8005224:	d402      	bmi.n	800522c <_printf_i+0x188>
 8005226:	065f      	lsls	r7, r3, #25
 8005228:	bf48      	it	mi
 800522a:	b2ad      	uxthmi	r5, r5
 800522c:	6031      	str	r1, [r6, #0]
 800522e:	07d9      	lsls	r1, r3, #31
 8005230:	bf44      	itt	mi
 8005232:	f043 0320 	orrmi.w	r3, r3, #32
 8005236:	6023      	strmi	r3, [r4, #0]
 8005238:	b11d      	cbz	r5, 8005242 <_printf_i+0x19e>
 800523a:	2310      	movs	r3, #16
 800523c:	e7ac      	b.n	8005198 <_printf_i+0xf4>
 800523e:	4827      	ldr	r0, [pc, #156]	@ (80052dc <_printf_i+0x238>)
 8005240:	e7e9      	b.n	8005216 <_printf_i+0x172>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	f023 0320 	bic.w	r3, r3, #32
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	e7f6      	b.n	800523a <_printf_i+0x196>
 800524c:	4616      	mov	r6, r2
 800524e:	e7bd      	b.n	80051cc <_printf_i+0x128>
 8005250:	6833      	ldr	r3, [r6, #0]
 8005252:	6825      	ldr	r5, [r4, #0]
 8005254:	6961      	ldr	r1, [r4, #20]
 8005256:	1d18      	adds	r0, r3, #4
 8005258:	6030      	str	r0, [r6, #0]
 800525a:	062e      	lsls	r6, r5, #24
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	d501      	bpl.n	8005264 <_printf_i+0x1c0>
 8005260:	6019      	str	r1, [r3, #0]
 8005262:	e002      	b.n	800526a <_printf_i+0x1c6>
 8005264:	0668      	lsls	r0, r5, #25
 8005266:	d5fb      	bpl.n	8005260 <_printf_i+0x1bc>
 8005268:	8019      	strh	r1, [r3, #0]
 800526a:	2300      	movs	r3, #0
 800526c:	6123      	str	r3, [r4, #16]
 800526e:	4616      	mov	r6, r2
 8005270:	e7bc      	b.n	80051ec <_printf_i+0x148>
 8005272:	6833      	ldr	r3, [r6, #0]
 8005274:	1d1a      	adds	r2, r3, #4
 8005276:	6032      	str	r2, [r6, #0]
 8005278:	681e      	ldr	r6, [r3, #0]
 800527a:	6862      	ldr	r2, [r4, #4]
 800527c:	2100      	movs	r1, #0
 800527e:	4630      	mov	r0, r6
 8005280:	f7fa ffae 	bl	80001e0 <memchr>
 8005284:	b108      	cbz	r0, 800528a <_printf_i+0x1e6>
 8005286:	1b80      	subs	r0, r0, r6
 8005288:	6060      	str	r0, [r4, #4]
 800528a:	6863      	ldr	r3, [r4, #4]
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	2300      	movs	r3, #0
 8005290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005294:	e7aa      	b.n	80051ec <_printf_i+0x148>
 8005296:	6923      	ldr	r3, [r4, #16]
 8005298:	4632      	mov	r2, r6
 800529a:	4649      	mov	r1, r9
 800529c:	4640      	mov	r0, r8
 800529e:	47d0      	blx	sl
 80052a0:	3001      	adds	r0, #1
 80052a2:	d0ad      	beq.n	8005200 <_printf_i+0x15c>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	079b      	lsls	r3, r3, #30
 80052a8:	d413      	bmi.n	80052d2 <_printf_i+0x22e>
 80052aa:	68e0      	ldr	r0, [r4, #12]
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	4298      	cmp	r0, r3
 80052b0:	bfb8      	it	lt
 80052b2:	4618      	movlt	r0, r3
 80052b4:	e7a6      	b.n	8005204 <_printf_i+0x160>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4632      	mov	r2, r6
 80052ba:	4649      	mov	r1, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	47d0      	blx	sl
 80052c0:	3001      	adds	r0, #1
 80052c2:	d09d      	beq.n	8005200 <_printf_i+0x15c>
 80052c4:	3501      	adds	r5, #1
 80052c6:	68e3      	ldr	r3, [r4, #12]
 80052c8:	9903      	ldr	r1, [sp, #12]
 80052ca:	1a5b      	subs	r3, r3, r1
 80052cc:	42ab      	cmp	r3, r5
 80052ce:	dcf2      	bgt.n	80052b6 <_printf_i+0x212>
 80052d0:	e7eb      	b.n	80052aa <_printf_i+0x206>
 80052d2:	2500      	movs	r5, #0
 80052d4:	f104 0619 	add.w	r6, r4, #25
 80052d8:	e7f5      	b.n	80052c6 <_printf_i+0x222>
 80052da:	bf00      	nop
 80052dc:	0800949a 	.word	0x0800949a
 80052e0:	080094ab 	.word	0x080094ab

080052e4 <_scanf_float>:
 80052e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e8:	b087      	sub	sp, #28
 80052ea:	4617      	mov	r7, r2
 80052ec:	9303      	str	r3, [sp, #12]
 80052ee:	688b      	ldr	r3, [r1, #8]
 80052f0:	1e5a      	subs	r2, r3, #1
 80052f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80052f6:	bf81      	itttt	hi
 80052f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80052fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8005300:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005304:	608b      	strhi	r3, [r1, #8]
 8005306:	680b      	ldr	r3, [r1, #0]
 8005308:	460a      	mov	r2, r1
 800530a:	f04f 0500 	mov.w	r5, #0
 800530e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005312:	f842 3b1c 	str.w	r3, [r2], #28
 8005316:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800531a:	4680      	mov	r8, r0
 800531c:	460c      	mov	r4, r1
 800531e:	bf98      	it	ls
 8005320:	f04f 0b00 	movls.w	fp, #0
 8005324:	9201      	str	r2, [sp, #4]
 8005326:	4616      	mov	r6, r2
 8005328:	46aa      	mov	sl, r5
 800532a:	46a9      	mov	r9, r5
 800532c:	9502      	str	r5, [sp, #8]
 800532e:	68a2      	ldr	r2, [r4, #8]
 8005330:	b152      	cbz	r2, 8005348 <_scanf_float+0x64>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b4e      	cmp	r3, #78	@ 0x4e
 8005338:	d864      	bhi.n	8005404 <_scanf_float+0x120>
 800533a:	2b40      	cmp	r3, #64	@ 0x40
 800533c:	d83c      	bhi.n	80053b8 <_scanf_float+0xd4>
 800533e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005342:	b2c8      	uxtb	r0, r1
 8005344:	280e      	cmp	r0, #14
 8005346:	d93a      	bls.n	80053be <_scanf_float+0xda>
 8005348:	f1b9 0f00 	cmp.w	r9, #0
 800534c:	d003      	beq.n	8005356 <_scanf_float+0x72>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	f10a 3aff 	add.w	sl, sl, #4294967295
 800535a:	f1ba 0f01 	cmp.w	sl, #1
 800535e:	f200 8117 	bhi.w	8005590 <_scanf_float+0x2ac>
 8005362:	9b01      	ldr	r3, [sp, #4]
 8005364:	429e      	cmp	r6, r3
 8005366:	f200 8108 	bhi.w	800557a <_scanf_float+0x296>
 800536a:	2001      	movs	r0, #1
 800536c:	b007      	add	sp, #28
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005376:	2a0d      	cmp	r2, #13
 8005378:	d8e6      	bhi.n	8005348 <_scanf_float+0x64>
 800537a:	a101      	add	r1, pc, #4	@ (adr r1, 8005380 <_scanf_float+0x9c>)
 800537c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005380:	080054c7 	.word	0x080054c7
 8005384:	08005349 	.word	0x08005349
 8005388:	08005349 	.word	0x08005349
 800538c:	08005349 	.word	0x08005349
 8005390:	08005527 	.word	0x08005527
 8005394:	080054ff 	.word	0x080054ff
 8005398:	08005349 	.word	0x08005349
 800539c:	08005349 	.word	0x08005349
 80053a0:	080054d5 	.word	0x080054d5
 80053a4:	08005349 	.word	0x08005349
 80053a8:	08005349 	.word	0x08005349
 80053ac:	08005349 	.word	0x08005349
 80053b0:	08005349 	.word	0x08005349
 80053b4:	0800548d 	.word	0x0800548d
 80053b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80053bc:	e7db      	b.n	8005376 <_scanf_float+0x92>
 80053be:	290e      	cmp	r1, #14
 80053c0:	d8c2      	bhi.n	8005348 <_scanf_float+0x64>
 80053c2:	a001      	add	r0, pc, #4	@ (adr r0, 80053c8 <_scanf_float+0xe4>)
 80053c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80053c8:	0800547d 	.word	0x0800547d
 80053cc:	08005349 	.word	0x08005349
 80053d0:	0800547d 	.word	0x0800547d
 80053d4:	08005513 	.word	0x08005513
 80053d8:	08005349 	.word	0x08005349
 80053dc:	08005425 	.word	0x08005425
 80053e0:	08005463 	.word	0x08005463
 80053e4:	08005463 	.word	0x08005463
 80053e8:	08005463 	.word	0x08005463
 80053ec:	08005463 	.word	0x08005463
 80053f0:	08005463 	.word	0x08005463
 80053f4:	08005463 	.word	0x08005463
 80053f8:	08005463 	.word	0x08005463
 80053fc:	08005463 	.word	0x08005463
 8005400:	08005463 	.word	0x08005463
 8005404:	2b6e      	cmp	r3, #110	@ 0x6e
 8005406:	d809      	bhi.n	800541c <_scanf_float+0x138>
 8005408:	2b60      	cmp	r3, #96	@ 0x60
 800540a:	d8b2      	bhi.n	8005372 <_scanf_float+0x8e>
 800540c:	2b54      	cmp	r3, #84	@ 0x54
 800540e:	d07b      	beq.n	8005508 <_scanf_float+0x224>
 8005410:	2b59      	cmp	r3, #89	@ 0x59
 8005412:	d199      	bne.n	8005348 <_scanf_float+0x64>
 8005414:	2d07      	cmp	r5, #7
 8005416:	d197      	bne.n	8005348 <_scanf_float+0x64>
 8005418:	2508      	movs	r5, #8
 800541a:	e02c      	b.n	8005476 <_scanf_float+0x192>
 800541c:	2b74      	cmp	r3, #116	@ 0x74
 800541e:	d073      	beq.n	8005508 <_scanf_float+0x224>
 8005420:	2b79      	cmp	r3, #121	@ 0x79
 8005422:	e7f6      	b.n	8005412 <_scanf_float+0x12e>
 8005424:	6821      	ldr	r1, [r4, #0]
 8005426:	05c8      	lsls	r0, r1, #23
 8005428:	d51b      	bpl.n	8005462 <_scanf_float+0x17e>
 800542a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800542e:	6021      	str	r1, [r4, #0]
 8005430:	f109 0901 	add.w	r9, r9, #1
 8005434:	f1bb 0f00 	cmp.w	fp, #0
 8005438:	d003      	beq.n	8005442 <_scanf_float+0x15e>
 800543a:	3201      	adds	r2, #1
 800543c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005440:	60a2      	str	r2, [r4, #8]
 8005442:	68a3      	ldr	r3, [r4, #8]
 8005444:	3b01      	subs	r3, #1
 8005446:	60a3      	str	r3, [r4, #8]
 8005448:	6923      	ldr	r3, [r4, #16]
 800544a:	3301      	adds	r3, #1
 800544c:	6123      	str	r3, [r4, #16]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3b01      	subs	r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	607b      	str	r3, [r7, #4]
 8005456:	f340 8087 	ble.w	8005568 <_scanf_float+0x284>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	3301      	adds	r3, #1
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	e765      	b.n	800532e <_scanf_float+0x4a>
 8005462:	eb1a 0105 	adds.w	r1, sl, r5
 8005466:	f47f af6f 	bne.w	8005348 <_scanf_float+0x64>
 800546a:	6822      	ldr	r2, [r4, #0]
 800546c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005470:	6022      	str	r2, [r4, #0]
 8005472:	460d      	mov	r5, r1
 8005474:	468a      	mov	sl, r1
 8005476:	f806 3b01 	strb.w	r3, [r6], #1
 800547a:	e7e2      	b.n	8005442 <_scanf_float+0x15e>
 800547c:	6822      	ldr	r2, [r4, #0]
 800547e:	0610      	lsls	r0, r2, #24
 8005480:	f57f af62 	bpl.w	8005348 <_scanf_float+0x64>
 8005484:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005488:	6022      	str	r2, [r4, #0]
 800548a:	e7f4      	b.n	8005476 <_scanf_float+0x192>
 800548c:	f1ba 0f00 	cmp.w	sl, #0
 8005490:	d10e      	bne.n	80054b0 <_scanf_float+0x1cc>
 8005492:	f1b9 0f00 	cmp.w	r9, #0
 8005496:	d10e      	bne.n	80054b6 <_scanf_float+0x1d2>
 8005498:	6822      	ldr	r2, [r4, #0]
 800549a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800549e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80054a2:	d108      	bne.n	80054b6 <_scanf_float+0x1d2>
 80054a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80054a8:	6022      	str	r2, [r4, #0]
 80054aa:	f04f 0a01 	mov.w	sl, #1
 80054ae:	e7e2      	b.n	8005476 <_scanf_float+0x192>
 80054b0:	f1ba 0f02 	cmp.w	sl, #2
 80054b4:	d055      	beq.n	8005562 <_scanf_float+0x27e>
 80054b6:	2d01      	cmp	r5, #1
 80054b8:	d002      	beq.n	80054c0 <_scanf_float+0x1dc>
 80054ba:	2d04      	cmp	r5, #4
 80054bc:	f47f af44 	bne.w	8005348 <_scanf_float+0x64>
 80054c0:	3501      	adds	r5, #1
 80054c2:	b2ed      	uxtb	r5, r5
 80054c4:	e7d7      	b.n	8005476 <_scanf_float+0x192>
 80054c6:	f1ba 0f01 	cmp.w	sl, #1
 80054ca:	f47f af3d 	bne.w	8005348 <_scanf_float+0x64>
 80054ce:	f04f 0a02 	mov.w	sl, #2
 80054d2:	e7d0      	b.n	8005476 <_scanf_float+0x192>
 80054d4:	b97d      	cbnz	r5, 80054f6 <_scanf_float+0x212>
 80054d6:	f1b9 0f00 	cmp.w	r9, #0
 80054da:	f47f af38 	bne.w	800534e <_scanf_float+0x6a>
 80054de:	6822      	ldr	r2, [r4, #0]
 80054e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80054e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80054e8:	f040 8108 	bne.w	80056fc <_scanf_float+0x418>
 80054ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80054f0:	6022      	str	r2, [r4, #0]
 80054f2:	2501      	movs	r5, #1
 80054f4:	e7bf      	b.n	8005476 <_scanf_float+0x192>
 80054f6:	2d03      	cmp	r5, #3
 80054f8:	d0e2      	beq.n	80054c0 <_scanf_float+0x1dc>
 80054fa:	2d05      	cmp	r5, #5
 80054fc:	e7de      	b.n	80054bc <_scanf_float+0x1d8>
 80054fe:	2d02      	cmp	r5, #2
 8005500:	f47f af22 	bne.w	8005348 <_scanf_float+0x64>
 8005504:	2503      	movs	r5, #3
 8005506:	e7b6      	b.n	8005476 <_scanf_float+0x192>
 8005508:	2d06      	cmp	r5, #6
 800550a:	f47f af1d 	bne.w	8005348 <_scanf_float+0x64>
 800550e:	2507      	movs	r5, #7
 8005510:	e7b1      	b.n	8005476 <_scanf_float+0x192>
 8005512:	6822      	ldr	r2, [r4, #0]
 8005514:	0591      	lsls	r1, r2, #22
 8005516:	f57f af17 	bpl.w	8005348 <_scanf_float+0x64>
 800551a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800551e:	6022      	str	r2, [r4, #0]
 8005520:	f8cd 9008 	str.w	r9, [sp, #8]
 8005524:	e7a7      	b.n	8005476 <_scanf_float+0x192>
 8005526:	6822      	ldr	r2, [r4, #0]
 8005528:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800552c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005530:	d006      	beq.n	8005540 <_scanf_float+0x25c>
 8005532:	0550      	lsls	r0, r2, #21
 8005534:	f57f af08 	bpl.w	8005348 <_scanf_float+0x64>
 8005538:	f1b9 0f00 	cmp.w	r9, #0
 800553c:	f000 80de 	beq.w	80056fc <_scanf_float+0x418>
 8005540:	0591      	lsls	r1, r2, #22
 8005542:	bf58      	it	pl
 8005544:	9902      	ldrpl	r1, [sp, #8]
 8005546:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800554a:	bf58      	it	pl
 800554c:	eba9 0101 	subpl.w	r1, r9, r1
 8005550:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005554:	bf58      	it	pl
 8005556:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800555a:	6022      	str	r2, [r4, #0]
 800555c:	f04f 0900 	mov.w	r9, #0
 8005560:	e789      	b.n	8005476 <_scanf_float+0x192>
 8005562:	f04f 0a03 	mov.w	sl, #3
 8005566:	e786      	b.n	8005476 <_scanf_float+0x192>
 8005568:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800556c:	4639      	mov	r1, r7
 800556e:	4640      	mov	r0, r8
 8005570:	4798      	blx	r3
 8005572:	2800      	cmp	r0, #0
 8005574:	f43f aedb 	beq.w	800532e <_scanf_float+0x4a>
 8005578:	e6e6      	b.n	8005348 <_scanf_float+0x64>
 800557a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800557e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005582:	463a      	mov	r2, r7
 8005584:	4640      	mov	r0, r8
 8005586:	4798      	blx	r3
 8005588:	6923      	ldr	r3, [r4, #16]
 800558a:	3b01      	subs	r3, #1
 800558c:	6123      	str	r3, [r4, #16]
 800558e:	e6e8      	b.n	8005362 <_scanf_float+0x7e>
 8005590:	1e6b      	subs	r3, r5, #1
 8005592:	2b06      	cmp	r3, #6
 8005594:	d824      	bhi.n	80055e0 <_scanf_float+0x2fc>
 8005596:	2d02      	cmp	r5, #2
 8005598:	d836      	bhi.n	8005608 <_scanf_float+0x324>
 800559a:	9b01      	ldr	r3, [sp, #4]
 800559c:	429e      	cmp	r6, r3
 800559e:	f67f aee4 	bls.w	800536a <_scanf_float+0x86>
 80055a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055aa:	463a      	mov	r2, r7
 80055ac:	4640      	mov	r0, r8
 80055ae:	4798      	blx	r3
 80055b0:	6923      	ldr	r3, [r4, #16]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	6123      	str	r3, [r4, #16]
 80055b6:	e7f0      	b.n	800559a <_scanf_float+0x2b6>
 80055b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80055c0:	463a      	mov	r2, r7
 80055c2:	4640      	mov	r0, r8
 80055c4:	4798      	blx	r3
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	6123      	str	r3, [r4, #16]
 80055cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055d0:	fa5f fa8a 	uxtb.w	sl, sl
 80055d4:	f1ba 0f02 	cmp.w	sl, #2
 80055d8:	d1ee      	bne.n	80055b8 <_scanf_float+0x2d4>
 80055da:	3d03      	subs	r5, #3
 80055dc:	b2ed      	uxtb	r5, r5
 80055de:	1b76      	subs	r6, r6, r5
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	05da      	lsls	r2, r3, #23
 80055e4:	d530      	bpl.n	8005648 <_scanf_float+0x364>
 80055e6:	055b      	lsls	r3, r3, #21
 80055e8:	d511      	bpl.n	800560e <_scanf_float+0x32a>
 80055ea:	9b01      	ldr	r3, [sp, #4]
 80055ec:	429e      	cmp	r6, r3
 80055ee:	f67f aebc 	bls.w	800536a <_scanf_float+0x86>
 80055f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055fa:	463a      	mov	r2, r7
 80055fc:	4640      	mov	r0, r8
 80055fe:	4798      	blx	r3
 8005600:	6923      	ldr	r3, [r4, #16]
 8005602:	3b01      	subs	r3, #1
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	e7f0      	b.n	80055ea <_scanf_float+0x306>
 8005608:	46aa      	mov	sl, r5
 800560a:	46b3      	mov	fp, r6
 800560c:	e7de      	b.n	80055cc <_scanf_float+0x2e8>
 800560e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	2965      	cmp	r1, #101	@ 0x65
 8005616:	f103 33ff 	add.w	r3, r3, #4294967295
 800561a:	f106 35ff 	add.w	r5, r6, #4294967295
 800561e:	6123      	str	r3, [r4, #16]
 8005620:	d00c      	beq.n	800563c <_scanf_float+0x358>
 8005622:	2945      	cmp	r1, #69	@ 0x45
 8005624:	d00a      	beq.n	800563c <_scanf_float+0x358>
 8005626:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800562a:	463a      	mov	r2, r7
 800562c:	4640      	mov	r0, r8
 800562e:	4798      	blx	r3
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005636:	3b01      	subs	r3, #1
 8005638:	1eb5      	subs	r5, r6, #2
 800563a:	6123      	str	r3, [r4, #16]
 800563c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005640:	463a      	mov	r2, r7
 8005642:	4640      	mov	r0, r8
 8005644:	4798      	blx	r3
 8005646:	462e      	mov	r6, r5
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	f012 0210 	ands.w	r2, r2, #16
 800564e:	d001      	beq.n	8005654 <_scanf_float+0x370>
 8005650:	2000      	movs	r0, #0
 8005652:	e68b      	b.n	800536c <_scanf_float+0x88>
 8005654:	7032      	strb	r2, [r6, #0]
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800565c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005660:	d11c      	bne.n	800569c <_scanf_float+0x3b8>
 8005662:	9b02      	ldr	r3, [sp, #8]
 8005664:	454b      	cmp	r3, r9
 8005666:	eba3 0209 	sub.w	r2, r3, r9
 800566a:	d123      	bne.n	80056b4 <_scanf_float+0x3d0>
 800566c:	9901      	ldr	r1, [sp, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	4640      	mov	r0, r8
 8005672:	f002 fdad 	bl	80081d0 <_strtod_r>
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	6821      	ldr	r1, [r4, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f011 0f02 	tst.w	r1, #2
 8005680:	ec57 6b10 	vmov	r6, r7, d0
 8005684:	f103 0204 	add.w	r2, r3, #4
 8005688:	d01f      	beq.n	80056ca <_scanf_float+0x3e6>
 800568a:	9903      	ldr	r1, [sp, #12]
 800568c:	600a      	str	r2, [r1, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	e9c3 6700 	strd	r6, r7, [r3]
 8005694:	68e3      	ldr	r3, [r4, #12]
 8005696:	3301      	adds	r3, #1
 8005698:	60e3      	str	r3, [r4, #12]
 800569a:	e7d9      	b.n	8005650 <_scanf_float+0x36c>
 800569c:	9b04      	ldr	r3, [sp, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0e4      	beq.n	800566c <_scanf_float+0x388>
 80056a2:	9905      	ldr	r1, [sp, #20]
 80056a4:	230a      	movs	r3, #10
 80056a6:	3101      	adds	r1, #1
 80056a8:	4640      	mov	r0, r8
 80056aa:	f002 fe11 	bl	80082d0 <_strtol_r>
 80056ae:	9b04      	ldr	r3, [sp, #16]
 80056b0:	9e05      	ldr	r6, [sp, #20]
 80056b2:	1ac2      	subs	r2, r0, r3
 80056b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80056b8:	429e      	cmp	r6, r3
 80056ba:	bf28      	it	cs
 80056bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80056c0:	4910      	ldr	r1, [pc, #64]	@ (8005704 <_scanf_float+0x420>)
 80056c2:	4630      	mov	r0, r6
 80056c4:	f000 fa8a 	bl	8005bdc <siprintf>
 80056c8:	e7d0      	b.n	800566c <_scanf_float+0x388>
 80056ca:	f011 0f04 	tst.w	r1, #4
 80056ce:	9903      	ldr	r1, [sp, #12]
 80056d0:	600a      	str	r2, [r1, #0]
 80056d2:	d1dc      	bne.n	800568e <_scanf_float+0x3aa>
 80056d4:	681d      	ldr	r5, [r3, #0]
 80056d6:	4632      	mov	r2, r6
 80056d8:	463b      	mov	r3, r7
 80056da:	4630      	mov	r0, r6
 80056dc:	4639      	mov	r1, r7
 80056de:	f7fb fa2d 	bl	8000b3c <__aeabi_dcmpun>
 80056e2:	b128      	cbz	r0, 80056f0 <_scanf_float+0x40c>
 80056e4:	4808      	ldr	r0, [pc, #32]	@ (8005708 <_scanf_float+0x424>)
 80056e6:	f000 fb6b 	bl	8005dc0 <nanf>
 80056ea:	ed85 0a00 	vstr	s0, [r5]
 80056ee:	e7d1      	b.n	8005694 <_scanf_float+0x3b0>
 80056f0:	4630      	mov	r0, r6
 80056f2:	4639      	mov	r1, r7
 80056f4:	f7fb fa80 	bl	8000bf8 <__aeabi_d2f>
 80056f8:	6028      	str	r0, [r5, #0]
 80056fa:	e7cb      	b.n	8005694 <_scanf_float+0x3b0>
 80056fc:	f04f 0900 	mov.w	r9, #0
 8005700:	e629      	b.n	8005356 <_scanf_float+0x72>
 8005702:	bf00      	nop
 8005704:	080094bc 	.word	0x080094bc
 8005708:	08009855 	.word	0x08009855

0800570c <_fgets_r>:
 800570c:	2a01      	cmp	r2, #1
 800570e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005712:	4681      	mov	r9, r0
 8005714:	460e      	mov	r6, r1
 8005716:	4615      	mov	r5, r2
 8005718:	461c      	mov	r4, r3
 800571a:	dd21      	ble.n	8005760 <_fgets_r+0x54>
 800571c:	b118      	cbz	r0, 8005726 <_fgets_r+0x1a>
 800571e:	6a03      	ldr	r3, [r0, #32]
 8005720:	b90b      	cbnz	r3, 8005726 <_fgets_r+0x1a>
 8005722:	f000 f8ef 	bl	8005904 <__sinit>
 8005726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005728:	07db      	lsls	r3, r3, #31
 800572a:	d405      	bmi.n	8005738 <_fgets_r+0x2c>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	059f      	lsls	r7, r3, #22
 8005730:	d402      	bmi.n	8005738 <_fgets_r+0x2c>
 8005732:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005734:	f000 fb33 	bl	8005d9e <__retarget_lock_acquire_recursive>
 8005738:	3d01      	subs	r5, #1
 800573a:	4637      	mov	r7, r6
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	b99b      	cbnz	r3, 8005768 <_fgets_r+0x5c>
 8005740:	4621      	mov	r1, r4
 8005742:	4648      	mov	r0, r9
 8005744:	f000 f922 	bl	800598c <__srefill_r>
 8005748:	b168      	cbz	r0, 8005766 <_fgets_r+0x5a>
 800574a:	42b7      	cmp	r7, r6
 800574c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800574e:	d139      	bne.n	80057c4 <_fgets_r+0xb8>
 8005750:	07d8      	lsls	r0, r3, #31
 8005752:	d405      	bmi.n	8005760 <_fgets_r+0x54>
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	0599      	lsls	r1, r3, #22
 8005758:	d402      	bmi.n	8005760 <_fgets_r+0x54>
 800575a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800575c:	f000 fb20 	bl	8005da0 <__retarget_lock_release_recursive>
 8005760:	2000      	movs	r0, #0
 8005762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005766:	6863      	ldr	r3, [r4, #4]
 8005768:	f8d4 a000 	ldr.w	sl, [r4]
 800576c:	42ab      	cmp	r3, r5
 800576e:	bf28      	it	cs
 8005770:	462b      	movcs	r3, r5
 8005772:	461a      	mov	r2, r3
 8005774:	210a      	movs	r1, #10
 8005776:	4650      	mov	r0, sl
 8005778:	4698      	mov	r8, r3
 800577a:	f7fa fd31 	bl	80001e0 <memchr>
 800577e:	6863      	ldr	r3, [r4, #4]
 8005780:	b188      	cbz	r0, 80057a6 <_fgets_r+0x9a>
 8005782:	3001      	adds	r0, #1
 8005784:	eba0 050a 	sub.w	r5, r0, sl
 8005788:	1b5b      	subs	r3, r3, r5
 800578a:	e9c4 0300 	strd	r0, r3, [r4]
 800578e:	462a      	mov	r2, r5
 8005790:	4651      	mov	r1, sl
 8005792:	4638      	mov	r0, r7
 8005794:	f000 fb05 	bl	8005da2 <memcpy>
 8005798:	2300      	movs	r3, #0
 800579a:	557b      	strb	r3, [r7, r5]
 800579c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800579e:	07da      	lsls	r2, r3, #31
 80057a0:	d513      	bpl.n	80057ca <_fgets_r+0xbe>
 80057a2:	4630      	mov	r0, r6
 80057a4:	e7dd      	b.n	8005762 <_fgets_r+0x56>
 80057a6:	eba3 0308 	sub.w	r3, r3, r8
 80057aa:	6063      	str	r3, [r4, #4]
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	4443      	add	r3, r8
 80057b0:	4638      	mov	r0, r7
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	4642      	mov	r2, r8
 80057b6:	4651      	mov	r1, sl
 80057b8:	f000 faf3 	bl	8005da2 <memcpy>
 80057bc:	ebb5 0508 	subs.w	r5, r5, r8
 80057c0:	4447      	add	r7, r8
 80057c2:	d1bb      	bne.n	800573c <_fgets_r+0x30>
 80057c4:	2300      	movs	r3, #0
 80057c6:	703b      	strb	r3, [r7, #0]
 80057c8:	e7e8      	b.n	800579c <_fgets_r+0x90>
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	059b      	lsls	r3, r3, #22
 80057ce:	d4e8      	bmi.n	80057a2 <_fgets_r+0x96>
 80057d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057d2:	f000 fae5 	bl	8005da0 <__retarget_lock_release_recursive>
 80057d6:	e7e4      	b.n	80057a2 <_fgets_r+0x96>

080057d8 <fgets>:
 80057d8:	4613      	mov	r3, r2
 80057da:	460a      	mov	r2, r1
 80057dc:	4601      	mov	r1, r0
 80057de:	4802      	ldr	r0, [pc, #8]	@ (80057e8 <fgets+0x10>)
 80057e0:	6800      	ldr	r0, [r0, #0]
 80057e2:	f7ff bf93 	b.w	800570c <_fgets_r>
 80057e6:	bf00      	nop
 80057e8:	2000001c 	.word	0x2000001c

080057ec <std>:
 80057ec:	2300      	movs	r3, #0
 80057ee:	b510      	push	{r4, lr}
 80057f0:	4604      	mov	r4, r0
 80057f2:	e9c0 3300 	strd	r3, r3, [r0]
 80057f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057fa:	6083      	str	r3, [r0, #8]
 80057fc:	8181      	strh	r1, [r0, #12]
 80057fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005800:	81c2      	strh	r2, [r0, #14]
 8005802:	6183      	str	r3, [r0, #24]
 8005804:	4619      	mov	r1, r3
 8005806:	2208      	movs	r2, #8
 8005808:	305c      	adds	r0, #92	@ 0x5c
 800580a:	f000 fa4a 	bl	8005ca2 <memset>
 800580e:	4b0d      	ldr	r3, [pc, #52]	@ (8005844 <std+0x58>)
 8005810:	6263      	str	r3, [r4, #36]	@ 0x24
 8005812:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <std+0x5c>)
 8005814:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005816:	4b0d      	ldr	r3, [pc, #52]	@ (800584c <std+0x60>)
 8005818:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <std+0x64>)
 800581c:	6323      	str	r3, [r4, #48]	@ 0x30
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <std+0x68>)
 8005820:	6224      	str	r4, [r4, #32]
 8005822:	429c      	cmp	r4, r3
 8005824:	d006      	beq.n	8005834 <std+0x48>
 8005826:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800582a:	4294      	cmp	r4, r2
 800582c:	d002      	beq.n	8005834 <std+0x48>
 800582e:	33d0      	adds	r3, #208	@ 0xd0
 8005830:	429c      	cmp	r4, r3
 8005832:	d105      	bne.n	8005840 <std+0x54>
 8005834:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800583c:	f000 baae 	b.w	8005d9c <__retarget_lock_init_recursive>
 8005840:	bd10      	pop	{r4, pc}
 8005842:	bf00      	nop
 8005844:	08005c1d 	.word	0x08005c1d
 8005848:	08005c3f 	.word	0x08005c3f
 800584c:	08005c77 	.word	0x08005c77
 8005850:	08005c9b 	.word	0x08005c9b
 8005854:	200003ec 	.word	0x200003ec

08005858 <stdio_exit_handler>:
 8005858:	4a02      	ldr	r2, [pc, #8]	@ (8005864 <stdio_exit_handler+0xc>)
 800585a:	4903      	ldr	r1, [pc, #12]	@ (8005868 <stdio_exit_handler+0x10>)
 800585c:	4803      	ldr	r0, [pc, #12]	@ (800586c <stdio_exit_handler+0x14>)
 800585e:	f000 b869 	b.w	8005934 <_fwalk_sglue>
 8005862:	bf00      	nop
 8005864:	20000010 	.word	0x20000010
 8005868:	0800868d 	.word	0x0800868d
 800586c:	20000020 	.word	0x20000020

08005870 <cleanup_stdio>:
 8005870:	6841      	ldr	r1, [r0, #4]
 8005872:	4b0c      	ldr	r3, [pc, #48]	@ (80058a4 <cleanup_stdio+0x34>)
 8005874:	4299      	cmp	r1, r3
 8005876:	b510      	push	{r4, lr}
 8005878:	4604      	mov	r4, r0
 800587a:	d001      	beq.n	8005880 <cleanup_stdio+0x10>
 800587c:	f002 ff06 	bl	800868c <_fflush_r>
 8005880:	68a1      	ldr	r1, [r4, #8]
 8005882:	4b09      	ldr	r3, [pc, #36]	@ (80058a8 <cleanup_stdio+0x38>)
 8005884:	4299      	cmp	r1, r3
 8005886:	d002      	beq.n	800588e <cleanup_stdio+0x1e>
 8005888:	4620      	mov	r0, r4
 800588a:	f002 feff 	bl	800868c <_fflush_r>
 800588e:	68e1      	ldr	r1, [r4, #12]
 8005890:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <cleanup_stdio+0x3c>)
 8005892:	4299      	cmp	r1, r3
 8005894:	d004      	beq.n	80058a0 <cleanup_stdio+0x30>
 8005896:	4620      	mov	r0, r4
 8005898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800589c:	f002 bef6 	b.w	800868c <_fflush_r>
 80058a0:	bd10      	pop	{r4, pc}
 80058a2:	bf00      	nop
 80058a4:	200003ec 	.word	0x200003ec
 80058a8:	20000454 	.word	0x20000454
 80058ac:	200004bc 	.word	0x200004bc

080058b0 <global_stdio_init.part.0>:
 80058b0:	b510      	push	{r4, lr}
 80058b2:	4b0b      	ldr	r3, [pc, #44]	@ (80058e0 <global_stdio_init.part.0+0x30>)
 80058b4:	4c0b      	ldr	r4, [pc, #44]	@ (80058e4 <global_stdio_init.part.0+0x34>)
 80058b6:	4a0c      	ldr	r2, [pc, #48]	@ (80058e8 <global_stdio_init.part.0+0x38>)
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	4620      	mov	r0, r4
 80058bc:	2200      	movs	r2, #0
 80058be:	2104      	movs	r1, #4
 80058c0:	f7ff ff94 	bl	80057ec <std>
 80058c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058c8:	2201      	movs	r2, #1
 80058ca:	2109      	movs	r1, #9
 80058cc:	f7ff ff8e 	bl	80057ec <std>
 80058d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058d4:	2202      	movs	r2, #2
 80058d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058da:	2112      	movs	r1, #18
 80058dc:	f7ff bf86 	b.w	80057ec <std>
 80058e0:	20000524 	.word	0x20000524
 80058e4:	200003ec 	.word	0x200003ec
 80058e8:	08005859 	.word	0x08005859

080058ec <__sfp_lock_acquire>:
 80058ec:	4801      	ldr	r0, [pc, #4]	@ (80058f4 <__sfp_lock_acquire+0x8>)
 80058ee:	f000 ba56 	b.w	8005d9e <__retarget_lock_acquire_recursive>
 80058f2:	bf00      	nop
 80058f4:	2000052d 	.word	0x2000052d

080058f8 <__sfp_lock_release>:
 80058f8:	4801      	ldr	r0, [pc, #4]	@ (8005900 <__sfp_lock_release+0x8>)
 80058fa:	f000 ba51 	b.w	8005da0 <__retarget_lock_release_recursive>
 80058fe:	bf00      	nop
 8005900:	2000052d 	.word	0x2000052d

08005904 <__sinit>:
 8005904:	b510      	push	{r4, lr}
 8005906:	4604      	mov	r4, r0
 8005908:	f7ff fff0 	bl	80058ec <__sfp_lock_acquire>
 800590c:	6a23      	ldr	r3, [r4, #32]
 800590e:	b11b      	cbz	r3, 8005918 <__sinit+0x14>
 8005910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005914:	f7ff bff0 	b.w	80058f8 <__sfp_lock_release>
 8005918:	4b04      	ldr	r3, [pc, #16]	@ (800592c <__sinit+0x28>)
 800591a:	6223      	str	r3, [r4, #32]
 800591c:	4b04      	ldr	r3, [pc, #16]	@ (8005930 <__sinit+0x2c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1f5      	bne.n	8005910 <__sinit+0xc>
 8005924:	f7ff ffc4 	bl	80058b0 <global_stdio_init.part.0>
 8005928:	e7f2      	b.n	8005910 <__sinit+0xc>
 800592a:	bf00      	nop
 800592c:	08005871 	.word	0x08005871
 8005930:	20000524 	.word	0x20000524

08005934 <_fwalk_sglue>:
 8005934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005938:	4607      	mov	r7, r0
 800593a:	4688      	mov	r8, r1
 800593c:	4614      	mov	r4, r2
 800593e:	2600      	movs	r6, #0
 8005940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005944:	f1b9 0901 	subs.w	r9, r9, #1
 8005948:	d505      	bpl.n	8005956 <_fwalk_sglue+0x22>
 800594a:	6824      	ldr	r4, [r4, #0]
 800594c:	2c00      	cmp	r4, #0
 800594e:	d1f7      	bne.n	8005940 <_fwalk_sglue+0xc>
 8005950:	4630      	mov	r0, r6
 8005952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005956:	89ab      	ldrh	r3, [r5, #12]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d907      	bls.n	800596c <_fwalk_sglue+0x38>
 800595c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005960:	3301      	adds	r3, #1
 8005962:	d003      	beq.n	800596c <_fwalk_sglue+0x38>
 8005964:	4629      	mov	r1, r5
 8005966:	4638      	mov	r0, r7
 8005968:	47c0      	blx	r8
 800596a:	4306      	orrs	r6, r0
 800596c:	3568      	adds	r5, #104	@ 0x68
 800596e:	e7e9      	b.n	8005944 <_fwalk_sglue+0x10>

08005970 <lflush>:
 8005970:	898b      	ldrh	r3, [r1, #12]
 8005972:	f003 0309 	and.w	r3, r3, #9
 8005976:	2b09      	cmp	r3, #9
 8005978:	d103      	bne.n	8005982 <lflush+0x12>
 800597a:	4b03      	ldr	r3, [pc, #12]	@ (8005988 <lflush+0x18>)
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	f002 be85 	b.w	800868c <_fflush_r>
 8005982:	2000      	movs	r0, #0
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	2000001c 	.word	0x2000001c

0800598c <__srefill_r>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	460c      	mov	r4, r1
 8005990:	4605      	mov	r5, r0
 8005992:	b118      	cbz	r0, 800599c <__srefill_r+0x10>
 8005994:	6a03      	ldr	r3, [r0, #32]
 8005996:	b90b      	cbnz	r3, 800599c <__srefill_r+0x10>
 8005998:	f7ff ffb4 	bl	8005904 <__sinit>
 800599c:	2300      	movs	r3, #0
 800599e:	6063      	str	r3, [r4, #4]
 80059a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a4:	069e      	lsls	r6, r3, #26
 80059a6:	d408      	bmi.n	80059ba <__srefill_r+0x2e>
 80059a8:	0758      	lsls	r0, r3, #29
 80059aa:	d445      	bmi.n	8005a38 <__srefill_r+0xac>
 80059ac:	06d9      	lsls	r1, r3, #27
 80059ae:	d407      	bmi.n	80059c0 <__srefill_r+0x34>
 80059b0:	2209      	movs	r2, #9
 80059b2:	602a      	str	r2, [r5, #0]
 80059b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	071a      	lsls	r2, r3, #28
 80059c2:	d50b      	bpl.n	80059dc <__srefill_r+0x50>
 80059c4:	4621      	mov	r1, r4
 80059c6:	4628      	mov	r0, r5
 80059c8:	f002 fe60 	bl	800868c <_fflush_r>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d1f4      	bne.n	80059ba <__srefill_r+0x2e>
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	60a0      	str	r0, [r4, #8]
 80059d4:	f023 0308 	bic.w	r3, r3, #8
 80059d8:	81a3      	strh	r3, [r4, #12]
 80059da:	61a0      	str	r0, [r4, #24]
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	f043 0304 	orr.w	r3, r3, #4
 80059e2:	81a3      	strh	r3, [r4, #12]
 80059e4:	6923      	ldr	r3, [r4, #16]
 80059e6:	b91b      	cbnz	r3, 80059f0 <__srefill_r+0x64>
 80059e8:	4621      	mov	r1, r4
 80059ea:	4628      	mov	r0, r5
 80059ec:	f002 fe9c 	bl	8008728 <__smakebuf_r>
 80059f0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80059f4:	07b3      	lsls	r3, r6, #30
 80059f6:	d00f      	beq.n	8005a18 <__srefill_r+0x8c>
 80059f8:	2301      	movs	r3, #1
 80059fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005a68 <__srefill_r+0xdc>)
 80059fc:	491b      	ldr	r1, [pc, #108]	@ (8005a6c <__srefill_r+0xe0>)
 80059fe:	481c      	ldr	r0, [pc, #112]	@ (8005a70 <__srefill_r+0xe4>)
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	f7ff ff97 	bl	8005934 <_fwalk_sglue>
 8005a06:	81a6      	strh	r6, [r4, #12]
 8005a08:	f006 0609 	and.w	r6, r6, #9
 8005a0c:	2e09      	cmp	r6, #9
 8005a0e:	d103      	bne.n	8005a18 <__srefill_r+0x8c>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4628      	mov	r0, r5
 8005a14:	f002 fdb6 	bl	8008584 <__sflush_r>
 8005a18:	6922      	ldr	r2, [r4, #16]
 8005a1a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8005a1c:	6963      	ldr	r3, [r4, #20]
 8005a1e:	6a21      	ldr	r1, [r4, #32]
 8005a20:	6022      	str	r2, [r4, #0]
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b0      	blx	r6
 8005a26:	2800      	cmp	r0, #0
 8005a28:	6060      	str	r0, [r4, #4]
 8005a2a:	dc17      	bgt.n	8005a5c <__srefill_r+0xd0>
 8005a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a30:	d116      	bne.n	8005a60 <__srefill_r+0xd4>
 8005a32:	f043 0320 	orr.w	r3, r3, #32
 8005a36:	e7bf      	b.n	80059b8 <__srefill_r+0x2c>
 8005a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a3a:	2900      	cmp	r1, #0
 8005a3c:	d0d2      	beq.n	80059e4 <__srefill_r+0x58>
 8005a3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a42:	4299      	cmp	r1, r3
 8005a44:	d002      	beq.n	8005a4c <__srefill_r+0xc0>
 8005a46:	4628      	mov	r0, r5
 8005a48:	f001 f80e 	bl	8006a68 <_free_r>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a52:	6063      	str	r3, [r4, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0c5      	beq.n	80059e4 <__srefill_r+0x58>
 8005a58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	e7ae      	b.n	80059be <__srefill_r+0x32>
 8005a60:	2200      	movs	r2, #0
 8005a62:	6062      	str	r2, [r4, #4]
 8005a64:	e7a6      	b.n	80059b4 <__srefill_r+0x28>
 8005a66:	bf00      	nop
 8005a68:	20000010 	.word	0x20000010
 8005a6c:	08005971 	.word	0x08005971
 8005a70:	20000020 	.word	0x20000020

08005a74 <setvbuf>:
 8005a74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a78:	461d      	mov	r5, r3
 8005a7a:	4b57      	ldr	r3, [pc, #348]	@ (8005bd8 <setvbuf+0x164>)
 8005a7c:	681f      	ldr	r7, [r3, #0]
 8005a7e:	4604      	mov	r4, r0
 8005a80:	460e      	mov	r6, r1
 8005a82:	4690      	mov	r8, r2
 8005a84:	b127      	cbz	r7, 8005a90 <setvbuf+0x1c>
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	b913      	cbnz	r3, 8005a90 <setvbuf+0x1c>
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f7ff ff3a 	bl	8005904 <__sinit>
 8005a90:	f1b8 0f02 	cmp.w	r8, #2
 8005a94:	d006      	beq.n	8005aa4 <setvbuf+0x30>
 8005a96:	f1b8 0f01 	cmp.w	r8, #1
 8005a9a:	f200 809a 	bhi.w	8005bd2 <setvbuf+0x15e>
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	f2c0 8097 	blt.w	8005bd2 <setvbuf+0x15e>
 8005aa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005aa6:	07d9      	lsls	r1, r3, #31
 8005aa8:	d405      	bmi.n	8005ab6 <setvbuf+0x42>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	059a      	lsls	r2, r3, #22
 8005aae:	d402      	bmi.n	8005ab6 <setvbuf+0x42>
 8005ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ab2:	f000 f974 	bl	8005d9e <__retarget_lock_acquire_recursive>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f002 fde7 	bl	800868c <_fflush_r>
 8005abe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ac0:	b141      	cbz	r1, 8005ad4 <setvbuf+0x60>
 8005ac2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	d002      	beq.n	8005ad0 <setvbuf+0x5c>
 8005aca:	4638      	mov	r0, r7
 8005acc:	f000 ffcc 	bl	8006a68 <_free_r>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61a3      	str	r3, [r4, #24]
 8005ad8:	6063      	str	r3, [r4, #4]
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	061b      	lsls	r3, r3, #24
 8005ade:	d503      	bpl.n	8005ae8 <setvbuf+0x74>
 8005ae0:	6921      	ldr	r1, [r4, #16]
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	f000 ffc0 	bl	8006a68 <_free_r>
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	f1b8 0f02 	cmp.w	r8, #2
 8005af6:	81a3      	strh	r3, [r4, #12]
 8005af8:	d061      	beq.n	8005bbe <setvbuf+0x14a>
 8005afa:	ab01      	add	r3, sp, #4
 8005afc:	466a      	mov	r2, sp
 8005afe:	4621      	mov	r1, r4
 8005b00:	4638      	mov	r0, r7
 8005b02:	f002 fdeb 	bl	80086dc <__swhatbuf_r>
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	4318      	orrs	r0, r3
 8005b0a:	81a0      	strh	r0, [r4, #12]
 8005b0c:	bb2d      	cbnz	r5, 8005b5a <setvbuf+0xe6>
 8005b0e:	9d00      	ldr	r5, [sp, #0]
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 fff3 	bl	8006afc <malloc>
 8005b16:	4606      	mov	r6, r0
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d152      	bne.n	8005bc2 <setvbuf+0x14e>
 8005b1c:	f8dd 9000 	ldr.w	r9, [sp]
 8005b20:	45a9      	cmp	r9, r5
 8005b22:	d140      	bne.n	8005ba6 <setvbuf+0x132>
 8005b24:	f04f 35ff 	mov.w	r5, #4294967295
 8005b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b2c:	f043 0202 	orr.w	r2, r3, #2
 8005b30:	81a2      	strh	r2, [r4, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	60a2      	str	r2, [r4, #8]
 8005b36:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005b3a:	6022      	str	r2, [r4, #0]
 8005b3c:	6122      	str	r2, [r4, #16]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	6162      	str	r2, [r4, #20]
 8005b42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b44:	07d6      	lsls	r6, r2, #31
 8005b46:	d404      	bmi.n	8005b52 <setvbuf+0xde>
 8005b48:	0598      	lsls	r0, r3, #22
 8005b4a:	d402      	bmi.n	8005b52 <setvbuf+0xde>
 8005b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b4e:	f000 f927 	bl	8005da0 <__retarget_lock_release_recursive>
 8005b52:	4628      	mov	r0, r5
 8005b54:	b003      	add	sp, #12
 8005b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	d0d8      	beq.n	8005b10 <setvbuf+0x9c>
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	b913      	cbnz	r3, 8005b68 <setvbuf+0xf4>
 8005b62:	4638      	mov	r0, r7
 8005b64:	f7ff fece 	bl	8005904 <__sinit>
 8005b68:	f1b8 0f01 	cmp.w	r8, #1
 8005b6c:	bf08      	it	eq
 8005b6e:	89a3      	ldrheq	r3, [r4, #12]
 8005b70:	6026      	str	r6, [r4, #0]
 8005b72:	bf04      	itt	eq
 8005b74:	f043 0301 	orreq.w	r3, r3, #1
 8005b78:	81a3      	strheq	r3, [r4, #12]
 8005b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b7e:	f013 0208 	ands.w	r2, r3, #8
 8005b82:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005b86:	d01e      	beq.n	8005bc6 <setvbuf+0x152>
 8005b88:	07d9      	lsls	r1, r3, #31
 8005b8a:	bf41      	itttt	mi
 8005b8c:	2200      	movmi	r2, #0
 8005b8e:	426d      	negmi	r5, r5
 8005b90:	60a2      	strmi	r2, [r4, #8]
 8005b92:	61a5      	strmi	r5, [r4, #24]
 8005b94:	bf58      	it	pl
 8005b96:	60a5      	strpl	r5, [r4, #8]
 8005b98:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b9a:	07d2      	lsls	r2, r2, #31
 8005b9c:	d401      	bmi.n	8005ba2 <setvbuf+0x12e>
 8005b9e:	059b      	lsls	r3, r3, #22
 8005ba0:	d513      	bpl.n	8005bca <setvbuf+0x156>
 8005ba2:	2500      	movs	r5, #0
 8005ba4:	e7d5      	b.n	8005b52 <setvbuf+0xde>
 8005ba6:	4648      	mov	r0, r9
 8005ba8:	f000 ffa8 	bl	8006afc <malloc>
 8005bac:	4606      	mov	r6, r0
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d0b8      	beq.n	8005b24 <setvbuf+0xb0>
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	464d      	mov	r5, r9
 8005bbc:	e7cf      	b.n	8005b5e <setvbuf+0xea>
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	e7b2      	b.n	8005b28 <setvbuf+0xb4>
 8005bc2:	46a9      	mov	r9, r5
 8005bc4:	e7f5      	b.n	8005bb2 <setvbuf+0x13e>
 8005bc6:	60a2      	str	r2, [r4, #8]
 8005bc8:	e7e6      	b.n	8005b98 <setvbuf+0x124>
 8005bca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bcc:	f000 f8e8 	bl	8005da0 <__retarget_lock_release_recursive>
 8005bd0:	e7e7      	b.n	8005ba2 <setvbuf+0x12e>
 8005bd2:	f04f 35ff 	mov.w	r5, #4294967295
 8005bd6:	e7bc      	b.n	8005b52 <setvbuf+0xde>
 8005bd8:	2000001c 	.word	0x2000001c

08005bdc <siprintf>:
 8005bdc:	b40e      	push	{r1, r2, r3}
 8005bde:	b500      	push	{lr}
 8005be0:	b09c      	sub	sp, #112	@ 0x70
 8005be2:	ab1d      	add	r3, sp, #116	@ 0x74
 8005be4:	9002      	str	r0, [sp, #8]
 8005be6:	9006      	str	r0, [sp, #24]
 8005be8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005bec:	4809      	ldr	r0, [pc, #36]	@ (8005c14 <siprintf+0x38>)
 8005bee:	9107      	str	r1, [sp, #28]
 8005bf0:	9104      	str	r1, [sp, #16]
 8005bf2:	4909      	ldr	r1, [pc, #36]	@ (8005c18 <siprintf+0x3c>)
 8005bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bf8:	9105      	str	r1, [sp, #20]
 8005bfa:	6800      	ldr	r0, [r0, #0]
 8005bfc:	9301      	str	r3, [sp, #4]
 8005bfe:	a902      	add	r1, sp, #8
 8005c00:	f002 fbc4 	bl	800838c <_svfiprintf_r>
 8005c04:	9b02      	ldr	r3, [sp, #8]
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	b01c      	add	sp, #112	@ 0x70
 8005c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c10:	b003      	add	sp, #12
 8005c12:	4770      	bx	lr
 8005c14:	2000001c 	.word	0x2000001c
 8005c18:	ffff0208 	.word	0xffff0208

08005c1c <__sread>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	460c      	mov	r4, r1
 8005c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c24:	f000 f86c 	bl	8005d00 <_read_r>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	bfab      	itete	ge
 8005c2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c30:	181b      	addge	r3, r3, r0
 8005c32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c36:	bfac      	ite	ge
 8005c38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c3a:	81a3      	strhlt	r3, [r4, #12]
 8005c3c:	bd10      	pop	{r4, pc}

08005c3e <__swrite>:
 8005c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c42:	461f      	mov	r7, r3
 8005c44:	898b      	ldrh	r3, [r1, #12]
 8005c46:	05db      	lsls	r3, r3, #23
 8005c48:	4605      	mov	r5, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	d505      	bpl.n	8005c5c <__swrite+0x1e>
 8005c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c54:	2302      	movs	r3, #2
 8005c56:	2200      	movs	r2, #0
 8005c58:	f000 f840 	bl	8005cdc <_lseek_r>
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c66:	81a3      	strh	r3, [r4, #12]
 8005c68:	4632      	mov	r2, r6
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c72:	f000 b857 	b.w	8005d24 <_write_r>

08005c76 <__sseek>:
 8005c76:	b510      	push	{r4, lr}
 8005c78:	460c      	mov	r4, r1
 8005c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7e:	f000 f82d 	bl	8005cdc <_lseek_r>
 8005c82:	1c43      	adds	r3, r0, #1
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	bf15      	itete	ne
 8005c88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c92:	81a3      	strheq	r3, [r4, #12]
 8005c94:	bf18      	it	ne
 8005c96:	81a3      	strhne	r3, [r4, #12]
 8005c98:	bd10      	pop	{r4, pc}

08005c9a <__sclose>:
 8005c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9e:	f000 b80d 	b.w	8005cbc <_close_r>

08005ca2 <memset>:
 8005ca2:	4402      	add	r2, r0
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d100      	bne.n	8005cac <memset+0xa>
 8005caa:	4770      	bx	lr
 8005cac:	f803 1b01 	strb.w	r1, [r3], #1
 8005cb0:	e7f9      	b.n	8005ca6 <memset+0x4>
	...

08005cb4 <_localeconv_r>:
 8005cb4:	4800      	ldr	r0, [pc, #0]	@ (8005cb8 <_localeconv_r+0x4>)
 8005cb6:	4770      	bx	lr
 8005cb8:	2000015c 	.word	0x2000015c

08005cbc <_close_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4d06      	ldr	r5, [pc, #24]	@ (8005cd8 <_close_r+0x1c>)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	f7fb fe14 	bl	80018f4 <_close>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_close_r+0x1a>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_close_r+0x1a>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	20000528 	.word	0x20000528

08005cdc <_lseek_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4d07      	ldr	r5, [pc, #28]	@ (8005cfc <_lseek_r+0x20>)
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	4608      	mov	r0, r1
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	602a      	str	r2, [r5, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	f7fb fe29 	bl	8001942 <_lseek>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_lseek_r+0x1e>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_lseek_r+0x1e>
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	20000528 	.word	0x20000528

08005d00 <_read_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d07      	ldr	r5, [pc, #28]	@ (8005d20 <_read_r+0x20>)
 8005d04:	4604      	mov	r4, r0
 8005d06:	4608      	mov	r0, r1
 8005d08:	4611      	mov	r1, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	602a      	str	r2, [r5, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f7fb fdb7 	bl	8001882 <_read>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_read_r+0x1e>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_read_r+0x1e>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	20000528 	.word	0x20000528

08005d24 <_write_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	@ (8005d44 <_write_r+0x20>)
 8005d28:	4604      	mov	r4, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	602a      	str	r2, [r5, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fb fdc2 	bl	80018bc <_write>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_write_r+0x1e>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_write_r+0x1e>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	20000528 	.word	0x20000528

08005d48 <__errno>:
 8005d48:	4b01      	ldr	r3, [pc, #4]	@ (8005d50 <__errno+0x8>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	2000001c 	.word	0x2000001c

08005d54 <__libc_init_array>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	4d0d      	ldr	r5, [pc, #52]	@ (8005d8c <__libc_init_array+0x38>)
 8005d58:	4c0d      	ldr	r4, [pc, #52]	@ (8005d90 <__libc_init_array+0x3c>)
 8005d5a:	1b64      	subs	r4, r4, r5
 8005d5c:	10a4      	asrs	r4, r4, #2
 8005d5e:	2600      	movs	r6, #0
 8005d60:	42a6      	cmp	r6, r4
 8005d62:	d109      	bne.n	8005d78 <__libc_init_array+0x24>
 8005d64:	4d0b      	ldr	r5, [pc, #44]	@ (8005d94 <__libc_init_array+0x40>)
 8005d66:	4c0c      	ldr	r4, [pc, #48]	@ (8005d98 <__libc_init_array+0x44>)
 8005d68:	f003 fb74 	bl	8009454 <_init>
 8005d6c:	1b64      	subs	r4, r4, r5
 8005d6e:	10a4      	asrs	r4, r4, #2
 8005d70:	2600      	movs	r6, #0
 8005d72:	42a6      	cmp	r6, r4
 8005d74:	d105      	bne.n	8005d82 <__libc_init_array+0x2e>
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7c:	4798      	blx	r3
 8005d7e:	3601      	adds	r6, #1
 8005d80:	e7ee      	b.n	8005d60 <__libc_init_array+0xc>
 8005d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d86:	4798      	blx	r3
 8005d88:	3601      	adds	r6, #1
 8005d8a:	e7f2      	b.n	8005d72 <__libc_init_array+0x1e>
 8005d8c:	080098c0 	.word	0x080098c0
 8005d90:	080098c0 	.word	0x080098c0
 8005d94:	080098c0 	.word	0x080098c0
 8005d98:	080098c4 	.word	0x080098c4

08005d9c <__retarget_lock_init_recursive>:
 8005d9c:	4770      	bx	lr

08005d9e <__retarget_lock_acquire_recursive>:
 8005d9e:	4770      	bx	lr

08005da0 <__retarget_lock_release_recursive>:
 8005da0:	4770      	bx	lr

08005da2 <memcpy>:
 8005da2:	440a      	add	r2, r1
 8005da4:	4291      	cmp	r1, r2
 8005da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8005daa:	d100      	bne.n	8005dae <memcpy+0xc>
 8005dac:	4770      	bx	lr
 8005dae:	b510      	push	{r4, lr}
 8005db0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005db4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005db8:	4291      	cmp	r1, r2
 8005dba:	d1f9      	bne.n	8005db0 <memcpy+0xe>
 8005dbc:	bd10      	pop	{r4, pc}
	...

08005dc0 <nanf>:
 8005dc0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005dc8 <nanf+0x8>
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	7fc00000 	.word	0x7fc00000

08005dcc <quorem>:
 8005dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd0:	6903      	ldr	r3, [r0, #16]
 8005dd2:	690c      	ldr	r4, [r1, #16]
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	4607      	mov	r7, r0
 8005dd8:	db7e      	blt.n	8005ed8 <quorem+0x10c>
 8005dda:	3c01      	subs	r4, #1
 8005ddc:	f101 0814 	add.w	r8, r1, #20
 8005de0:	00a3      	lsls	r3, r4, #2
 8005de2:	f100 0514 	add.w	r5, r0, #20
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005df2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005df6:	3301      	adds	r3, #1
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dfe:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e02:	d32e      	bcc.n	8005e62 <quorem+0x96>
 8005e04:	f04f 0a00 	mov.w	sl, #0
 8005e08:	46c4      	mov	ip, r8
 8005e0a:	46ae      	mov	lr, r5
 8005e0c:	46d3      	mov	fp, sl
 8005e0e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e12:	b298      	uxth	r0, r3
 8005e14:	fb06 a000 	mla	r0, r6, r0, sl
 8005e18:	0c02      	lsrs	r2, r0, #16
 8005e1a:	0c1b      	lsrs	r3, r3, #16
 8005e1c:	fb06 2303 	mla	r3, r6, r3, r2
 8005e20:	f8de 2000 	ldr.w	r2, [lr]
 8005e24:	b280      	uxth	r0, r0
 8005e26:	b292      	uxth	r2, r2
 8005e28:	1a12      	subs	r2, r2, r0
 8005e2a:	445a      	add	r2, fp
 8005e2c:	f8de 0000 	ldr.w	r0, [lr]
 8005e30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e3a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e3e:	b292      	uxth	r2, r2
 8005e40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e44:	45e1      	cmp	r9, ip
 8005e46:	f84e 2b04 	str.w	r2, [lr], #4
 8005e4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e4e:	d2de      	bcs.n	8005e0e <quorem+0x42>
 8005e50:	9b00      	ldr	r3, [sp, #0]
 8005e52:	58eb      	ldr	r3, [r5, r3]
 8005e54:	b92b      	cbnz	r3, 8005e62 <quorem+0x96>
 8005e56:	9b01      	ldr	r3, [sp, #4]
 8005e58:	3b04      	subs	r3, #4
 8005e5a:	429d      	cmp	r5, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	d32f      	bcc.n	8005ec0 <quorem+0xf4>
 8005e60:	613c      	str	r4, [r7, #16]
 8005e62:	4638      	mov	r0, r7
 8005e64:	f001 f9c4 	bl	80071f0 <__mcmp>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	db25      	blt.n	8005eb8 <quorem+0xec>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e74:	f8d1 c000 	ldr.w	ip, [r1]
 8005e78:	fa1f fe82 	uxth.w	lr, r2
 8005e7c:	fa1f f38c 	uxth.w	r3, ip
 8005e80:	eba3 030e 	sub.w	r3, r3, lr
 8005e84:	4403      	add	r3, r0
 8005e86:	0c12      	lsrs	r2, r2, #16
 8005e88:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e8c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e96:	45c1      	cmp	r9, r8
 8005e98:	f841 3b04 	str.w	r3, [r1], #4
 8005e9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ea0:	d2e6      	bcs.n	8005e70 <quorem+0xa4>
 8005ea2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eaa:	b922      	cbnz	r2, 8005eb6 <quorem+0xea>
 8005eac:	3b04      	subs	r3, #4
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	d30b      	bcc.n	8005ecc <quorem+0x100>
 8005eb4:	613c      	str	r4, [r7, #16]
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	4630      	mov	r0, r6
 8005eba:	b003      	add	sp, #12
 8005ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	3b04      	subs	r3, #4
 8005ec4:	2a00      	cmp	r2, #0
 8005ec6:	d1cb      	bne.n	8005e60 <quorem+0x94>
 8005ec8:	3c01      	subs	r4, #1
 8005eca:	e7c6      	b.n	8005e5a <quorem+0x8e>
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	3b04      	subs	r3, #4
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	d1ef      	bne.n	8005eb4 <quorem+0xe8>
 8005ed4:	3c01      	subs	r4, #1
 8005ed6:	e7ea      	b.n	8005eae <quorem+0xe2>
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e7ee      	b.n	8005eba <quorem+0xee>
 8005edc:	0000      	movs	r0, r0
	...

08005ee0 <_dtoa_r>:
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	69c7      	ldr	r7, [r0, #28]
 8005ee6:	b099      	sub	sp, #100	@ 0x64
 8005ee8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005eec:	ec55 4b10 	vmov	r4, r5, d0
 8005ef0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005ef2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ef4:	4683      	mov	fp, r0
 8005ef6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ef8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005efa:	b97f      	cbnz	r7, 8005f1c <_dtoa_r+0x3c>
 8005efc:	2010      	movs	r0, #16
 8005efe:	f000 fdfd 	bl	8006afc <malloc>
 8005f02:	4602      	mov	r2, r0
 8005f04:	f8cb 001c 	str.w	r0, [fp, #28]
 8005f08:	b920      	cbnz	r0, 8005f14 <_dtoa_r+0x34>
 8005f0a:	4ba7      	ldr	r3, [pc, #668]	@ (80061a8 <_dtoa_r+0x2c8>)
 8005f0c:	21ef      	movs	r1, #239	@ 0xef
 8005f0e:	48a7      	ldr	r0, [pc, #668]	@ (80061ac <_dtoa_r+0x2cc>)
 8005f10:	f002 fcae 	bl	8008870 <__assert_func>
 8005f14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005f18:	6007      	str	r7, [r0, #0]
 8005f1a:	60c7      	str	r7, [r0, #12]
 8005f1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	b159      	cbz	r1, 8005f3c <_dtoa_r+0x5c>
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	604a      	str	r2, [r1, #4]
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4093      	lsls	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
 8005f2e:	4658      	mov	r0, fp
 8005f30:	f000 feda 	bl	8006ce8 <_Bfree>
 8005f34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	1e2b      	subs	r3, r5, #0
 8005f3e:	bfb9      	ittee	lt
 8005f40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f44:	9303      	strlt	r3, [sp, #12]
 8005f46:	2300      	movge	r3, #0
 8005f48:	6033      	strge	r3, [r6, #0]
 8005f4a:	9f03      	ldr	r7, [sp, #12]
 8005f4c:	4b98      	ldr	r3, [pc, #608]	@ (80061b0 <_dtoa_r+0x2d0>)
 8005f4e:	bfbc      	itt	lt
 8005f50:	2201      	movlt	r2, #1
 8005f52:	6032      	strlt	r2, [r6, #0]
 8005f54:	43bb      	bics	r3, r7
 8005f56:	d112      	bne.n	8005f7e <_dtoa_r+0x9e>
 8005f58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f64:	4323      	orrs	r3, r4
 8005f66:	f000 854d 	beq.w	8006a04 <_dtoa_r+0xb24>
 8005f6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80061c4 <_dtoa_r+0x2e4>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 854f 	beq.w	8006a14 <_dtoa_r+0xb34>
 8005f76:	f10a 0303 	add.w	r3, sl, #3
 8005f7a:	f000 bd49 	b.w	8006a10 <_dtoa_r+0xb30>
 8005f7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f82:	2200      	movs	r2, #0
 8005f84:	ec51 0b17 	vmov	r0, r1, d7
 8005f88:	2300      	movs	r3, #0
 8005f8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005f8e:	f7fa fda3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f92:	4680      	mov	r8, r0
 8005f94:	b158      	cbz	r0, 8005fae <_dtoa_r+0xce>
 8005f96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f98:	2301      	movs	r3, #1
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f9e:	b113      	cbz	r3, 8005fa6 <_dtoa_r+0xc6>
 8005fa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005fa2:	4b84      	ldr	r3, [pc, #528]	@ (80061b4 <_dtoa_r+0x2d4>)
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80061c8 <_dtoa_r+0x2e8>
 8005faa:	f000 bd33 	b.w	8006a14 <_dtoa_r+0xb34>
 8005fae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005fb2:	aa16      	add	r2, sp, #88	@ 0x58
 8005fb4:	a917      	add	r1, sp, #92	@ 0x5c
 8005fb6:	4658      	mov	r0, fp
 8005fb8:	f001 fa3a 	bl	8007430 <__d2b>
 8005fbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005fc0:	4681      	mov	r9, r0
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	d077      	beq.n	80060b6 <_dtoa_r+0x1d6>
 8005fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005fd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005fdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4b74      	ldr	r3, [pc, #464]	@ (80061b8 <_dtoa_r+0x2d8>)
 8005fe6:	f7fa f957 	bl	8000298 <__aeabi_dsub>
 8005fea:	a369      	add	r3, pc, #420	@ (adr r3, 8006190 <_dtoa_r+0x2b0>)
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f7fa fb0a 	bl	8000608 <__aeabi_dmul>
 8005ff4:	a368      	add	r3, pc, #416	@ (adr r3, 8006198 <_dtoa_r+0x2b8>)
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	f7fa f94f 	bl	800029c <__adddf3>
 8005ffe:	4604      	mov	r4, r0
 8006000:	4630      	mov	r0, r6
 8006002:	460d      	mov	r5, r1
 8006004:	f7fa fa96 	bl	8000534 <__aeabi_i2d>
 8006008:	a365      	add	r3, pc, #404	@ (adr r3, 80061a0 <_dtoa_r+0x2c0>)
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	f7fa fafb 	bl	8000608 <__aeabi_dmul>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa f93f 	bl	800029c <__adddf3>
 800601e:	4604      	mov	r4, r0
 8006020:	460d      	mov	r5, r1
 8006022:	f7fa fda1 	bl	8000b68 <__aeabi_d2iz>
 8006026:	2200      	movs	r2, #0
 8006028:	4607      	mov	r7, r0
 800602a:	2300      	movs	r3, #0
 800602c:	4620      	mov	r0, r4
 800602e:	4629      	mov	r1, r5
 8006030:	f7fa fd5c 	bl	8000aec <__aeabi_dcmplt>
 8006034:	b140      	cbz	r0, 8006048 <_dtoa_r+0x168>
 8006036:	4638      	mov	r0, r7
 8006038:	f7fa fa7c 	bl	8000534 <__aeabi_i2d>
 800603c:	4622      	mov	r2, r4
 800603e:	462b      	mov	r3, r5
 8006040:	f7fa fd4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006044:	b900      	cbnz	r0, 8006048 <_dtoa_r+0x168>
 8006046:	3f01      	subs	r7, #1
 8006048:	2f16      	cmp	r7, #22
 800604a:	d851      	bhi.n	80060f0 <_dtoa_r+0x210>
 800604c:	4b5b      	ldr	r3, [pc, #364]	@ (80061bc <_dtoa_r+0x2dc>)
 800604e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800605a:	f7fa fd47 	bl	8000aec <__aeabi_dcmplt>
 800605e:	2800      	cmp	r0, #0
 8006060:	d048      	beq.n	80060f4 <_dtoa_r+0x214>
 8006062:	3f01      	subs	r7, #1
 8006064:	2300      	movs	r3, #0
 8006066:	9312      	str	r3, [sp, #72]	@ 0x48
 8006068:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800606a:	1b9b      	subs	r3, r3, r6
 800606c:	1e5a      	subs	r2, r3, #1
 800606e:	bf44      	itt	mi
 8006070:	f1c3 0801 	rsbmi	r8, r3, #1
 8006074:	2300      	movmi	r3, #0
 8006076:	9208      	str	r2, [sp, #32]
 8006078:	bf54      	ite	pl
 800607a:	f04f 0800 	movpl.w	r8, #0
 800607e:	9308      	strmi	r3, [sp, #32]
 8006080:	2f00      	cmp	r7, #0
 8006082:	db39      	blt.n	80060f8 <_dtoa_r+0x218>
 8006084:	9b08      	ldr	r3, [sp, #32]
 8006086:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006088:	443b      	add	r3, r7
 800608a:	9308      	str	r3, [sp, #32]
 800608c:	2300      	movs	r3, #0
 800608e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006092:	2b09      	cmp	r3, #9
 8006094:	d864      	bhi.n	8006160 <_dtoa_r+0x280>
 8006096:	2b05      	cmp	r3, #5
 8006098:	bfc4      	itt	gt
 800609a:	3b04      	subgt	r3, #4
 800609c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800609e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a0:	f1a3 0302 	sub.w	r3, r3, #2
 80060a4:	bfcc      	ite	gt
 80060a6:	2400      	movgt	r4, #0
 80060a8:	2401      	movle	r4, #1
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d863      	bhi.n	8006176 <_dtoa_r+0x296>
 80060ae:	e8df f003 	tbb	[pc, r3]
 80060b2:	372a      	.short	0x372a
 80060b4:	5535      	.short	0x5535
 80060b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80060ba:	441e      	add	r6, r3
 80060bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	bfc1      	itttt	gt
 80060c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80060c8:	409f      	lslgt	r7, r3
 80060ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80060ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80060d2:	bfd6      	itet	le
 80060d4:	f1c3 0320 	rsble	r3, r3, #32
 80060d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80060dc:	fa04 f003 	lslle.w	r0, r4, r3
 80060e0:	f7fa fa18 	bl	8000514 <__aeabi_ui2d>
 80060e4:	2201      	movs	r2, #1
 80060e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80060ea:	3e01      	subs	r6, #1
 80060ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80060ee:	e777      	b.n	8005fe0 <_dtoa_r+0x100>
 80060f0:	2301      	movs	r3, #1
 80060f2:	e7b8      	b.n	8006066 <_dtoa_r+0x186>
 80060f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80060f6:	e7b7      	b.n	8006068 <_dtoa_r+0x188>
 80060f8:	427b      	negs	r3, r7
 80060fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80060fc:	2300      	movs	r3, #0
 80060fe:	eba8 0807 	sub.w	r8, r8, r7
 8006102:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006104:	e7c4      	b.n	8006090 <_dtoa_r+0x1b0>
 8006106:	2300      	movs	r3, #0
 8006108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800610a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800610c:	2b00      	cmp	r3, #0
 800610e:	dc35      	bgt.n	800617c <_dtoa_r+0x29c>
 8006110:	2301      	movs	r3, #1
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	9307      	str	r3, [sp, #28]
 8006116:	461a      	mov	r2, r3
 8006118:	920e      	str	r2, [sp, #56]	@ 0x38
 800611a:	e00b      	b.n	8006134 <_dtoa_r+0x254>
 800611c:	2301      	movs	r3, #1
 800611e:	e7f3      	b.n	8006108 <_dtoa_r+0x228>
 8006120:	2300      	movs	r3, #0
 8006122:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	2b01      	cmp	r3, #1
 800612e:	9307      	str	r3, [sp, #28]
 8006130:	bfb8      	it	lt
 8006132:	2301      	movlt	r3, #1
 8006134:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006138:	2100      	movs	r1, #0
 800613a:	2204      	movs	r2, #4
 800613c:	f102 0514 	add.w	r5, r2, #20
 8006140:	429d      	cmp	r5, r3
 8006142:	d91f      	bls.n	8006184 <_dtoa_r+0x2a4>
 8006144:	6041      	str	r1, [r0, #4]
 8006146:	4658      	mov	r0, fp
 8006148:	f000 fd8e 	bl	8006c68 <_Balloc>
 800614c:	4682      	mov	sl, r0
 800614e:	2800      	cmp	r0, #0
 8006150:	d13c      	bne.n	80061cc <_dtoa_r+0x2ec>
 8006152:	4b1b      	ldr	r3, [pc, #108]	@ (80061c0 <_dtoa_r+0x2e0>)
 8006154:	4602      	mov	r2, r0
 8006156:	f240 11af 	movw	r1, #431	@ 0x1af
 800615a:	e6d8      	b.n	8005f0e <_dtoa_r+0x2e>
 800615c:	2301      	movs	r3, #1
 800615e:	e7e0      	b.n	8006122 <_dtoa_r+0x242>
 8006160:	2401      	movs	r4, #1
 8006162:	2300      	movs	r3, #0
 8006164:	9309      	str	r3, [sp, #36]	@ 0x24
 8006166:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	9307      	str	r3, [sp, #28]
 8006170:	2200      	movs	r2, #0
 8006172:	2312      	movs	r3, #18
 8006174:	e7d0      	b.n	8006118 <_dtoa_r+0x238>
 8006176:	2301      	movs	r3, #1
 8006178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800617a:	e7f5      	b.n	8006168 <_dtoa_r+0x288>
 800617c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	9307      	str	r3, [sp, #28]
 8006182:	e7d7      	b.n	8006134 <_dtoa_r+0x254>
 8006184:	3101      	adds	r1, #1
 8006186:	0052      	lsls	r2, r2, #1
 8006188:	e7d8      	b.n	800613c <_dtoa_r+0x25c>
 800618a:	bf00      	nop
 800618c:	f3af 8000 	nop.w
 8006190:	636f4361 	.word	0x636f4361
 8006194:	3fd287a7 	.word	0x3fd287a7
 8006198:	8b60c8b3 	.word	0x8b60c8b3
 800619c:	3fc68a28 	.word	0x3fc68a28
 80061a0:	509f79fb 	.word	0x509f79fb
 80061a4:	3fd34413 	.word	0x3fd34413
 80061a8:	080094ce 	.word	0x080094ce
 80061ac:	080094e5 	.word	0x080094e5
 80061b0:	7ff00000 	.word	0x7ff00000
 80061b4:	08009499 	.word	0x08009499
 80061b8:	3ff80000 	.word	0x3ff80000
 80061bc:	080095e0 	.word	0x080095e0
 80061c0:	0800953d 	.word	0x0800953d
 80061c4:	080094ca 	.word	0x080094ca
 80061c8:	08009498 	.word	0x08009498
 80061cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061d0:	6018      	str	r0, [r3, #0]
 80061d2:	9b07      	ldr	r3, [sp, #28]
 80061d4:	2b0e      	cmp	r3, #14
 80061d6:	f200 80a4 	bhi.w	8006322 <_dtoa_r+0x442>
 80061da:	2c00      	cmp	r4, #0
 80061dc:	f000 80a1 	beq.w	8006322 <_dtoa_r+0x442>
 80061e0:	2f00      	cmp	r7, #0
 80061e2:	dd33      	ble.n	800624c <_dtoa_r+0x36c>
 80061e4:	4bad      	ldr	r3, [pc, #692]	@ (800649c <_dtoa_r+0x5bc>)
 80061e6:	f007 020f 	and.w	r2, r7, #15
 80061ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ee:	ed93 7b00 	vldr	d7, [r3]
 80061f2:	05f8      	lsls	r0, r7, #23
 80061f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80061f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80061fc:	d516      	bpl.n	800622c <_dtoa_r+0x34c>
 80061fe:	4ba8      	ldr	r3, [pc, #672]	@ (80064a0 <_dtoa_r+0x5c0>)
 8006200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006204:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006208:	f7fa fb28 	bl	800085c <__aeabi_ddiv>
 800620c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006210:	f004 040f 	and.w	r4, r4, #15
 8006214:	2603      	movs	r6, #3
 8006216:	4da2      	ldr	r5, [pc, #648]	@ (80064a0 <_dtoa_r+0x5c0>)
 8006218:	b954      	cbnz	r4, 8006230 <_dtoa_r+0x350>
 800621a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800621e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006222:	f7fa fb1b 	bl	800085c <__aeabi_ddiv>
 8006226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800622a:	e028      	b.n	800627e <_dtoa_r+0x39e>
 800622c:	2602      	movs	r6, #2
 800622e:	e7f2      	b.n	8006216 <_dtoa_r+0x336>
 8006230:	07e1      	lsls	r1, r4, #31
 8006232:	d508      	bpl.n	8006246 <_dtoa_r+0x366>
 8006234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006238:	e9d5 2300 	ldrd	r2, r3, [r5]
 800623c:	f7fa f9e4 	bl	8000608 <__aeabi_dmul>
 8006240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006244:	3601      	adds	r6, #1
 8006246:	1064      	asrs	r4, r4, #1
 8006248:	3508      	adds	r5, #8
 800624a:	e7e5      	b.n	8006218 <_dtoa_r+0x338>
 800624c:	f000 80d2 	beq.w	80063f4 <_dtoa_r+0x514>
 8006250:	427c      	negs	r4, r7
 8006252:	4b92      	ldr	r3, [pc, #584]	@ (800649c <_dtoa_r+0x5bc>)
 8006254:	4d92      	ldr	r5, [pc, #584]	@ (80064a0 <_dtoa_r+0x5c0>)
 8006256:	f004 020f 	and.w	r2, r4, #15
 800625a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006266:	f7fa f9cf 	bl	8000608 <__aeabi_dmul>
 800626a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800626e:	1124      	asrs	r4, r4, #4
 8006270:	2300      	movs	r3, #0
 8006272:	2602      	movs	r6, #2
 8006274:	2c00      	cmp	r4, #0
 8006276:	f040 80b2 	bne.w	80063de <_dtoa_r+0x4fe>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1d3      	bne.n	8006226 <_dtoa_r+0x346>
 800627e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006280:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 80b7 	beq.w	80063f8 <_dtoa_r+0x518>
 800628a:	4b86      	ldr	r3, [pc, #536]	@ (80064a4 <_dtoa_r+0x5c4>)
 800628c:	2200      	movs	r2, #0
 800628e:	4620      	mov	r0, r4
 8006290:	4629      	mov	r1, r5
 8006292:	f7fa fc2b 	bl	8000aec <__aeabi_dcmplt>
 8006296:	2800      	cmp	r0, #0
 8006298:	f000 80ae 	beq.w	80063f8 <_dtoa_r+0x518>
 800629c:	9b07      	ldr	r3, [sp, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80aa 	beq.w	80063f8 <_dtoa_r+0x518>
 80062a4:	9b00      	ldr	r3, [sp, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	dd37      	ble.n	800631a <_dtoa_r+0x43a>
 80062aa:	1e7b      	subs	r3, r7, #1
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	4620      	mov	r0, r4
 80062b0:	4b7d      	ldr	r3, [pc, #500]	@ (80064a8 <_dtoa_r+0x5c8>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	4629      	mov	r1, r5
 80062b6:	f7fa f9a7 	bl	8000608 <__aeabi_dmul>
 80062ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062be:	9c00      	ldr	r4, [sp, #0]
 80062c0:	3601      	adds	r6, #1
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7fa f936 	bl	8000534 <__aeabi_i2d>
 80062c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062cc:	f7fa f99c 	bl	8000608 <__aeabi_dmul>
 80062d0:	4b76      	ldr	r3, [pc, #472]	@ (80064ac <_dtoa_r+0x5cc>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	f7f9 ffe2 	bl	800029c <__adddf3>
 80062d8:	4605      	mov	r5, r0
 80062da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80062de:	2c00      	cmp	r4, #0
 80062e0:	f040 808d 	bne.w	80063fe <_dtoa_r+0x51e>
 80062e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062e8:	4b71      	ldr	r3, [pc, #452]	@ (80064b0 <_dtoa_r+0x5d0>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	f7f9 ffd4 	bl	8000298 <__aeabi_dsub>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062f8:	462a      	mov	r2, r5
 80062fa:	4633      	mov	r3, r6
 80062fc:	f7fa fc14 	bl	8000b28 <__aeabi_dcmpgt>
 8006300:	2800      	cmp	r0, #0
 8006302:	f040 828b 	bne.w	800681c <_dtoa_r+0x93c>
 8006306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800630a:	462a      	mov	r2, r5
 800630c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006310:	f7fa fbec 	bl	8000aec <__aeabi_dcmplt>
 8006314:	2800      	cmp	r0, #0
 8006316:	f040 8128 	bne.w	800656a <_dtoa_r+0x68a>
 800631a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800631e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006322:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006324:	2b00      	cmp	r3, #0
 8006326:	f2c0 815a 	blt.w	80065de <_dtoa_r+0x6fe>
 800632a:	2f0e      	cmp	r7, #14
 800632c:	f300 8157 	bgt.w	80065de <_dtoa_r+0x6fe>
 8006330:	4b5a      	ldr	r3, [pc, #360]	@ (800649c <_dtoa_r+0x5bc>)
 8006332:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006336:	ed93 7b00 	vldr	d7, [r3]
 800633a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800633c:	2b00      	cmp	r3, #0
 800633e:	ed8d 7b00 	vstr	d7, [sp]
 8006342:	da03      	bge.n	800634c <_dtoa_r+0x46c>
 8006344:	9b07      	ldr	r3, [sp, #28]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f340 8101 	ble.w	800654e <_dtoa_r+0x66e>
 800634c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006350:	4656      	mov	r6, sl
 8006352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006356:	4620      	mov	r0, r4
 8006358:	4629      	mov	r1, r5
 800635a:	f7fa fa7f 	bl	800085c <__aeabi_ddiv>
 800635e:	f7fa fc03 	bl	8000b68 <__aeabi_d2iz>
 8006362:	4680      	mov	r8, r0
 8006364:	f7fa f8e6 	bl	8000534 <__aeabi_i2d>
 8006368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800636c:	f7fa f94c 	bl	8000608 <__aeabi_dmul>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4620      	mov	r0, r4
 8006376:	4629      	mov	r1, r5
 8006378:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800637c:	f7f9 ff8c 	bl	8000298 <__aeabi_dsub>
 8006380:	f806 4b01 	strb.w	r4, [r6], #1
 8006384:	9d07      	ldr	r5, [sp, #28]
 8006386:	eba6 040a 	sub.w	r4, r6, sl
 800638a:	42a5      	cmp	r5, r4
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	f040 8117 	bne.w	80065c2 <_dtoa_r+0x6e2>
 8006394:	f7f9 ff82 	bl	800029c <__adddf3>
 8006398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800639c:	4604      	mov	r4, r0
 800639e:	460d      	mov	r5, r1
 80063a0:	f7fa fbc2 	bl	8000b28 <__aeabi_dcmpgt>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f040 80f9 	bne.w	800659c <_dtoa_r+0x6bc>
 80063aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063ae:	4620      	mov	r0, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7fa fb91 	bl	8000ad8 <__aeabi_dcmpeq>
 80063b6:	b118      	cbz	r0, 80063c0 <_dtoa_r+0x4e0>
 80063b8:	f018 0f01 	tst.w	r8, #1
 80063bc:	f040 80ee 	bne.w	800659c <_dtoa_r+0x6bc>
 80063c0:	4649      	mov	r1, r9
 80063c2:	4658      	mov	r0, fp
 80063c4:	f000 fc90 	bl	8006ce8 <_Bfree>
 80063c8:	2300      	movs	r3, #0
 80063ca:	7033      	strb	r3, [r6, #0]
 80063cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063ce:	3701      	adds	r7, #1
 80063d0:	601f      	str	r7, [r3, #0]
 80063d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 831d 	beq.w	8006a14 <_dtoa_r+0xb34>
 80063da:	601e      	str	r6, [r3, #0]
 80063dc:	e31a      	b.n	8006a14 <_dtoa_r+0xb34>
 80063de:	07e2      	lsls	r2, r4, #31
 80063e0:	d505      	bpl.n	80063ee <_dtoa_r+0x50e>
 80063e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063e6:	f7fa f90f 	bl	8000608 <__aeabi_dmul>
 80063ea:	3601      	adds	r6, #1
 80063ec:	2301      	movs	r3, #1
 80063ee:	1064      	asrs	r4, r4, #1
 80063f0:	3508      	adds	r5, #8
 80063f2:	e73f      	b.n	8006274 <_dtoa_r+0x394>
 80063f4:	2602      	movs	r6, #2
 80063f6:	e742      	b.n	800627e <_dtoa_r+0x39e>
 80063f8:	9c07      	ldr	r4, [sp, #28]
 80063fa:	9704      	str	r7, [sp, #16]
 80063fc:	e761      	b.n	80062c2 <_dtoa_r+0x3e2>
 80063fe:	4b27      	ldr	r3, [pc, #156]	@ (800649c <_dtoa_r+0x5bc>)
 8006400:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006402:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006406:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800640a:	4454      	add	r4, sl
 800640c:	2900      	cmp	r1, #0
 800640e:	d053      	beq.n	80064b8 <_dtoa_r+0x5d8>
 8006410:	4928      	ldr	r1, [pc, #160]	@ (80064b4 <_dtoa_r+0x5d4>)
 8006412:	2000      	movs	r0, #0
 8006414:	f7fa fa22 	bl	800085c <__aeabi_ddiv>
 8006418:	4633      	mov	r3, r6
 800641a:	462a      	mov	r2, r5
 800641c:	f7f9 ff3c 	bl	8000298 <__aeabi_dsub>
 8006420:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006424:	4656      	mov	r6, sl
 8006426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800642a:	f7fa fb9d 	bl	8000b68 <__aeabi_d2iz>
 800642e:	4605      	mov	r5, r0
 8006430:	f7fa f880 	bl	8000534 <__aeabi_i2d>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800643c:	f7f9 ff2c 	bl	8000298 <__aeabi_dsub>
 8006440:	3530      	adds	r5, #48	@ 0x30
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800644a:	f806 5b01 	strb.w	r5, [r6], #1
 800644e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006452:	f7fa fb4b 	bl	8000aec <__aeabi_dcmplt>
 8006456:	2800      	cmp	r0, #0
 8006458:	d171      	bne.n	800653e <_dtoa_r+0x65e>
 800645a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800645e:	4911      	ldr	r1, [pc, #68]	@ (80064a4 <_dtoa_r+0x5c4>)
 8006460:	2000      	movs	r0, #0
 8006462:	f7f9 ff19 	bl	8000298 <__aeabi_dsub>
 8006466:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800646a:	f7fa fb3f 	bl	8000aec <__aeabi_dcmplt>
 800646e:	2800      	cmp	r0, #0
 8006470:	f040 8095 	bne.w	800659e <_dtoa_r+0x6be>
 8006474:	42a6      	cmp	r6, r4
 8006476:	f43f af50 	beq.w	800631a <_dtoa_r+0x43a>
 800647a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800647e:	4b0a      	ldr	r3, [pc, #40]	@ (80064a8 <_dtoa_r+0x5c8>)
 8006480:	2200      	movs	r2, #0
 8006482:	f7fa f8c1 	bl	8000608 <__aeabi_dmul>
 8006486:	4b08      	ldr	r3, [pc, #32]	@ (80064a8 <_dtoa_r+0x5c8>)
 8006488:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800648c:	2200      	movs	r2, #0
 800648e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006492:	f7fa f8b9 	bl	8000608 <__aeabi_dmul>
 8006496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800649a:	e7c4      	b.n	8006426 <_dtoa_r+0x546>
 800649c:	080095e0 	.word	0x080095e0
 80064a0:	080095b8 	.word	0x080095b8
 80064a4:	3ff00000 	.word	0x3ff00000
 80064a8:	40240000 	.word	0x40240000
 80064ac:	401c0000 	.word	0x401c0000
 80064b0:	40140000 	.word	0x40140000
 80064b4:	3fe00000 	.word	0x3fe00000
 80064b8:	4631      	mov	r1, r6
 80064ba:	4628      	mov	r0, r5
 80064bc:	f7fa f8a4 	bl	8000608 <__aeabi_dmul>
 80064c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80064c6:	4656      	mov	r6, sl
 80064c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064cc:	f7fa fb4c 	bl	8000b68 <__aeabi_d2iz>
 80064d0:	4605      	mov	r5, r0
 80064d2:	f7fa f82f 	bl	8000534 <__aeabi_i2d>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064de:	f7f9 fedb 	bl	8000298 <__aeabi_dsub>
 80064e2:	3530      	adds	r5, #48	@ 0x30
 80064e4:	f806 5b01 	strb.w	r5, [r6], #1
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	42a6      	cmp	r6, r4
 80064ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	d124      	bne.n	8006542 <_dtoa_r+0x662>
 80064f8:	4bac      	ldr	r3, [pc, #688]	@ (80067ac <_dtoa_r+0x8cc>)
 80064fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064fe:	f7f9 fecd 	bl	800029c <__adddf3>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800650a:	f7fa fb0d 	bl	8000b28 <__aeabi_dcmpgt>
 800650e:	2800      	cmp	r0, #0
 8006510:	d145      	bne.n	800659e <_dtoa_r+0x6be>
 8006512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006516:	49a5      	ldr	r1, [pc, #660]	@ (80067ac <_dtoa_r+0x8cc>)
 8006518:	2000      	movs	r0, #0
 800651a:	f7f9 febd 	bl	8000298 <__aeabi_dsub>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006526:	f7fa fae1 	bl	8000aec <__aeabi_dcmplt>
 800652a:	2800      	cmp	r0, #0
 800652c:	f43f aef5 	beq.w	800631a <_dtoa_r+0x43a>
 8006530:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006532:	1e73      	subs	r3, r6, #1
 8006534:	9315      	str	r3, [sp, #84]	@ 0x54
 8006536:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800653a:	2b30      	cmp	r3, #48	@ 0x30
 800653c:	d0f8      	beq.n	8006530 <_dtoa_r+0x650>
 800653e:	9f04      	ldr	r7, [sp, #16]
 8006540:	e73e      	b.n	80063c0 <_dtoa_r+0x4e0>
 8006542:	4b9b      	ldr	r3, [pc, #620]	@ (80067b0 <_dtoa_r+0x8d0>)
 8006544:	f7fa f860 	bl	8000608 <__aeabi_dmul>
 8006548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800654c:	e7bc      	b.n	80064c8 <_dtoa_r+0x5e8>
 800654e:	d10c      	bne.n	800656a <_dtoa_r+0x68a>
 8006550:	4b98      	ldr	r3, [pc, #608]	@ (80067b4 <_dtoa_r+0x8d4>)
 8006552:	2200      	movs	r2, #0
 8006554:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006558:	f7fa f856 	bl	8000608 <__aeabi_dmul>
 800655c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006560:	f7fa fad8 	bl	8000b14 <__aeabi_dcmpge>
 8006564:	2800      	cmp	r0, #0
 8006566:	f000 8157 	beq.w	8006818 <_dtoa_r+0x938>
 800656a:	2400      	movs	r4, #0
 800656c:	4625      	mov	r5, r4
 800656e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006570:	43db      	mvns	r3, r3
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	4656      	mov	r6, sl
 8006576:	2700      	movs	r7, #0
 8006578:	4621      	mov	r1, r4
 800657a:	4658      	mov	r0, fp
 800657c:	f000 fbb4 	bl	8006ce8 <_Bfree>
 8006580:	2d00      	cmp	r5, #0
 8006582:	d0dc      	beq.n	800653e <_dtoa_r+0x65e>
 8006584:	b12f      	cbz	r7, 8006592 <_dtoa_r+0x6b2>
 8006586:	42af      	cmp	r7, r5
 8006588:	d003      	beq.n	8006592 <_dtoa_r+0x6b2>
 800658a:	4639      	mov	r1, r7
 800658c:	4658      	mov	r0, fp
 800658e:	f000 fbab 	bl	8006ce8 <_Bfree>
 8006592:	4629      	mov	r1, r5
 8006594:	4658      	mov	r0, fp
 8006596:	f000 fba7 	bl	8006ce8 <_Bfree>
 800659a:	e7d0      	b.n	800653e <_dtoa_r+0x65e>
 800659c:	9704      	str	r7, [sp, #16]
 800659e:	4633      	mov	r3, r6
 80065a0:	461e      	mov	r6, r3
 80065a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065a6:	2a39      	cmp	r2, #57	@ 0x39
 80065a8:	d107      	bne.n	80065ba <_dtoa_r+0x6da>
 80065aa:	459a      	cmp	sl, r3
 80065ac:	d1f8      	bne.n	80065a0 <_dtoa_r+0x6c0>
 80065ae:	9a04      	ldr	r2, [sp, #16]
 80065b0:	3201      	adds	r2, #1
 80065b2:	9204      	str	r2, [sp, #16]
 80065b4:	2230      	movs	r2, #48	@ 0x30
 80065b6:	f88a 2000 	strb.w	r2, [sl]
 80065ba:	781a      	ldrb	r2, [r3, #0]
 80065bc:	3201      	adds	r2, #1
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	e7bd      	b.n	800653e <_dtoa_r+0x65e>
 80065c2:	4b7b      	ldr	r3, [pc, #492]	@ (80067b0 <_dtoa_r+0x8d0>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	f7fa f81f 	bl	8000608 <__aeabi_dmul>
 80065ca:	2200      	movs	r2, #0
 80065cc:	2300      	movs	r3, #0
 80065ce:	4604      	mov	r4, r0
 80065d0:	460d      	mov	r5, r1
 80065d2:	f7fa fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f43f aebb 	beq.w	8006352 <_dtoa_r+0x472>
 80065dc:	e6f0      	b.n	80063c0 <_dtoa_r+0x4e0>
 80065de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80065e0:	2a00      	cmp	r2, #0
 80065e2:	f000 80db 	beq.w	800679c <_dtoa_r+0x8bc>
 80065e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065e8:	2a01      	cmp	r2, #1
 80065ea:	f300 80bf 	bgt.w	800676c <_dtoa_r+0x88c>
 80065ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80065f0:	2a00      	cmp	r2, #0
 80065f2:	f000 80b7 	beq.w	8006764 <_dtoa_r+0x884>
 80065f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80065fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065fc:	4646      	mov	r6, r8
 80065fe:	9a08      	ldr	r2, [sp, #32]
 8006600:	2101      	movs	r1, #1
 8006602:	441a      	add	r2, r3
 8006604:	4658      	mov	r0, fp
 8006606:	4498      	add	r8, r3
 8006608:	9208      	str	r2, [sp, #32]
 800660a:	f000 fc6b 	bl	8006ee4 <__i2b>
 800660e:	4605      	mov	r5, r0
 8006610:	b15e      	cbz	r6, 800662a <_dtoa_r+0x74a>
 8006612:	9b08      	ldr	r3, [sp, #32]
 8006614:	2b00      	cmp	r3, #0
 8006616:	dd08      	ble.n	800662a <_dtoa_r+0x74a>
 8006618:	42b3      	cmp	r3, r6
 800661a:	9a08      	ldr	r2, [sp, #32]
 800661c:	bfa8      	it	ge
 800661e:	4633      	movge	r3, r6
 8006620:	eba8 0803 	sub.w	r8, r8, r3
 8006624:	1af6      	subs	r6, r6, r3
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	9308      	str	r3, [sp, #32]
 800662a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800662c:	b1f3      	cbz	r3, 800666c <_dtoa_r+0x78c>
 800662e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 80b7 	beq.w	80067a4 <_dtoa_r+0x8c4>
 8006636:	b18c      	cbz	r4, 800665c <_dtoa_r+0x77c>
 8006638:	4629      	mov	r1, r5
 800663a:	4622      	mov	r2, r4
 800663c:	4658      	mov	r0, fp
 800663e:	f000 fd11 	bl	8007064 <__pow5mult>
 8006642:	464a      	mov	r2, r9
 8006644:	4601      	mov	r1, r0
 8006646:	4605      	mov	r5, r0
 8006648:	4658      	mov	r0, fp
 800664a:	f000 fc61 	bl	8006f10 <__multiply>
 800664e:	4649      	mov	r1, r9
 8006650:	9004      	str	r0, [sp, #16]
 8006652:	4658      	mov	r0, fp
 8006654:	f000 fb48 	bl	8006ce8 <_Bfree>
 8006658:	9b04      	ldr	r3, [sp, #16]
 800665a:	4699      	mov	r9, r3
 800665c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800665e:	1b1a      	subs	r2, r3, r4
 8006660:	d004      	beq.n	800666c <_dtoa_r+0x78c>
 8006662:	4649      	mov	r1, r9
 8006664:	4658      	mov	r0, fp
 8006666:	f000 fcfd 	bl	8007064 <__pow5mult>
 800666a:	4681      	mov	r9, r0
 800666c:	2101      	movs	r1, #1
 800666e:	4658      	mov	r0, fp
 8006670:	f000 fc38 	bl	8006ee4 <__i2b>
 8006674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006676:	4604      	mov	r4, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 81cf 	beq.w	8006a1c <_dtoa_r+0xb3c>
 800667e:	461a      	mov	r2, r3
 8006680:	4601      	mov	r1, r0
 8006682:	4658      	mov	r0, fp
 8006684:	f000 fcee 	bl	8007064 <__pow5mult>
 8006688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800668a:	2b01      	cmp	r3, #1
 800668c:	4604      	mov	r4, r0
 800668e:	f300 8095 	bgt.w	80067bc <_dtoa_r+0x8dc>
 8006692:	9b02      	ldr	r3, [sp, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f040 8087 	bne.w	80067a8 <_dtoa_r+0x8c8>
 800669a:	9b03      	ldr	r3, [sp, #12]
 800669c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 8089 	bne.w	80067b8 <_dtoa_r+0x8d8>
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066ac:	0d1b      	lsrs	r3, r3, #20
 80066ae:	051b      	lsls	r3, r3, #20
 80066b0:	b12b      	cbz	r3, 80066be <_dtoa_r+0x7de>
 80066b2:	9b08      	ldr	r3, [sp, #32]
 80066b4:	3301      	adds	r3, #1
 80066b6:	9308      	str	r3, [sp, #32]
 80066b8:	f108 0801 	add.w	r8, r8, #1
 80066bc:	2301      	movs	r3, #1
 80066be:	930a      	str	r3, [sp, #40]	@ 0x28
 80066c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 81b0 	beq.w	8006a28 <_dtoa_r+0xb48>
 80066c8:	6923      	ldr	r3, [r4, #16]
 80066ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066ce:	6918      	ldr	r0, [r3, #16]
 80066d0:	f000 fbbc 	bl	8006e4c <__hi0bits>
 80066d4:	f1c0 0020 	rsb	r0, r0, #32
 80066d8:	9b08      	ldr	r3, [sp, #32]
 80066da:	4418      	add	r0, r3
 80066dc:	f010 001f 	ands.w	r0, r0, #31
 80066e0:	d077      	beq.n	80067d2 <_dtoa_r+0x8f2>
 80066e2:	f1c0 0320 	rsb	r3, r0, #32
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	dd6b      	ble.n	80067c2 <_dtoa_r+0x8e2>
 80066ea:	9b08      	ldr	r3, [sp, #32]
 80066ec:	f1c0 001c 	rsb	r0, r0, #28
 80066f0:	4403      	add	r3, r0
 80066f2:	4480      	add	r8, r0
 80066f4:	4406      	add	r6, r0
 80066f6:	9308      	str	r3, [sp, #32]
 80066f8:	f1b8 0f00 	cmp.w	r8, #0
 80066fc:	dd05      	ble.n	800670a <_dtoa_r+0x82a>
 80066fe:	4649      	mov	r1, r9
 8006700:	4642      	mov	r2, r8
 8006702:	4658      	mov	r0, fp
 8006704:	f000 fd08 	bl	8007118 <__lshift>
 8006708:	4681      	mov	r9, r0
 800670a:	9b08      	ldr	r3, [sp, #32]
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd05      	ble.n	800671c <_dtoa_r+0x83c>
 8006710:	4621      	mov	r1, r4
 8006712:	461a      	mov	r2, r3
 8006714:	4658      	mov	r0, fp
 8006716:	f000 fcff 	bl	8007118 <__lshift>
 800671a:	4604      	mov	r4, r0
 800671c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800671e:	2b00      	cmp	r3, #0
 8006720:	d059      	beq.n	80067d6 <_dtoa_r+0x8f6>
 8006722:	4621      	mov	r1, r4
 8006724:	4648      	mov	r0, r9
 8006726:	f000 fd63 	bl	80071f0 <__mcmp>
 800672a:	2800      	cmp	r0, #0
 800672c:	da53      	bge.n	80067d6 <_dtoa_r+0x8f6>
 800672e:	1e7b      	subs	r3, r7, #1
 8006730:	9304      	str	r3, [sp, #16]
 8006732:	4649      	mov	r1, r9
 8006734:	2300      	movs	r3, #0
 8006736:	220a      	movs	r2, #10
 8006738:	4658      	mov	r0, fp
 800673a:	f000 faf7 	bl	8006d2c <__multadd>
 800673e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006740:	4681      	mov	r9, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8172 	beq.w	8006a2c <_dtoa_r+0xb4c>
 8006748:	2300      	movs	r3, #0
 800674a:	4629      	mov	r1, r5
 800674c:	220a      	movs	r2, #10
 800674e:	4658      	mov	r0, fp
 8006750:	f000 faec 	bl	8006d2c <__multadd>
 8006754:	9b00      	ldr	r3, [sp, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	4605      	mov	r5, r0
 800675a:	dc67      	bgt.n	800682c <_dtoa_r+0x94c>
 800675c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675e:	2b02      	cmp	r3, #2
 8006760:	dc41      	bgt.n	80067e6 <_dtoa_r+0x906>
 8006762:	e063      	b.n	800682c <_dtoa_r+0x94c>
 8006764:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006766:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800676a:	e746      	b.n	80065fa <_dtoa_r+0x71a>
 800676c:	9b07      	ldr	r3, [sp, #28]
 800676e:	1e5c      	subs	r4, r3, #1
 8006770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006772:	42a3      	cmp	r3, r4
 8006774:	bfbf      	itttt	lt
 8006776:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006778:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800677a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800677c:	1ae3      	sublt	r3, r4, r3
 800677e:	bfb4      	ite	lt
 8006780:	18d2      	addlt	r2, r2, r3
 8006782:	1b1c      	subge	r4, r3, r4
 8006784:	9b07      	ldr	r3, [sp, #28]
 8006786:	bfbc      	itt	lt
 8006788:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800678a:	2400      	movlt	r4, #0
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfb5      	itete	lt
 8006790:	eba8 0603 	sublt.w	r6, r8, r3
 8006794:	9b07      	ldrge	r3, [sp, #28]
 8006796:	2300      	movlt	r3, #0
 8006798:	4646      	movge	r6, r8
 800679a:	e730      	b.n	80065fe <_dtoa_r+0x71e>
 800679c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800679e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80067a0:	4646      	mov	r6, r8
 80067a2:	e735      	b.n	8006610 <_dtoa_r+0x730>
 80067a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067a6:	e75c      	b.n	8006662 <_dtoa_r+0x782>
 80067a8:	2300      	movs	r3, #0
 80067aa:	e788      	b.n	80066be <_dtoa_r+0x7de>
 80067ac:	3fe00000 	.word	0x3fe00000
 80067b0:	40240000 	.word	0x40240000
 80067b4:	40140000 	.word	0x40140000
 80067b8:	9b02      	ldr	r3, [sp, #8]
 80067ba:	e780      	b.n	80066be <_dtoa_r+0x7de>
 80067bc:	2300      	movs	r3, #0
 80067be:	930a      	str	r3, [sp, #40]	@ 0x28
 80067c0:	e782      	b.n	80066c8 <_dtoa_r+0x7e8>
 80067c2:	d099      	beq.n	80066f8 <_dtoa_r+0x818>
 80067c4:	9a08      	ldr	r2, [sp, #32]
 80067c6:	331c      	adds	r3, #28
 80067c8:	441a      	add	r2, r3
 80067ca:	4498      	add	r8, r3
 80067cc:	441e      	add	r6, r3
 80067ce:	9208      	str	r2, [sp, #32]
 80067d0:	e792      	b.n	80066f8 <_dtoa_r+0x818>
 80067d2:	4603      	mov	r3, r0
 80067d4:	e7f6      	b.n	80067c4 <_dtoa_r+0x8e4>
 80067d6:	9b07      	ldr	r3, [sp, #28]
 80067d8:	9704      	str	r7, [sp, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dc20      	bgt.n	8006820 <_dtoa_r+0x940>
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	dd1e      	ble.n	8006824 <_dtoa_r+0x944>
 80067e6:	9b00      	ldr	r3, [sp, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f47f aec0 	bne.w	800656e <_dtoa_r+0x68e>
 80067ee:	4621      	mov	r1, r4
 80067f0:	2205      	movs	r2, #5
 80067f2:	4658      	mov	r0, fp
 80067f4:	f000 fa9a 	bl	8006d2c <__multadd>
 80067f8:	4601      	mov	r1, r0
 80067fa:	4604      	mov	r4, r0
 80067fc:	4648      	mov	r0, r9
 80067fe:	f000 fcf7 	bl	80071f0 <__mcmp>
 8006802:	2800      	cmp	r0, #0
 8006804:	f77f aeb3 	ble.w	800656e <_dtoa_r+0x68e>
 8006808:	4656      	mov	r6, sl
 800680a:	2331      	movs	r3, #49	@ 0x31
 800680c:	f806 3b01 	strb.w	r3, [r6], #1
 8006810:	9b04      	ldr	r3, [sp, #16]
 8006812:	3301      	adds	r3, #1
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	e6ae      	b.n	8006576 <_dtoa_r+0x696>
 8006818:	9c07      	ldr	r4, [sp, #28]
 800681a:	9704      	str	r7, [sp, #16]
 800681c:	4625      	mov	r5, r4
 800681e:	e7f3      	b.n	8006808 <_dtoa_r+0x928>
 8006820:	9b07      	ldr	r3, [sp, #28]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8104 	beq.w	8006a34 <_dtoa_r+0xb54>
 800682c:	2e00      	cmp	r6, #0
 800682e:	dd05      	ble.n	800683c <_dtoa_r+0x95c>
 8006830:	4629      	mov	r1, r5
 8006832:	4632      	mov	r2, r6
 8006834:	4658      	mov	r0, fp
 8006836:	f000 fc6f 	bl	8007118 <__lshift>
 800683a:	4605      	mov	r5, r0
 800683c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	d05a      	beq.n	80068f8 <_dtoa_r+0xa18>
 8006842:	6869      	ldr	r1, [r5, #4]
 8006844:	4658      	mov	r0, fp
 8006846:	f000 fa0f 	bl	8006c68 <_Balloc>
 800684a:	4606      	mov	r6, r0
 800684c:	b928      	cbnz	r0, 800685a <_dtoa_r+0x97a>
 800684e:	4b84      	ldr	r3, [pc, #528]	@ (8006a60 <_dtoa_r+0xb80>)
 8006850:	4602      	mov	r2, r0
 8006852:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006856:	f7ff bb5a 	b.w	8005f0e <_dtoa_r+0x2e>
 800685a:	692a      	ldr	r2, [r5, #16]
 800685c:	3202      	adds	r2, #2
 800685e:	0092      	lsls	r2, r2, #2
 8006860:	f105 010c 	add.w	r1, r5, #12
 8006864:	300c      	adds	r0, #12
 8006866:	f7ff fa9c 	bl	8005da2 <memcpy>
 800686a:	2201      	movs	r2, #1
 800686c:	4631      	mov	r1, r6
 800686e:	4658      	mov	r0, fp
 8006870:	f000 fc52 	bl	8007118 <__lshift>
 8006874:	f10a 0301 	add.w	r3, sl, #1
 8006878:	9307      	str	r3, [sp, #28]
 800687a:	9b00      	ldr	r3, [sp, #0]
 800687c:	4453      	add	r3, sl
 800687e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006880:	9b02      	ldr	r3, [sp, #8]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	462f      	mov	r7, r5
 8006888:	930a      	str	r3, [sp, #40]	@ 0x28
 800688a:	4605      	mov	r5, r0
 800688c:	9b07      	ldr	r3, [sp, #28]
 800688e:	4621      	mov	r1, r4
 8006890:	3b01      	subs	r3, #1
 8006892:	4648      	mov	r0, r9
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	f7ff fa99 	bl	8005dcc <quorem>
 800689a:	4639      	mov	r1, r7
 800689c:	9002      	str	r0, [sp, #8]
 800689e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80068a2:	4648      	mov	r0, r9
 80068a4:	f000 fca4 	bl	80071f0 <__mcmp>
 80068a8:	462a      	mov	r2, r5
 80068aa:	9008      	str	r0, [sp, #32]
 80068ac:	4621      	mov	r1, r4
 80068ae:	4658      	mov	r0, fp
 80068b0:	f000 fcba 	bl	8007228 <__mdiff>
 80068b4:	68c2      	ldr	r2, [r0, #12]
 80068b6:	4606      	mov	r6, r0
 80068b8:	bb02      	cbnz	r2, 80068fc <_dtoa_r+0xa1c>
 80068ba:	4601      	mov	r1, r0
 80068bc:	4648      	mov	r0, r9
 80068be:	f000 fc97 	bl	80071f0 <__mcmp>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4631      	mov	r1, r6
 80068c6:	4658      	mov	r0, fp
 80068c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80068ca:	f000 fa0d 	bl	8006ce8 <_Bfree>
 80068ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068d2:	9e07      	ldr	r6, [sp, #28]
 80068d4:	ea43 0102 	orr.w	r1, r3, r2
 80068d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068da:	4319      	orrs	r1, r3
 80068dc:	d110      	bne.n	8006900 <_dtoa_r+0xa20>
 80068de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068e2:	d029      	beq.n	8006938 <_dtoa_r+0xa58>
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	dd02      	ble.n	80068f0 <_dtoa_r+0xa10>
 80068ea:	9b02      	ldr	r3, [sp, #8]
 80068ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80068f0:	9b00      	ldr	r3, [sp, #0]
 80068f2:	f883 8000 	strb.w	r8, [r3]
 80068f6:	e63f      	b.n	8006578 <_dtoa_r+0x698>
 80068f8:	4628      	mov	r0, r5
 80068fa:	e7bb      	b.n	8006874 <_dtoa_r+0x994>
 80068fc:	2201      	movs	r2, #1
 80068fe:	e7e1      	b.n	80068c4 <_dtoa_r+0x9e4>
 8006900:	9b08      	ldr	r3, [sp, #32]
 8006902:	2b00      	cmp	r3, #0
 8006904:	db04      	blt.n	8006910 <_dtoa_r+0xa30>
 8006906:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006908:	430b      	orrs	r3, r1
 800690a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800690c:	430b      	orrs	r3, r1
 800690e:	d120      	bne.n	8006952 <_dtoa_r+0xa72>
 8006910:	2a00      	cmp	r2, #0
 8006912:	dded      	ble.n	80068f0 <_dtoa_r+0xa10>
 8006914:	4649      	mov	r1, r9
 8006916:	2201      	movs	r2, #1
 8006918:	4658      	mov	r0, fp
 800691a:	f000 fbfd 	bl	8007118 <__lshift>
 800691e:	4621      	mov	r1, r4
 8006920:	4681      	mov	r9, r0
 8006922:	f000 fc65 	bl	80071f0 <__mcmp>
 8006926:	2800      	cmp	r0, #0
 8006928:	dc03      	bgt.n	8006932 <_dtoa_r+0xa52>
 800692a:	d1e1      	bne.n	80068f0 <_dtoa_r+0xa10>
 800692c:	f018 0f01 	tst.w	r8, #1
 8006930:	d0de      	beq.n	80068f0 <_dtoa_r+0xa10>
 8006932:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006936:	d1d8      	bne.n	80068ea <_dtoa_r+0xa0a>
 8006938:	9a00      	ldr	r2, [sp, #0]
 800693a:	2339      	movs	r3, #57	@ 0x39
 800693c:	7013      	strb	r3, [r2, #0]
 800693e:	4633      	mov	r3, r6
 8006940:	461e      	mov	r6, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006948:	2a39      	cmp	r2, #57	@ 0x39
 800694a:	d052      	beq.n	80069f2 <_dtoa_r+0xb12>
 800694c:	3201      	adds	r2, #1
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	e612      	b.n	8006578 <_dtoa_r+0x698>
 8006952:	2a00      	cmp	r2, #0
 8006954:	dd07      	ble.n	8006966 <_dtoa_r+0xa86>
 8006956:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800695a:	d0ed      	beq.n	8006938 <_dtoa_r+0xa58>
 800695c:	9a00      	ldr	r2, [sp, #0]
 800695e:	f108 0301 	add.w	r3, r8, #1
 8006962:	7013      	strb	r3, [r2, #0]
 8006964:	e608      	b.n	8006578 <_dtoa_r+0x698>
 8006966:	9b07      	ldr	r3, [sp, #28]
 8006968:	9a07      	ldr	r2, [sp, #28]
 800696a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800696e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006970:	4293      	cmp	r3, r2
 8006972:	d028      	beq.n	80069c6 <_dtoa_r+0xae6>
 8006974:	4649      	mov	r1, r9
 8006976:	2300      	movs	r3, #0
 8006978:	220a      	movs	r2, #10
 800697a:	4658      	mov	r0, fp
 800697c:	f000 f9d6 	bl	8006d2c <__multadd>
 8006980:	42af      	cmp	r7, r5
 8006982:	4681      	mov	r9, r0
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	f04f 020a 	mov.w	r2, #10
 800698c:	4639      	mov	r1, r7
 800698e:	4658      	mov	r0, fp
 8006990:	d107      	bne.n	80069a2 <_dtoa_r+0xac2>
 8006992:	f000 f9cb 	bl	8006d2c <__multadd>
 8006996:	4607      	mov	r7, r0
 8006998:	4605      	mov	r5, r0
 800699a:	9b07      	ldr	r3, [sp, #28]
 800699c:	3301      	adds	r3, #1
 800699e:	9307      	str	r3, [sp, #28]
 80069a0:	e774      	b.n	800688c <_dtoa_r+0x9ac>
 80069a2:	f000 f9c3 	bl	8006d2c <__multadd>
 80069a6:	4629      	mov	r1, r5
 80069a8:	4607      	mov	r7, r0
 80069aa:	2300      	movs	r3, #0
 80069ac:	220a      	movs	r2, #10
 80069ae:	4658      	mov	r0, fp
 80069b0:	f000 f9bc 	bl	8006d2c <__multadd>
 80069b4:	4605      	mov	r5, r0
 80069b6:	e7f0      	b.n	800699a <_dtoa_r+0xaba>
 80069b8:	9b00      	ldr	r3, [sp, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	bfcc      	ite	gt
 80069be:	461e      	movgt	r6, r3
 80069c0:	2601      	movle	r6, #1
 80069c2:	4456      	add	r6, sl
 80069c4:	2700      	movs	r7, #0
 80069c6:	4649      	mov	r1, r9
 80069c8:	2201      	movs	r2, #1
 80069ca:	4658      	mov	r0, fp
 80069cc:	f000 fba4 	bl	8007118 <__lshift>
 80069d0:	4621      	mov	r1, r4
 80069d2:	4681      	mov	r9, r0
 80069d4:	f000 fc0c 	bl	80071f0 <__mcmp>
 80069d8:	2800      	cmp	r0, #0
 80069da:	dcb0      	bgt.n	800693e <_dtoa_r+0xa5e>
 80069dc:	d102      	bne.n	80069e4 <_dtoa_r+0xb04>
 80069de:	f018 0f01 	tst.w	r8, #1
 80069e2:	d1ac      	bne.n	800693e <_dtoa_r+0xa5e>
 80069e4:	4633      	mov	r3, r6
 80069e6:	461e      	mov	r6, r3
 80069e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069ec:	2a30      	cmp	r2, #48	@ 0x30
 80069ee:	d0fa      	beq.n	80069e6 <_dtoa_r+0xb06>
 80069f0:	e5c2      	b.n	8006578 <_dtoa_r+0x698>
 80069f2:	459a      	cmp	sl, r3
 80069f4:	d1a4      	bne.n	8006940 <_dtoa_r+0xa60>
 80069f6:	9b04      	ldr	r3, [sp, #16]
 80069f8:	3301      	adds	r3, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	2331      	movs	r3, #49	@ 0x31
 80069fe:	f88a 3000 	strb.w	r3, [sl]
 8006a02:	e5b9      	b.n	8006578 <_dtoa_r+0x698>
 8006a04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006a64 <_dtoa_r+0xb84>
 8006a0a:	b11b      	cbz	r3, 8006a14 <_dtoa_r+0xb34>
 8006a0c:	f10a 0308 	add.w	r3, sl, #8
 8006a10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	4650      	mov	r0, sl
 8006a16:	b019      	add	sp, #100	@ 0x64
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	f77f ae37 	ble.w	8006692 <_dtoa_r+0x7b2>
 8006a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a28:	2001      	movs	r0, #1
 8006a2a:	e655      	b.n	80066d8 <_dtoa_r+0x7f8>
 8006a2c:	9b00      	ldr	r3, [sp, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f77f aed6 	ble.w	80067e0 <_dtoa_r+0x900>
 8006a34:	4656      	mov	r6, sl
 8006a36:	4621      	mov	r1, r4
 8006a38:	4648      	mov	r0, r9
 8006a3a:	f7ff f9c7 	bl	8005dcc <quorem>
 8006a3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a42:	f806 8b01 	strb.w	r8, [r6], #1
 8006a46:	9b00      	ldr	r3, [sp, #0]
 8006a48:	eba6 020a 	sub.w	r2, r6, sl
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	ddb3      	ble.n	80069b8 <_dtoa_r+0xad8>
 8006a50:	4649      	mov	r1, r9
 8006a52:	2300      	movs	r3, #0
 8006a54:	220a      	movs	r2, #10
 8006a56:	4658      	mov	r0, fp
 8006a58:	f000 f968 	bl	8006d2c <__multadd>
 8006a5c:	4681      	mov	r9, r0
 8006a5e:	e7ea      	b.n	8006a36 <_dtoa_r+0xb56>
 8006a60:	0800953d 	.word	0x0800953d
 8006a64:	080094c1 	.word	0x080094c1

08006a68 <_free_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	d041      	beq.n	8006af4 <_free_r+0x8c>
 8006a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a74:	1f0c      	subs	r4, r1, #4
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	bfb8      	it	lt
 8006a7a:	18e4      	addlt	r4, r4, r3
 8006a7c:	f000 f8e8 	bl	8006c50 <__malloc_lock>
 8006a80:	4a1d      	ldr	r2, [pc, #116]	@ (8006af8 <_free_r+0x90>)
 8006a82:	6813      	ldr	r3, [r2, #0]
 8006a84:	b933      	cbnz	r3, 8006a94 <_free_r+0x2c>
 8006a86:	6063      	str	r3, [r4, #4]
 8006a88:	6014      	str	r4, [r2, #0]
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a90:	f000 b8e4 	b.w	8006c5c <__malloc_unlock>
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	d908      	bls.n	8006aaa <_free_r+0x42>
 8006a98:	6820      	ldr	r0, [r4, #0]
 8006a9a:	1821      	adds	r1, r4, r0
 8006a9c:	428b      	cmp	r3, r1
 8006a9e:	bf01      	itttt	eq
 8006aa0:	6819      	ldreq	r1, [r3, #0]
 8006aa2:	685b      	ldreq	r3, [r3, #4]
 8006aa4:	1809      	addeq	r1, r1, r0
 8006aa6:	6021      	streq	r1, [r4, #0]
 8006aa8:	e7ed      	b.n	8006a86 <_free_r+0x1e>
 8006aaa:	461a      	mov	r2, r3
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	b10b      	cbz	r3, 8006ab4 <_free_r+0x4c>
 8006ab0:	42a3      	cmp	r3, r4
 8006ab2:	d9fa      	bls.n	8006aaa <_free_r+0x42>
 8006ab4:	6811      	ldr	r1, [r2, #0]
 8006ab6:	1850      	adds	r0, r2, r1
 8006ab8:	42a0      	cmp	r0, r4
 8006aba:	d10b      	bne.n	8006ad4 <_free_r+0x6c>
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	4401      	add	r1, r0
 8006ac0:	1850      	adds	r0, r2, r1
 8006ac2:	4283      	cmp	r3, r0
 8006ac4:	6011      	str	r1, [r2, #0]
 8006ac6:	d1e0      	bne.n	8006a8a <_free_r+0x22>
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	6053      	str	r3, [r2, #4]
 8006ace:	4408      	add	r0, r1
 8006ad0:	6010      	str	r0, [r2, #0]
 8006ad2:	e7da      	b.n	8006a8a <_free_r+0x22>
 8006ad4:	d902      	bls.n	8006adc <_free_r+0x74>
 8006ad6:	230c      	movs	r3, #12
 8006ad8:	602b      	str	r3, [r5, #0]
 8006ada:	e7d6      	b.n	8006a8a <_free_r+0x22>
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	1821      	adds	r1, r4, r0
 8006ae0:	428b      	cmp	r3, r1
 8006ae2:	bf04      	itt	eq
 8006ae4:	6819      	ldreq	r1, [r3, #0]
 8006ae6:	685b      	ldreq	r3, [r3, #4]
 8006ae8:	6063      	str	r3, [r4, #4]
 8006aea:	bf04      	itt	eq
 8006aec:	1809      	addeq	r1, r1, r0
 8006aee:	6021      	streq	r1, [r4, #0]
 8006af0:	6054      	str	r4, [r2, #4]
 8006af2:	e7ca      	b.n	8006a8a <_free_r+0x22>
 8006af4:	bd38      	pop	{r3, r4, r5, pc}
 8006af6:	bf00      	nop
 8006af8:	20000534 	.word	0x20000534

08006afc <malloc>:
 8006afc:	4b02      	ldr	r3, [pc, #8]	@ (8006b08 <malloc+0xc>)
 8006afe:	4601      	mov	r1, r0
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	f000 b825 	b.w	8006b50 <_malloc_r>
 8006b06:	bf00      	nop
 8006b08:	2000001c 	.word	0x2000001c

08006b0c <sbrk_aligned>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8006b4c <sbrk_aligned+0x40>)
 8006b10:	460c      	mov	r4, r1
 8006b12:	6831      	ldr	r1, [r6, #0]
 8006b14:	4605      	mov	r5, r0
 8006b16:	b911      	cbnz	r1, 8006b1e <sbrk_aligned+0x12>
 8006b18:	f001 fe90 	bl	800883c <_sbrk_r>
 8006b1c:	6030      	str	r0, [r6, #0]
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4628      	mov	r0, r5
 8006b22:	f001 fe8b 	bl	800883c <_sbrk_r>
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	d103      	bne.n	8006b32 <sbrk_aligned+0x26>
 8006b2a:	f04f 34ff 	mov.w	r4, #4294967295
 8006b2e:	4620      	mov	r0, r4
 8006b30:	bd70      	pop	{r4, r5, r6, pc}
 8006b32:	1cc4      	adds	r4, r0, #3
 8006b34:	f024 0403 	bic.w	r4, r4, #3
 8006b38:	42a0      	cmp	r0, r4
 8006b3a:	d0f8      	beq.n	8006b2e <sbrk_aligned+0x22>
 8006b3c:	1a21      	subs	r1, r4, r0
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f001 fe7c 	bl	800883c <_sbrk_r>
 8006b44:	3001      	adds	r0, #1
 8006b46:	d1f2      	bne.n	8006b2e <sbrk_aligned+0x22>
 8006b48:	e7ef      	b.n	8006b2a <sbrk_aligned+0x1e>
 8006b4a:	bf00      	nop
 8006b4c:	20000530 	.word	0x20000530

08006b50 <_malloc_r>:
 8006b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b54:	1ccd      	adds	r5, r1, #3
 8006b56:	f025 0503 	bic.w	r5, r5, #3
 8006b5a:	3508      	adds	r5, #8
 8006b5c:	2d0c      	cmp	r5, #12
 8006b5e:	bf38      	it	cc
 8006b60:	250c      	movcc	r5, #12
 8006b62:	2d00      	cmp	r5, #0
 8006b64:	4606      	mov	r6, r0
 8006b66:	db01      	blt.n	8006b6c <_malloc_r+0x1c>
 8006b68:	42a9      	cmp	r1, r5
 8006b6a:	d904      	bls.n	8006b76 <_malloc_r+0x26>
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	6033      	str	r3, [r6, #0]
 8006b70:	2000      	movs	r0, #0
 8006b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c4c <_malloc_r+0xfc>
 8006b7a:	f000 f869 	bl	8006c50 <__malloc_lock>
 8006b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b82:	461c      	mov	r4, r3
 8006b84:	bb44      	cbnz	r4, 8006bd8 <_malloc_r+0x88>
 8006b86:	4629      	mov	r1, r5
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f7ff ffbf 	bl	8006b0c <sbrk_aligned>
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	4604      	mov	r4, r0
 8006b92:	d158      	bne.n	8006c46 <_malloc_r+0xf6>
 8006b94:	f8d8 4000 	ldr.w	r4, [r8]
 8006b98:	4627      	mov	r7, r4
 8006b9a:	2f00      	cmp	r7, #0
 8006b9c:	d143      	bne.n	8006c26 <_malloc_r+0xd6>
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	d04b      	beq.n	8006c3a <_malloc_r+0xea>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	eb04 0903 	add.w	r9, r4, r3
 8006bac:	f001 fe46 	bl	800883c <_sbrk_r>
 8006bb0:	4581      	cmp	r9, r0
 8006bb2:	d142      	bne.n	8006c3a <_malloc_r+0xea>
 8006bb4:	6821      	ldr	r1, [r4, #0]
 8006bb6:	1a6d      	subs	r5, r5, r1
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f7ff ffa6 	bl	8006b0c <sbrk_aligned>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d03a      	beq.n	8006c3a <_malloc_r+0xea>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	442b      	add	r3, r5
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	f8d8 3000 	ldr.w	r3, [r8]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	bb62      	cbnz	r2, 8006c2c <_malloc_r+0xdc>
 8006bd2:	f8c8 7000 	str.w	r7, [r8]
 8006bd6:	e00f      	b.n	8006bf8 <_malloc_r+0xa8>
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	1b52      	subs	r2, r2, r5
 8006bdc:	d420      	bmi.n	8006c20 <_malloc_r+0xd0>
 8006bde:	2a0b      	cmp	r2, #11
 8006be0:	d917      	bls.n	8006c12 <_malloc_r+0xc2>
 8006be2:	1961      	adds	r1, r4, r5
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	6025      	str	r5, [r4, #0]
 8006be8:	bf18      	it	ne
 8006bea:	6059      	strne	r1, [r3, #4]
 8006bec:	6863      	ldr	r3, [r4, #4]
 8006bee:	bf08      	it	eq
 8006bf0:	f8c8 1000 	streq.w	r1, [r8]
 8006bf4:	5162      	str	r2, [r4, r5]
 8006bf6:	604b      	str	r3, [r1, #4]
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f000 f82f 	bl	8006c5c <__malloc_unlock>
 8006bfe:	f104 000b 	add.w	r0, r4, #11
 8006c02:	1d23      	adds	r3, r4, #4
 8006c04:	f020 0007 	bic.w	r0, r0, #7
 8006c08:	1ac2      	subs	r2, r0, r3
 8006c0a:	bf1c      	itt	ne
 8006c0c:	1a1b      	subne	r3, r3, r0
 8006c0e:	50a3      	strne	r3, [r4, r2]
 8006c10:	e7af      	b.n	8006b72 <_malloc_r+0x22>
 8006c12:	6862      	ldr	r2, [r4, #4]
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	bf0c      	ite	eq
 8006c18:	f8c8 2000 	streq.w	r2, [r8]
 8006c1c:	605a      	strne	r2, [r3, #4]
 8006c1e:	e7eb      	b.n	8006bf8 <_malloc_r+0xa8>
 8006c20:	4623      	mov	r3, r4
 8006c22:	6864      	ldr	r4, [r4, #4]
 8006c24:	e7ae      	b.n	8006b84 <_malloc_r+0x34>
 8006c26:	463c      	mov	r4, r7
 8006c28:	687f      	ldr	r7, [r7, #4]
 8006c2a:	e7b6      	b.n	8006b9a <_malloc_r+0x4a>
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	42a3      	cmp	r3, r4
 8006c32:	d1fb      	bne.n	8006c2c <_malloc_r+0xdc>
 8006c34:	2300      	movs	r3, #0
 8006c36:	6053      	str	r3, [r2, #4]
 8006c38:	e7de      	b.n	8006bf8 <_malloc_r+0xa8>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	6033      	str	r3, [r6, #0]
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f000 f80c 	bl	8006c5c <__malloc_unlock>
 8006c44:	e794      	b.n	8006b70 <_malloc_r+0x20>
 8006c46:	6005      	str	r5, [r0, #0]
 8006c48:	e7d6      	b.n	8006bf8 <_malloc_r+0xa8>
 8006c4a:	bf00      	nop
 8006c4c:	20000534 	.word	0x20000534

08006c50 <__malloc_lock>:
 8006c50:	4801      	ldr	r0, [pc, #4]	@ (8006c58 <__malloc_lock+0x8>)
 8006c52:	f7ff b8a4 	b.w	8005d9e <__retarget_lock_acquire_recursive>
 8006c56:	bf00      	nop
 8006c58:	2000052c 	.word	0x2000052c

08006c5c <__malloc_unlock>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	@ (8006c64 <__malloc_unlock+0x8>)
 8006c5e:	f7ff b89f 	b.w	8005da0 <__retarget_lock_release_recursive>
 8006c62:	bf00      	nop
 8006c64:	2000052c 	.word	0x2000052c

08006c68 <_Balloc>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	69c6      	ldr	r6, [r0, #28]
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	460d      	mov	r5, r1
 8006c70:	b976      	cbnz	r6, 8006c90 <_Balloc+0x28>
 8006c72:	2010      	movs	r0, #16
 8006c74:	f7ff ff42 	bl	8006afc <malloc>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	61e0      	str	r0, [r4, #28]
 8006c7c:	b920      	cbnz	r0, 8006c88 <_Balloc+0x20>
 8006c7e:	4b18      	ldr	r3, [pc, #96]	@ (8006ce0 <_Balloc+0x78>)
 8006c80:	4818      	ldr	r0, [pc, #96]	@ (8006ce4 <_Balloc+0x7c>)
 8006c82:	216b      	movs	r1, #107	@ 0x6b
 8006c84:	f001 fdf4 	bl	8008870 <__assert_func>
 8006c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c8c:	6006      	str	r6, [r0, #0]
 8006c8e:	60c6      	str	r6, [r0, #12]
 8006c90:	69e6      	ldr	r6, [r4, #28]
 8006c92:	68f3      	ldr	r3, [r6, #12]
 8006c94:	b183      	cbz	r3, 8006cb8 <_Balloc+0x50>
 8006c96:	69e3      	ldr	r3, [r4, #28]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c9e:	b9b8      	cbnz	r0, 8006cd0 <_Balloc+0x68>
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	fa01 f605 	lsl.w	r6, r1, r5
 8006ca6:	1d72      	adds	r2, r6, #5
 8006ca8:	0092      	lsls	r2, r2, #2
 8006caa:	4620      	mov	r0, r4
 8006cac:	f001 fdfe 	bl	80088ac <_calloc_r>
 8006cb0:	b160      	cbz	r0, 8006ccc <_Balloc+0x64>
 8006cb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cb6:	e00e      	b.n	8006cd6 <_Balloc+0x6e>
 8006cb8:	2221      	movs	r2, #33	@ 0x21
 8006cba:	2104      	movs	r1, #4
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f001 fdf5 	bl	80088ac <_calloc_r>
 8006cc2:	69e3      	ldr	r3, [r4, #28]
 8006cc4:	60f0      	str	r0, [r6, #12]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e4      	bne.n	8006c96 <_Balloc+0x2e>
 8006ccc:	2000      	movs	r0, #0
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	6802      	ldr	r2, [r0, #0]
 8006cd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cdc:	e7f7      	b.n	8006cce <_Balloc+0x66>
 8006cde:	bf00      	nop
 8006ce0:	080094ce 	.word	0x080094ce
 8006ce4:	0800954e 	.word	0x0800954e

08006ce8 <_Bfree>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	69c6      	ldr	r6, [r0, #28]
 8006cec:	4605      	mov	r5, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b976      	cbnz	r6, 8006d10 <_Bfree+0x28>
 8006cf2:	2010      	movs	r0, #16
 8006cf4:	f7ff ff02 	bl	8006afc <malloc>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	61e8      	str	r0, [r5, #28]
 8006cfc:	b920      	cbnz	r0, 8006d08 <_Bfree+0x20>
 8006cfe:	4b09      	ldr	r3, [pc, #36]	@ (8006d24 <_Bfree+0x3c>)
 8006d00:	4809      	ldr	r0, [pc, #36]	@ (8006d28 <_Bfree+0x40>)
 8006d02:	218f      	movs	r1, #143	@ 0x8f
 8006d04:	f001 fdb4 	bl	8008870 <__assert_func>
 8006d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d0c:	6006      	str	r6, [r0, #0]
 8006d0e:	60c6      	str	r6, [r0, #12]
 8006d10:	b13c      	cbz	r4, 8006d22 <_Bfree+0x3a>
 8006d12:	69eb      	ldr	r3, [r5, #28]
 8006d14:	6862      	ldr	r2, [r4, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d1c:	6021      	str	r1, [r4, #0]
 8006d1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	080094ce 	.word	0x080094ce
 8006d28:	0800954e 	.word	0x0800954e

08006d2c <__multadd>:
 8006d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	690d      	ldr	r5, [r1, #16]
 8006d32:	4607      	mov	r7, r0
 8006d34:	460c      	mov	r4, r1
 8006d36:	461e      	mov	r6, r3
 8006d38:	f101 0c14 	add.w	ip, r1, #20
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	f8dc 3000 	ldr.w	r3, [ip]
 8006d42:	b299      	uxth	r1, r3
 8006d44:	fb02 6101 	mla	r1, r2, r1, r6
 8006d48:	0c1e      	lsrs	r6, r3, #16
 8006d4a:	0c0b      	lsrs	r3, r1, #16
 8006d4c:	fb02 3306 	mla	r3, r2, r6, r3
 8006d50:	b289      	uxth	r1, r1
 8006d52:	3001      	adds	r0, #1
 8006d54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d58:	4285      	cmp	r5, r0
 8006d5a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d62:	dcec      	bgt.n	8006d3e <__multadd+0x12>
 8006d64:	b30e      	cbz	r6, 8006daa <__multadd+0x7e>
 8006d66:	68a3      	ldr	r3, [r4, #8]
 8006d68:	42ab      	cmp	r3, r5
 8006d6a:	dc19      	bgt.n	8006da0 <__multadd+0x74>
 8006d6c:	6861      	ldr	r1, [r4, #4]
 8006d6e:	4638      	mov	r0, r7
 8006d70:	3101      	adds	r1, #1
 8006d72:	f7ff ff79 	bl	8006c68 <_Balloc>
 8006d76:	4680      	mov	r8, r0
 8006d78:	b928      	cbnz	r0, 8006d86 <__multadd+0x5a>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006db0 <__multadd+0x84>)
 8006d7e:	480d      	ldr	r0, [pc, #52]	@ (8006db4 <__multadd+0x88>)
 8006d80:	21ba      	movs	r1, #186	@ 0xba
 8006d82:	f001 fd75 	bl	8008870 <__assert_func>
 8006d86:	6922      	ldr	r2, [r4, #16]
 8006d88:	3202      	adds	r2, #2
 8006d8a:	f104 010c 	add.w	r1, r4, #12
 8006d8e:	0092      	lsls	r2, r2, #2
 8006d90:	300c      	adds	r0, #12
 8006d92:	f7ff f806 	bl	8005da2 <memcpy>
 8006d96:	4621      	mov	r1, r4
 8006d98:	4638      	mov	r0, r7
 8006d9a:	f7ff ffa5 	bl	8006ce8 <_Bfree>
 8006d9e:	4644      	mov	r4, r8
 8006da0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006da4:	3501      	adds	r5, #1
 8006da6:	615e      	str	r6, [r3, #20]
 8006da8:	6125      	str	r5, [r4, #16]
 8006daa:	4620      	mov	r0, r4
 8006dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db0:	0800953d 	.word	0x0800953d
 8006db4:	0800954e 	.word	0x0800954e

08006db8 <__s2b>:
 8006db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	4615      	mov	r5, r2
 8006dc0:	461f      	mov	r7, r3
 8006dc2:	2209      	movs	r2, #9
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dcc:	2100      	movs	r1, #0
 8006dce:	2201      	movs	r2, #1
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	db09      	blt.n	8006de8 <__s2b+0x30>
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f7ff ff47 	bl	8006c68 <_Balloc>
 8006dda:	b940      	cbnz	r0, 8006dee <__s2b+0x36>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	4b19      	ldr	r3, [pc, #100]	@ (8006e44 <__s2b+0x8c>)
 8006de0:	4819      	ldr	r0, [pc, #100]	@ (8006e48 <__s2b+0x90>)
 8006de2:	21d3      	movs	r1, #211	@ 0xd3
 8006de4:	f001 fd44 	bl	8008870 <__assert_func>
 8006de8:	0052      	lsls	r2, r2, #1
 8006dea:	3101      	adds	r1, #1
 8006dec:	e7f0      	b.n	8006dd0 <__s2b+0x18>
 8006dee:	9b08      	ldr	r3, [sp, #32]
 8006df0:	6143      	str	r3, [r0, #20]
 8006df2:	2d09      	cmp	r5, #9
 8006df4:	f04f 0301 	mov.w	r3, #1
 8006df8:	6103      	str	r3, [r0, #16]
 8006dfa:	dd16      	ble.n	8006e2a <__s2b+0x72>
 8006dfc:	f104 0909 	add.w	r9, r4, #9
 8006e00:	46c8      	mov	r8, r9
 8006e02:	442c      	add	r4, r5
 8006e04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e08:	4601      	mov	r1, r0
 8006e0a:	3b30      	subs	r3, #48	@ 0x30
 8006e0c:	220a      	movs	r2, #10
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f7ff ff8c 	bl	8006d2c <__multadd>
 8006e14:	45a0      	cmp	r8, r4
 8006e16:	d1f5      	bne.n	8006e04 <__s2b+0x4c>
 8006e18:	f1a5 0408 	sub.w	r4, r5, #8
 8006e1c:	444c      	add	r4, r9
 8006e1e:	1b2d      	subs	r5, r5, r4
 8006e20:	1963      	adds	r3, r4, r5
 8006e22:	42bb      	cmp	r3, r7
 8006e24:	db04      	blt.n	8006e30 <__s2b+0x78>
 8006e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2a:	340a      	adds	r4, #10
 8006e2c:	2509      	movs	r5, #9
 8006e2e:	e7f6      	b.n	8006e1e <__s2b+0x66>
 8006e30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e34:	4601      	mov	r1, r0
 8006e36:	3b30      	subs	r3, #48	@ 0x30
 8006e38:	220a      	movs	r2, #10
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	f7ff ff76 	bl	8006d2c <__multadd>
 8006e40:	e7ee      	b.n	8006e20 <__s2b+0x68>
 8006e42:	bf00      	nop
 8006e44:	0800953d 	.word	0x0800953d
 8006e48:	0800954e 	.word	0x0800954e

08006e4c <__hi0bits>:
 8006e4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006e50:	4603      	mov	r3, r0
 8006e52:	bf36      	itet	cc
 8006e54:	0403      	lslcc	r3, r0, #16
 8006e56:	2000      	movcs	r0, #0
 8006e58:	2010      	movcc	r0, #16
 8006e5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e5e:	bf3c      	itt	cc
 8006e60:	021b      	lslcc	r3, r3, #8
 8006e62:	3008      	addcc	r0, #8
 8006e64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e68:	bf3c      	itt	cc
 8006e6a:	011b      	lslcc	r3, r3, #4
 8006e6c:	3004      	addcc	r0, #4
 8006e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e72:	bf3c      	itt	cc
 8006e74:	009b      	lslcc	r3, r3, #2
 8006e76:	3002      	addcc	r0, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	db05      	blt.n	8006e88 <__hi0bits+0x3c>
 8006e7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e80:	f100 0001 	add.w	r0, r0, #1
 8006e84:	bf08      	it	eq
 8006e86:	2020      	moveq	r0, #32
 8006e88:	4770      	bx	lr

08006e8a <__lo0bits>:
 8006e8a:	6803      	ldr	r3, [r0, #0]
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	f013 0007 	ands.w	r0, r3, #7
 8006e92:	d00b      	beq.n	8006eac <__lo0bits+0x22>
 8006e94:	07d9      	lsls	r1, r3, #31
 8006e96:	d421      	bmi.n	8006edc <__lo0bits+0x52>
 8006e98:	0798      	lsls	r0, r3, #30
 8006e9a:	bf49      	itett	mi
 8006e9c:	085b      	lsrmi	r3, r3, #1
 8006e9e:	089b      	lsrpl	r3, r3, #2
 8006ea0:	2001      	movmi	r0, #1
 8006ea2:	6013      	strmi	r3, [r2, #0]
 8006ea4:	bf5c      	itt	pl
 8006ea6:	6013      	strpl	r3, [r2, #0]
 8006ea8:	2002      	movpl	r0, #2
 8006eaa:	4770      	bx	lr
 8006eac:	b299      	uxth	r1, r3
 8006eae:	b909      	cbnz	r1, 8006eb4 <__lo0bits+0x2a>
 8006eb0:	0c1b      	lsrs	r3, r3, #16
 8006eb2:	2010      	movs	r0, #16
 8006eb4:	b2d9      	uxtb	r1, r3
 8006eb6:	b909      	cbnz	r1, 8006ebc <__lo0bits+0x32>
 8006eb8:	3008      	adds	r0, #8
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	0719      	lsls	r1, r3, #28
 8006ebe:	bf04      	itt	eq
 8006ec0:	091b      	lsreq	r3, r3, #4
 8006ec2:	3004      	addeq	r0, #4
 8006ec4:	0799      	lsls	r1, r3, #30
 8006ec6:	bf04      	itt	eq
 8006ec8:	089b      	lsreq	r3, r3, #2
 8006eca:	3002      	addeq	r0, #2
 8006ecc:	07d9      	lsls	r1, r3, #31
 8006ece:	d403      	bmi.n	8006ed8 <__lo0bits+0x4e>
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	f100 0001 	add.w	r0, r0, #1
 8006ed6:	d003      	beq.n	8006ee0 <__lo0bits+0x56>
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	4770      	bx	lr
 8006edc:	2000      	movs	r0, #0
 8006ede:	4770      	bx	lr
 8006ee0:	2020      	movs	r0, #32
 8006ee2:	4770      	bx	lr

08006ee4 <__i2b>:
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	2101      	movs	r1, #1
 8006eea:	f7ff febd 	bl	8006c68 <_Balloc>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	b928      	cbnz	r0, 8006efe <__i2b+0x1a>
 8006ef2:	4b05      	ldr	r3, [pc, #20]	@ (8006f08 <__i2b+0x24>)
 8006ef4:	4805      	ldr	r0, [pc, #20]	@ (8006f0c <__i2b+0x28>)
 8006ef6:	f240 1145 	movw	r1, #325	@ 0x145
 8006efa:	f001 fcb9 	bl	8008870 <__assert_func>
 8006efe:	2301      	movs	r3, #1
 8006f00:	6144      	str	r4, [r0, #20]
 8006f02:	6103      	str	r3, [r0, #16]
 8006f04:	bd10      	pop	{r4, pc}
 8006f06:	bf00      	nop
 8006f08:	0800953d 	.word	0x0800953d
 8006f0c:	0800954e 	.word	0x0800954e

08006f10 <__multiply>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	4614      	mov	r4, r2
 8006f16:	690a      	ldr	r2, [r1, #16]
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	bfa8      	it	ge
 8006f1e:	4623      	movge	r3, r4
 8006f20:	460f      	mov	r7, r1
 8006f22:	bfa4      	itt	ge
 8006f24:	460c      	movge	r4, r1
 8006f26:	461f      	movge	r7, r3
 8006f28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006f30:	68a3      	ldr	r3, [r4, #8]
 8006f32:	6861      	ldr	r1, [r4, #4]
 8006f34:	eb0a 0609 	add.w	r6, sl, r9
 8006f38:	42b3      	cmp	r3, r6
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	bfb8      	it	lt
 8006f3e:	3101      	addlt	r1, #1
 8006f40:	f7ff fe92 	bl	8006c68 <_Balloc>
 8006f44:	b930      	cbnz	r0, 8006f54 <__multiply+0x44>
 8006f46:	4602      	mov	r2, r0
 8006f48:	4b44      	ldr	r3, [pc, #272]	@ (800705c <__multiply+0x14c>)
 8006f4a:	4845      	ldr	r0, [pc, #276]	@ (8007060 <__multiply+0x150>)
 8006f4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006f50:	f001 fc8e 	bl	8008870 <__assert_func>
 8006f54:	f100 0514 	add.w	r5, r0, #20
 8006f58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	2200      	movs	r2, #0
 8006f60:	4543      	cmp	r3, r8
 8006f62:	d321      	bcc.n	8006fa8 <__multiply+0x98>
 8006f64:	f107 0114 	add.w	r1, r7, #20
 8006f68:	f104 0214 	add.w	r2, r4, #20
 8006f6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006f70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006f74:	9302      	str	r3, [sp, #8]
 8006f76:	1b13      	subs	r3, r2, r4
 8006f78:	3b15      	subs	r3, #21
 8006f7a:	f023 0303 	bic.w	r3, r3, #3
 8006f7e:	3304      	adds	r3, #4
 8006f80:	f104 0715 	add.w	r7, r4, #21
 8006f84:	42ba      	cmp	r2, r7
 8006f86:	bf38      	it	cc
 8006f88:	2304      	movcc	r3, #4
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	9b02      	ldr	r3, [sp, #8]
 8006f8e:	9103      	str	r1, [sp, #12]
 8006f90:	428b      	cmp	r3, r1
 8006f92:	d80c      	bhi.n	8006fae <__multiply+0x9e>
 8006f94:	2e00      	cmp	r6, #0
 8006f96:	dd03      	ble.n	8006fa0 <__multiply+0x90>
 8006f98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d05b      	beq.n	8007058 <__multiply+0x148>
 8006fa0:	6106      	str	r6, [r0, #16]
 8006fa2:	b005      	add	sp, #20
 8006fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa8:	f843 2b04 	str.w	r2, [r3], #4
 8006fac:	e7d8      	b.n	8006f60 <__multiply+0x50>
 8006fae:	f8b1 a000 	ldrh.w	sl, [r1]
 8006fb2:	f1ba 0f00 	cmp.w	sl, #0
 8006fb6:	d024      	beq.n	8007002 <__multiply+0xf2>
 8006fb8:	f104 0e14 	add.w	lr, r4, #20
 8006fbc:	46a9      	mov	r9, r5
 8006fbe:	f04f 0c00 	mov.w	ip, #0
 8006fc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006fc6:	f8d9 3000 	ldr.w	r3, [r9]
 8006fca:	fa1f fb87 	uxth.w	fp, r7
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	fb0a 330b 	mla	r3, sl, fp, r3
 8006fd4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006fd8:	f8d9 7000 	ldr.w	r7, [r9]
 8006fdc:	4463      	add	r3, ip
 8006fde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006fe2:	fb0a c70b 	mla	r7, sl, fp, ip
 8006fe6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ff0:	4572      	cmp	r2, lr
 8006ff2:	f849 3b04 	str.w	r3, [r9], #4
 8006ff6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ffa:	d8e2      	bhi.n	8006fc2 <__multiply+0xb2>
 8006ffc:	9b01      	ldr	r3, [sp, #4]
 8006ffe:	f845 c003 	str.w	ip, [r5, r3]
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007008:	3104      	adds	r1, #4
 800700a:	f1b9 0f00 	cmp.w	r9, #0
 800700e:	d021      	beq.n	8007054 <__multiply+0x144>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	f104 0c14 	add.w	ip, r4, #20
 8007016:	46ae      	mov	lr, r5
 8007018:	f04f 0a00 	mov.w	sl, #0
 800701c:	f8bc b000 	ldrh.w	fp, [ip]
 8007020:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007024:	fb09 770b 	mla	r7, r9, fp, r7
 8007028:	4457      	add	r7, sl
 800702a:	b29b      	uxth	r3, r3
 800702c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007030:	f84e 3b04 	str.w	r3, [lr], #4
 8007034:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007038:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800703c:	f8be 3000 	ldrh.w	r3, [lr]
 8007040:	fb09 330a 	mla	r3, r9, sl, r3
 8007044:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007048:	4562      	cmp	r2, ip
 800704a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800704e:	d8e5      	bhi.n	800701c <__multiply+0x10c>
 8007050:	9f01      	ldr	r7, [sp, #4]
 8007052:	51eb      	str	r3, [r5, r7]
 8007054:	3504      	adds	r5, #4
 8007056:	e799      	b.n	8006f8c <__multiply+0x7c>
 8007058:	3e01      	subs	r6, #1
 800705a:	e79b      	b.n	8006f94 <__multiply+0x84>
 800705c:	0800953d 	.word	0x0800953d
 8007060:	0800954e 	.word	0x0800954e

08007064 <__pow5mult>:
 8007064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007068:	4615      	mov	r5, r2
 800706a:	f012 0203 	ands.w	r2, r2, #3
 800706e:	4607      	mov	r7, r0
 8007070:	460e      	mov	r6, r1
 8007072:	d007      	beq.n	8007084 <__pow5mult+0x20>
 8007074:	4c25      	ldr	r4, [pc, #148]	@ (800710c <__pow5mult+0xa8>)
 8007076:	3a01      	subs	r2, #1
 8007078:	2300      	movs	r3, #0
 800707a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800707e:	f7ff fe55 	bl	8006d2c <__multadd>
 8007082:	4606      	mov	r6, r0
 8007084:	10ad      	asrs	r5, r5, #2
 8007086:	d03d      	beq.n	8007104 <__pow5mult+0xa0>
 8007088:	69fc      	ldr	r4, [r7, #28]
 800708a:	b97c      	cbnz	r4, 80070ac <__pow5mult+0x48>
 800708c:	2010      	movs	r0, #16
 800708e:	f7ff fd35 	bl	8006afc <malloc>
 8007092:	4602      	mov	r2, r0
 8007094:	61f8      	str	r0, [r7, #28]
 8007096:	b928      	cbnz	r0, 80070a4 <__pow5mult+0x40>
 8007098:	4b1d      	ldr	r3, [pc, #116]	@ (8007110 <__pow5mult+0xac>)
 800709a:	481e      	ldr	r0, [pc, #120]	@ (8007114 <__pow5mult+0xb0>)
 800709c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80070a0:	f001 fbe6 	bl	8008870 <__assert_func>
 80070a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070a8:	6004      	str	r4, [r0, #0]
 80070aa:	60c4      	str	r4, [r0, #12]
 80070ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80070b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070b4:	b94c      	cbnz	r4, 80070ca <__pow5mult+0x66>
 80070b6:	f240 2171 	movw	r1, #625	@ 0x271
 80070ba:	4638      	mov	r0, r7
 80070bc:	f7ff ff12 	bl	8006ee4 <__i2b>
 80070c0:	2300      	movs	r3, #0
 80070c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80070c6:	4604      	mov	r4, r0
 80070c8:	6003      	str	r3, [r0, #0]
 80070ca:	f04f 0900 	mov.w	r9, #0
 80070ce:	07eb      	lsls	r3, r5, #31
 80070d0:	d50a      	bpl.n	80070e8 <__pow5mult+0x84>
 80070d2:	4631      	mov	r1, r6
 80070d4:	4622      	mov	r2, r4
 80070d6:	4638      	mov	r0, r7
 80070d8:	f7ff ff1a 	bl	8006f10 <__multiply>
 80070dc:	4631      	mov	r1, r6
 80070de:	4680      	mov	r8, r0
 80070e0:	4638      	mov	r0, r7
 80070e2:	f7ff fe01 	bl	8006ce8 <_Bfree>
 80070e6:	4646      	mov	r6, r8
 80070e8:	106d      	asrs	r5, r5, #1
 80070ea:	d00b      	beq.n	8007104 <__pow5mult+0xa0>
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	b938      	cbnz	r0, 8007100 <__pow5mult+0x9c>
 80070f0:	4622      	mov	r2, r4
 80070f2:	4621      	mov	r1, r4
 80070f4:	4638      	mov	r0, r7
 80070f6:	f7ff ff0b 	bl	8006f10 <__multiply>
 80070fa:	6020      	str	r0, [r4, #0]
 80070fc:	f8c0 9000 	str.w	r9, [r0]
 8007100:	4604      	mov	r4, r0
 8007102:	e7e4      	b.n	80070ce <__pow5mult+0x6a>
 8007104:	4630      	mov	r0, r6
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	bf00      	nop
 800710c:	080095a8 	.word	0x080095a8
 8007110:	080094ce 	.word	0x080094ce
 8007114:	0800954e 	.word	0x0800954e

08007118 <__lshift>:
 8007118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	460c      	mov	r4, r1
 800711e:	6849      	ldr	r1, [r1, #4]
 8007120:	6923      	ldr	r3, [r4, #16]
 8007122:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007126:	68a3      	ldr	r3, [r4, #8]
 8007128:	4607      	mov	r7, r0
 800712a:	4691      	mov	r9, r2
 800712c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007130:	f108 0601 	add.w	r6, r8, #1
 8007134:	42b3      	cmp	r3, r6
 8007136:	db0b      	blt.n	8007150 <__lshift+0x38>
 8007138:	4638      	mov	r0, r7
 800713a:	f7ff fd95 	bl	8006c68 <_Balloc>
 800713e:	4605      	mov	r5, r0
 8007140:	b948      	cbnz	r0, 8007156 <__lshift+0x3e>
 8007142:	4602      	mov	r2, r0
 8007144:	4b28      	ldr	r3, [pc, #160]	@ (80071e8 <__lshift+0xd0>)
 8007146:	4829      	ldr	r0, [pc, #164]	@ (80071ec <__lshift+0xd4>)
 8007148:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800714c:	f001 fb90 	bl	8008870 <__assert_func>
 8007150:	3101      	adds	r1, #1
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	e7ee      	b.n	8007134 <__lshift+0x1c>
 8007156:	2300      	movs	r3, #0
 8007158:	f100 0114 	add.w	r1, r0, #20
 800715c:	f100 0210 	add.w	r2, r0, #16
 8007160:	4618      	mov	r0, r3
 8007162:	4553      	cmp	r3, sl
 8007164:	db33      	blt.n	80071ce <__lshift+0xb6>
 8007166:	6920      	ldr	r0, [r4, #16]
 8007168:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800716c:	f104 0314 	add.w	r3, r4, #20
 8007170:	f019 091f 	ands.w	r9, r9, #31
 8007174:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007178:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800717c:	d02b      	beq.n	80071d6 <__lshift+0xbe>
 800717e:	f1c9 0e20 	rsb	lr, r9, #32
 8007182:	468a      	mov	sl, r1
 8007184:	2200      	movs	r2, #0
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	fa00 f009 	lsl.w	r0, r0, r9
 800718c:	4310      	orrs	r0, r2
 800718e:	f84a 0b04 	str.w	r0, [sl], #4
 8007192:	f853 2b04 	ldr.w	r2, [r3], #4
 8007196:	459c      	cmp	ip, r3
 8007198:	fa22 f20e 	lsr.w	r2, r2, lr
 800719c:	d8f3      	bhi.n	8007186 <__lshift+0x6e>
 800719e:	ebac 0304 	sub.w	r3, ip, r4
 80071a2:	3b15      	subs	r3, #21
 80071a4:	f023 0303 	bic.w	r3, r3, #3
 80071a8:	3304      	adds	r3, #4
 80071aa:	f104 0015 	add.w	r0, r4, #21
 80071ae:	4584      	cmp	ip, r0
 80071b0:	bf38      	it	cc
 80071b2:	2304      	movcc	r3, #4
 80071b4:	50ca      	str	r2, [r1, r3]
 80071b6:	b10a      	cbz	r2, 80071bc <__lshift+0xa4>
 80071b8:	f108 0602 	add.w	r6, r8, #2
 80071bc:	3e01      	subs	r6, #1
 80071be:	4638      	mov	r0, r7
 80071c0:	612e      	str	r6, [r5, #16]
 80071c2:	4621      	mov	r1, r4
 80071c4:	f7ff fd90 	bl	8006ce8 <_Bfree>
 80071c8:	4628      	mov	r0, r5
 80071ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80071d2:	3301      	adds	r3, #1
 80071d4:	e7c5      	b.n	8007162 <__lshift+0x4a>
 80071d6:	3904      	subs	r1, #4
 80071d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80071e0:	459c      	cmp	ip, r3
 80071e2:	d8f9      	bhi.n	80071d8 <__lshift+0xc0>
 80071e4:	e7ea      	b.n	80071bc <__lshift+0xa4>
 80071e6:	bf00      	nop
 80071e8:	0800953d 	.word	0x0800953d
 80071ec:	0800954e 	.word	0x0800954e

080071f0 <__mcmp>:
 80071f0:	690a      	ldr	r2, [r1, #16]
 80071f2:	4603      	mov	r3, r0
 80071f4:	6900      	ldr	r0, [r0, #16]
 80071f6:	1a80      	subs	r0, r0, r2
 80071f8:	b530      	push	{r4, r5, lr}
 80071fa:	d10e      	bne.n	800721a <__mcmp+0x2a>
 80071fc:	3314      	adds	r3, #20
 80071fe:	3114      	adds	r1, #20
 8007200:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007204:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007208:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800720c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007210:	4295      	cmp	r5, r2
 8007212:	d003      	beq.n	800721c <__mcmp+0x2c>
 8007214:	d205      	bcs.n	8007222 <__mcmp+0x32>
 8007216:	f04f 30ff 	mov.w	r0, #4294967295
 800721a:	bd30      	pop	{r4, r5, pc}
 800721c:	42a3      	cmp	r3, r4
 800721e:	d3f3      	bcc.n	8007208 <__mcmp+0x18>
 8007220:	e7fb      	b.n	800721a <__mcmp+0x2a>
 8007222:	2001      	movs	r0, #1
 8007224:	e7f9      	b.n	800721a <__mcmp+0x2a>
	...

08007228 <__mdiff>:
 8007228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	4689      	mov	r9, r1
 800722e:	4606      	mov	r6, r0
 8007230:	4611      	mov	r1, r2
 8007232:	4648      	mov	r0, r9
 8007234:	4614      	mov	r4, r2
 8007236:	f7ff ffdb 	bl	80071f0 <__mcmp>
 800723a:	1e05      	subs	r5, r0, #0
 800723c:	d112      	bne.n	8007264 <__mdiff+0x3c>
 800723e:	4629      	mov	r1, r5
 8007240:	4630      	mov	r0, r6
 8007242:	f7ff fd11 	bl	8006c68 <_Balloc>
 8007246:	4602      	mov	r2, r0
 8007248:	b928      	cbnz	r0, 8007256 <__mdiff+0x2e>
 800724a:	4b3f      	ldr	r3, [pc, #252]	@ (8007348 <__mdiff+0x120>)
 800724c:	f240 2137 	movw	r1, #567	@ 0x237
 8007250:	483e      	ldr	r0, [pc, #248]	@ (800734c <__mdiff+0x124>)
 8007252:	f001 fb0d 	bl	8008870 <__assert_func>
 8007256:	2301      	movs	r3, #1
 8007258:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800725c:	4610      	mov	r0, r2
 800725e:	b003      	add	sp, #12
 8007260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007264:	bfbc      	itt	lt
 8007266:	464b      	movlt	r3, r9
 8007268:	46a1      	movlt	r9, r4
 800726a:	4630      	mov	r0, r6
 800726c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007270:	bfba      	itte	lt
 8007272:	461c      	movlt	r4, r3
 8007274:	2501      	movlt	r5, #1
 8007276:	2500      	movge	r5, #0
 8007278:	f7ff fcf6 	bl	8006c68 <_Balloc>
 800727c:	4602      	mov	r2, r0
 800727e:	b918      	cbnz	r0, 8007288 <__mdiff+0x60>
 8007280:	4b31      	ldr	r3, [pc, #196]	@ (8007348 <__mdiff+0x120>)
 8007282:	f240 2145 	movw	r1, #581	@ 0x245
 8007286:	e7e3      	b.n	8007250 <__mdiff+0x28>
 8007288:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800728c:	6926      	ldr	r6, [r4, #16]
 800728e:	60c5      	str	r5, [r0, #12]
 8007290:	f109 0310 	add.w	r3, r9, #16
 8007294:	f109 0514 	add.w	r5, r9, #20
 8007298:	f104 0e14 	add.w	lr, r4, #20
 800729c:	f100 0b14 	add.w	fp, r0, #20
 80072a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80072a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	46d9      	mov	r9, fp
 80072ac:	f04f 0c00 	mov.w	ip, #0
 80072b0:	9b01      	ldr	r3, [sp, #4]
 80072b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80072b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80072ba:	9301      	str	r3, [sp, #4]
 80072bc:	fa1f f38a 	uxth.w	r3, sl
 80072c0:	4619      	mov	r1, r3
 80072c2:	b283      	uxth	r3, r0
 80072c4:	1acb      	subs	r3, r1, r3
 80072c6:	0c00      	lsrs	r0, r0, #16
 80072c8:	4463      	add	r3, ip
 80072ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80072ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80072d8:	4576      	cmp	r6, lr
 80072da:	f849 3b04 	str.w	r3, [r9], #4
 80072de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072e2:	d8e5      	bhi.n	80072b0 <__mdiff+0x88>
 80072e4:	1b33      	subs	r3, r6, r4
 80072e6:	3b15      	subs	r3, #21
 80072e8:	f023 0303 	bic.w	r3, r3, #3
 80072ec:	3415      	adds	r4, #21
 80072ee:	3304      	adds	r3, #4
 80072f0:	42a6      	cmp	r6, r4
 80072f2:	bf38      	it	cc
 80072f4:	2304      	movcc	r3, #4
 80072f6:	441d      	add	r5, r3
 80072f8:	445b      	add	r3, fp
 80072fa:	461e      	mov	r6, r3
 80072fc:	462c      	mov	r4, r5
 80072fe:	4544      	cmp	r4, r8
 8007300:	d30e      	bcc.n	8007320 <__mdiff+0xf8>
 8007302:	f108 0103 	add.w	r1, r8, #3
 8007306:	1b49      	subs	r1, r1, r5
 8007308:	f021 0103 	bic.w	r1, r1, #3
 800730c:	3d03      	subs	r5, #3
 800730e:	45a8      	cmp	r8, r5
 8007310:	bf38      	it	cc
 8007312:	2100      	movcc	r1, #0
 8007314:	440b      	add	r3, r1
 8007316:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800731a:	b191      	cbz	r1, 8007342 <__mdiff+0x11a>
 800731c:	6117      	str	r7, [r2, #16]
 800731e:	e79d      	b.n	800725c <__mdiff+0x34>
 8007320:	f854 1b04 	ldr.w	r1, [r4], #4
 8007324:	46e6      	mov	lr, ip
 8007326:	0c08      	lsrs	r0, r1, #16
 8007328:	fa1c fc81 	uxtah	ip, ip, r1
 800732c:	4471      	add	r1, lr
 800732e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007332:	b289      	uxth	r1, r1
 8007334:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007338:	f846 1b04 	str.w	r1, [r6], #4
 800733c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007340:	e7dd      	b.n	80072fe <__mdiff+0xd6>
 8007342:	3f01      	subs	r7, #1
 8007344:	e7e7      	b.n	8007316 <__mdiff+0xee>
 8007346:	bf00      	nop
 8007348:	0800953d 	.word	0x0800953d
 800734c:	0800954e 	.word	0x0800954e

08007350 <__ulp>:
 8007350:	b082      	sub	sp, #8
 8007352:	ed8d 0b00 	vstr	d0, [sp]
 8007356:	9a01      	ldr	r2, [sp, #4]
 8007358:	4b0f      	ldr	r3, [pc, #60]	@ (8007398 <__ulp+0x48>)
 800735a:	4013      	ands	r3, r2
 800735c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007360:	2b00      	cmp	r3, #0
 8007362:	dc08      	bgt.n	8007376 <__ulp+0x26>
 8007364:	425b      	negs	r3, r3
 8007366:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800736a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800736e:	da04      	bge.n	800737a <__ulp+0x2a>
 8007370:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007374:	4113      	asrs	r3, r2
 8007376:	2200      	movs	r2, #0
 8007378:	e008      	b.n	800738c <__ulp+0x3c>
 800737a:	f1a2 0314 	sub.w	r3, r2, #20
 800737e:	2b1e      	cmp	r3, #30
 8007380:	bfda      	itte	le
 8007382:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007386:	40da      	lsrle	r2, r3
 8007388:	2201      	movgt	r2, #1
 800738a:	2300      	movs	r3, #0
 800738c:	4619      	mov	r1, r3
 800738e:	4610      	mov	r0, r2
 8007390:	ec41 0b10 	vmov	d0, r0, r1
 8007394:	b002      	add	sp, #8
 8007396:	4770      	bx	lr
 8007398:	7ff00000 	.word	0x7ff00000

0800739c <__b2d>:
 800739c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a0:	6906      	ldr	r6, [r0, #16]
 80073a2:	f100 0814 	add.w	r8, r0, #20
 80073a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80073aa:	1f37      	subs	r7, r6, #4
 80073ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80073b0:	4610      	mov	r0, r2
 80073b2:	f7ff fd4b 	bl	8006e4c <__hi0bits>
 80073b6:	f1c0 0320 	rsb	r3, r0, #32
 80073ba:	280a      	cmp	r0, #10
 80073bc:	600b      	str	r3, [r1, #0]
 80073be:	491b      	ldr	r1, [pc, #108]	@ (800742c <__b2d+0x90>)
 80073c0:	dc15      	bgt.n	80073ee <__b2d+0x52>
 80073c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80073c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80073ca:	45b8      	cmp	r8, r7
 80073cc:	ea43 0501 	orr.w	r5, r3, r1
 80073d0:	bf34      	ite	cc
 80073d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80073d6:	2300      	movcs	r3, #0
 80073d8:	3015      	adds	r0, #21
 80073da:	fa02 f000 	lsl.w	r0, r2, r0
 80073de:	fa23 f30c 	lsr.w	r3, r3, ip
 80073e2:	4303      	orrs	r3, r0
 80073e4:	461c      	mov	r4, r3
 80073e6:	ec45 4b10 	vmov	d0, r4, r5
 80073ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ee:	45b8      	cmp	r8, r7
 80073f0:	bf3a      	itte	cc
 80073f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80073f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80073fa:	2300      	movcs	r3, #0
 80073fc:	380b      	subs	r0, #11
 80073fe:	d012      	beq.n	8007426 <__b2d+0x8a>
 8007400:	f1c0 0120 	rsb	r1, r0, #32
 8007404:	fa23 f401 	lsr.w	r4, r3, r1
 8007408:	4082      	lsls	r2, r0
 800740a:	4322      	orrs	r2, r4
 800740c:	4547      	cmp	r7, r8
 800740e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007412:	bf8c      	ite	hi
 8007414:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007418:	2200      	movls	r2, #0
 800741a:	4083      	lsls	r3, r0
 800741c:	40ca      	lsrs	r2, r1
 800741e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007422:	4313      	orrs	r3, r2
 8007424:	e7de      	b.n	80073e4 <__b2d+0x48>
 8007426:	ea42 0501 	orr.w	r5, r2, r1
 800742a:	e7db      	b.n	80073e4 <__b2d+0x48>
 800742c:	3ff00000 	.word	0x3ff00000

08007430 <__d2b>:
 8007430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007434:	460f      	mov	r7, r1
 8007436:	2101      	movs	r1, #1
 8007438:	ec59 8b10 	vmov	r8, r9, d0
 800743c:	4616      	mov	r6, r2
 800743e:	f7ff fc13 	bl	8006c68 <_Balloc>
 8007442:	4604      	mov	r4, r0
 8007444:	b930      	cbnz	r0, 8007454 <__d2b+0x24>
 8007446:	4602      	mov	r2, r0
 8007448:	4b23      	ldr	r3, [pc, #140]	@ (80074d8 <__d2b+0xa8>)
 800744a:	4824      	ldr	r0, [pc, #144]	@ (80074dc <__d2b+0xac>)
 800744c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007450:	f001 fa0e 	bl	8008870 <__assert_func>
 8007454:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007458:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800745c:	b10d      	cbz	r5, 8007462 <__d2b+0x32>
 800745e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	f1b8 0300 	subs.w	r3, r8, #0
 8007468:	d023      	beq.n	80074b2 <__d2b+0x82>
 800746a:	4668      	mov	r0, sp
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	f7ff fd0c 	bl	8006e8a <__lo0bits>
 8007472:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007476:	b1d0      	cbz	r0, 80074ae <__d2b+0x7e>
 8007478:	f1c0 0320 	rsb	r3, r0, #32
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	430b      	orrs	r3, r1
 8007482:	40c2      	lsrs	r2, r0
 8007484:	6163      	str	r3, [r4, #20]
 8007486:	9201      	str	r2, [sp, #4]
 8007488:	9b01      	ldr	r3, [sp, #4]
 800748a:	61a3      	str	r3, [r4, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	bf0c      	ite	eq
 8007490:	2201      	moveq	r2, #1
 8007492:	2202      	movne	r2, #2
 8007494:	6122      	str	r2, [r4, #16]
 8007496:	b1a5      	cbz	r5, 80074c2 <__d2b+0x92>
 8007498:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800749c:	4405      	add	r5, r0
 800749e:	603d      	str	r5, [r7, #0]
 80074a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80074a4:	6030      	str	r0, [r6, #0]
 80074a6:	4620      	mov	r0, r4
 80074a8:	b003      	add	sp, #12
 80074aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074ae:	6161      	str	r1, [r4, #20]
 80074b0:	e7ea      	b.n	8007488 <__d2b+0x58>
 80074b2:	a801      	add	r0, sp, #4
 80074b4:	f7ff fce9 	bl	8006e8a <__lo0bits>
 80074b8:	9b01      	ldr	r3, [sp, #4]
 80074ba:	6163      	str	r3, [r4, #20]
 80074bc:	3020      	adds	r0, #32
 80074be:	2201      	movs	r2, #1
 80074c0:	e7e8      	b.n	8007494 <__d2b+0x64>
 80074c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80074ca:	6038      	str	r0, [r7, #0]
 80074cc:	6918      	ldr	r0, [r3, #16]
 80074ce:	f7ff fcbd 	bl	8006e4c <__hi0bits>
 80074d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074d6:	e7e5      	b.n	80074a4 <__d2b+0x74>
 80074d8:	0800953d 	.word	0x0800953d
 80074dc:	0800954e 	.word	0x0800954e

080074e0 <__ratio>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	b085      	sub	sp, #20
 80074e6:	e9cd 1000 	strd	r1, r0, [sp]
 80074ea:	a902      	add	r1, sp, #8
 80074ec:	f7ff ff56 	bl	800739c <__b2d>
 80074f0:	9800      	ldr	r0, [sp, #0]
 80074f2:	a903      	add	r1, sp, #12
 80074f4:	ec55 4b10 	vmov	r4, r5, d0
 80074f8:	f7ff ff50 	bl	800739c <__b2d>
 80074fc:	9b01      	ldr	r3, [sp, #4]
 80074fe:	6919      	ldr	r1, [r3, #16]
 8007500:	9b00      	ldr	r3, [sp, #0]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	1ac9      	subs	r1, r1, r3
 8007506:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800750a:	1a9b      	subs	r3, r3, r2
 800750c:	ec5b ab10 	vmov	sl, fp, d0
 8007510:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007514:	2b00      	cmp	r3, #0
 8007516:	bfce      	itee	gt
 8007518:	462a      	movgt	r2, r5
 800751a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800751e:	465a      	movle	r2, fp
 8007520:	462f      	mov	r7, r5
 8007522:	46d9      	mov	r9, fp
 8007524:	bfcc      	ite	gt
 8007526:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800752a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800752e:	464b      	mov	r3, r9
 8007530:	4652      	mov	r2, sl
 8007532:	4620      	mov	r0, r4
 8007534:	4639      	mov	r1, r7
 8007536:	f7f9 f991 	bl	800085c <__aeabi_ddiv>
 800753a:	ec41 0b10 	vmov	d0, r0, r1
 800753e:	b005      	add	sp, #20
 8007540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007544 <__copybits>:
 8007544:	3901      	subs	r1, #1
 8007546:	b570      	push	{r4, r5, r6, lr}
 8007548:	1149      	asrs	r1, r1, #5
 800754a:	6914      	ldr	r4, [r2, #16]
 800754c:	3101      	adds	r1, #1
 800754e:	f102 0314 	add.w	r3, r2, #20
 8007552:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007556:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800755a:	1f05      	subs	r5, r0, #4
 800755c:	42a3      	cmp	r3, r4
 800755e:	d30c      	bcc.n	800757a <__copybits+0x36>
 8007560:	1aa3      	subs	r3, r4, r2
 8007562:	3b11      	subs	r3, #17
 8007564:	f023 0303 	bic.w	r3, r3, #3
 8007568:	3211      	adds	r2, #17
 800756a:	42a2      	cmp	r2, r4
 800756c:	bf88      	it	hi
 800756e:	2300      	movhi	r3, #0
 8007570:	4418      	add	r0, r3
 8007572:	2300      	movs	r3, #0
 8007574:	4288      	cmp	r0, r1
 8007576:	d305      	bcc.n	8007584 <__copybits+0x40>
 8007578:	bd70      	pop	{r4, r5, r6, pc}
 800757a:	f853 6b04 	ldr.w	r6, [r3], #4
 800757e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007582:	e7eb      	b.n	800755c <__copybits+0x18>
 8007584:	f840 3b04 	str.w	r3, [r0], #4
 8007588:	e7f4      	b.n	8007574 <__copybits+0x30>

0800758a <__any_on>:
 800758a:	f100 0214 	add.w	r2, r0, #20
 800758e:	6900      	ldr	r0, [r0, #16]
 8007590:	114b      	asrs	r3, r1, #5
 8007592:	4298      	cmp	r0, r3
 8007594:	b510      	push	{r4, lr}
 8007596:	db11      	blt.n	80075bc <__any_on+0x32>
 8007598:	dd0a      	ble.n	80075b0 <__any_on+0x26>
 800759a:	f011 011f 	ands.w	r1, r1, #31
 800759e:	d007      	beq.n	80075b0 <__any_on+0x26>
 80075a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80075a4:	fa24 f001 	lsr.w	r0, r4, r1
 80075a8:	fa00 f101 	lsl.w	r1, r0, r1
 80075ac:	428c      	cmp	r4, r1
 80075ae:	d10b      	bne.n	80075c8 <__any_on+0x3e>
 80075b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d803      	bhi.n	80075c0 <__any_on+0x36>
 80075b8:	2000      	movs	r0, #0
 80075ba:	bd10      	pop	{r4, pc}
 80075bc:	4603      	mov	r3, r0
 80075be:	e7f7      	b.n	80075b0 <__any_on+0x26>
 80075c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075c4:	2900      	cmp	r1, #0
 80075c6:	d0f5      	beq.n	80075b4 <__any_on+0x2a>
 80075c8:	2001      	movs	r0, #1
 80075ca:	e7f6      	b.n	80075ba <__any_on+0x30>

080075cc <sulp>:
 80075cc:	b570      	push	{r4, r5, r6, lr}
 80075ce:	4604      	mov	r4, r0
 80075d0:	460d      	mov	r5, r1
 80075d2:	ec45 4b10 	vmov	d0, r4, r5
 80075d6:	4616      	mov	r6, r2
 80075d8:	f7ff feba 	bl	8007350 <__ulp>
 80075dc:	ec51 0b10 	vmov	r0, r1, d0
 80075e0:	b17e      	cbz	r6, 8007602 <sulp+0x36>
 80075e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80075e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	dd09      	ble.n	8007602 <sulp+0x36>
 80075ee:	051b      	lsls	r3, r3, #20
 80075f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80075f4:	2400      	movs	r4, #0
 80075f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80075fa:	4622      	mov	r2, r4
 80075fc:	462b      	mov	r3, r5
 80075fe:	f7f9 f803 	bl	8000608 <__aeabi_dmul>
 8007602:	ec41 0b10 	vmov	d0, r0, r1
 8007606:	bd70      	pop	{r4, r5, r6, pc}

08007608 <_strtod_l>:
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	b09f      	sub	sp, #124	@ 0x7c
 800760e:	460c      	mov	r4, r1
 8007610:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007612:	2200      	movs	r2, #0
 8007614:	921a      	str	r2, [sp, #104]	@ 0x68
 8007616:	9005      	str	r0, [sp, #20]
 8007618:	f04f 0a00 	mov.w	sl, #0
 800761c:	f04f 0b00 	mov.w	fp, #0
 8007620:	460a      	mov	r2, r1
 8007622:	9219      	str	r2, [sp, #100]	@ 0x64
 8007624:	7811      	ldrb	r1, [r2, #0]
 8007626:	292b      	cmp	r1, #43	@ 0x2b
 8007628:	d04a      	beq.n	80076c0 <_strtod_l+0xb8>
 800762a:	d838      	bhi.n	800769e <_strtod_l+0x96>
 800762c:	290d      	cmp	r1, #13
 800762e:	d832      	bhi.n	8007696 <_strtod_l+0x8e>
 8007630:	2908      	cmp	r1, #8
 8007632:	d832      	bhi.n	800769a <_strtod_l+0x92>
 8007634:	2900      	cmp	r1, #0
 8007636:	d03b      	beq.n	80076b0 <_strtod_l+0xa8>
 8007638:	2200      	movs	r2, #0
 800763a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800763c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800763e:	782a      	ldrb	r2, [r5, #0]
 8007640:	2a30      	cmp	r2, #48	@ 0x30
 8007642:	f040 80b3 	bne.w	80077ac <_strtod_l+0x1a4>
 8007646:	786a      	ldrb	r2, [r5, #1]
 8007648:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800764c:	2a58      	cmp	r2, #88	@ 0x58
 800764e:	d16e      	bne.n	800772e <_strtod_l+0x126>
 8007650:	9302      	str	r3, [sp, #8]
 8007652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	ab1a      	add	r3, sp, #104	@ 0x68
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	4a8e      	ldr	r2, [pc, #568]	@ (8007894 <_strtod_l+0x28c>)
 800765c:	9805      	ldr	r0, [sp, #20]
 800765e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007660:	a919      	add	r1, sp, #100	@ 0x64
 8007662:	f001 f99f 	bl	80089a4 <__gethex>
 8007666:	f010 060f 	ands.w	r6, r0, #15
 800766a:	4604      	mov	r4, r0
 800766c:	d005      	beq.n	800767a <_strtod_l+0x72>
 800766e:	2e06      	cmp	r6, #6
 8007670:	d128      	bne.n	80076c4 <_strtod_l+0xbc>
 8007672:	3501      	adds	r5, #1
 8007674:	2300      	movs	r3, #0
 8007676:	9519      	str	r5, [sp, #100]	@ 0x64
 8007678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800767a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800767c:	2b00      	cmp	r3, #0
 800767e:	f040 858e 	bne.w	800819e <_strtod_l+0xb96>
 8007682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007684:	b1cb      	cbz	r3, 80076ba <_strtod_l+0xb2>
 8007686:	4652      	mov	r2, sl
 8007688:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800768c:	ec43 2b10 	vmov	d0, r2, r3
 8007690:	b01f      	add	sp, #124	@ 0x7c
 8007692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007696:	2920      	cmp	r1, #32
 8007698:	d1ce      	bne.n	8007638 <_strtod_l+0x30>
 800769a:	3201      	adds	r2, #1
 800769c:	e7c1      	b.n	8007622 <_strtod_l+0x1a>
 800769e:	292d      	cmp	r1, #45	@ 0x2d
 80076a0:	d1ca      	bne.n	8007638 <_strtod_l+0x30>
 80076a2:	2101      	movs	r1, #1
 80076a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80076a6:	1c51      	adds	r1, r2, #1
 80076a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80076aa:	7852      	ldrb	r2, [r2, #1]
 80076ac:	2a00      	cmp	r2, #0
 80076ae:	d1c5      	bne.n	800763c <_strtod_l+0x34>
 80076b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f040 8570 	bne.w	800819a <_strtod_l+0xb92>
 80076ba:	4652      	mov	r2, sl
 80076bc:	465b      	mov	r3, fp
 80076be:	e7e5      	b.n	800768c <_strtod_l+0x84>
 80076c0:	2100      	movs	r1, #0
 80076c2:	e7ef      	b.n	80076a4 <_strtod_l+0x9c>
 80076c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80076c6:	b13a      	cbz	r2, 80076d8 <_strtod_l+0xd0>
 80076c8:	2135      	movs	r1, #53	@ 0x35
 80076ca:	a81c      	add	r0, sp, #112	@ 0x70
 80076cc:	f7ff ff3a 	bl	8007544 <__copybits>
 80076d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076d2:	9805      	ldr	r0, [sp, #20]
 80076d4:	f7ff fb08 	bl	8006ce8 <_Bfree>
 80076d8:	3e01      	subs	r6, #1
 80076da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80076dc:	2e04      	cmp	r6, #4
 80076de:	d806      	bhi.n	80076ee <_strtod_l+0xe6>
 80076e0:	e8df f006 	tbb	[pc, r6]
 80076e4:	201d0314 	.word	0x201d0314
 80076e8:	14          	.byte	0x14
 80076e9:	00          	.byte	0x00
 80076ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80076ee:	05e1      	lsls	r1, r4, #23
 80076f0:	bf48      	it	mi
 80076f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80076f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076fa:	0d1b      	lsrs	r3, r3, #20
 80076fc:	051b      	lsls	r3, r3, #20
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1bb      	bne.n	800767a <_strtod_l+0x72>
 8007702:	f7fe fb21 	bl	8005d48 <__errno>
 8007706:	2322      	movs	r3, #34	@ 0x22
 8007708:	6003      	str	r3, [r0, #0]
 800770a:	e7b6      	b.n	800767a <_strtod_l+0x72>
 800770c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007710:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007714:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007718:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800771c:	e7e7      	b.n	80076ee <_strtod_l+0xe6>
 800771e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800789c <_strtod_l+0x294>
 8007722:	e7e4      	b.n	80076ee <_strtod_l+0xe6>
 8007724:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007728:	f04f 3aff 	mov.w	sl, #4294967295
 800772c:	e7df      	b.n	80076ee <_strtod_l+0xe6>
 800772e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	9219      	str	r2, [sp, #100]	@ 0x64
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b30      	cmp	r3, #48	@ 0x30
 8007738:	d0f9      	beq.n	800772e <_strtod_l+0x126>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d09d      	beq.n	800767a <_strtod_l+0x72>
 800773e:	2301      	movs	r3, #1
 8007740:	9309      	str	r3, [sp, #36]	@ 0x24
 8007742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007744:	930c      	str	r3, [sp, #48]	@ 0x30
 8007746:	2300      	movs	r3, #0
 8007748:	9308      	str	r3, [sp, #32]
 800774a:	930a      	str	r3, [sp, #40]	@ 0x28
 800774c:	461f      	mov	r7, r3
 800774e:	220a      	movs	r2, #10
 8007750:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007752:	7805      	ldrb	r5, [r0, #0]
 8007754:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007758:	b2d9      	uxtb	r1, r3
 800775a:	2909      	cmp	r1, #9
 800775c:	d928      	bls.n	80077b0 <_strtod_l+0x1a8>
 800775e:	494e      	ldr	r1, [pc, #312]	@ (8007898 <_strtod_l+0x290>)
 8007760:	2201      	movs	r2, #1
 8007762:	f001 f837 	bl	80087d4 <strncmp>
 8007766:	2800      	cmp	r0, #0
 8007768:	d032      	beq.n	80077d0 <_strtod_l+0x1c8>
 800776a:	2000      	movs	r0, #0
 800776c:	462a      	mov	r2, r5
 800776e:	4681      	mov	r9, r0
 8007770:	463d      	mov	r5, r7
 8007772:	4603      	mov	r3, r0
 8007774:	2a65      	cmp	r2, #101	@ 0x65
 8007776:	d001      	beq.n	800777c <_strtod_l+0x174>
 8007778:	2a45      	cmp	r2, #69	@ 0x45
 800777a:	d114      	bne.n	80077a6 <_strtod_l+0x19e>
 800777c:	b91d      	cbnz	r5, 8007786 <_strtod_l+0x17e>
 800777e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007780:	4302      	orrs	r2, r0
 8007782:	d095      	beq.n	80076b0 <_strtod_l+0xa8>
 8007784:	2500      	movs	r5, #0
 8007786:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007788:	1c62      	adds	r2, r4, #1
 800778a:	9219      	str	r2, [sp, #100]	@ 0x64
 800778c:	7862      	ldrb	r2, [r4, #1]
 800778e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007790:	d077      	beq.n	8007882 <_strtod_l+0x27a>
 8007792:	2a2d      	cmp	r2, #45	@ 0x2d
 8007794:	d07b      	beq.n	800788e <_strtod_l+0x286>
 8007796:	f04f 0c00 	mov.w	ip, #0
 800779a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800779e:	2909      	cmp	r1, #9
 80077a0:	f240 8082 	bls.w	80078a8 <_strtod_l+0x2a0>
 80077a4:	9419      	str	r4, [sp, #100]	@ 0x64
 80077a6:	f04f 0800 	mov.w	r8, #0
 80077aa:	e0a2      	b.n	80078f2 <_strtod_l+0x2ea>
 80077ac:	2300      	movs	r3, #0
 80077ae:	e7c7      	b.n	8007740 <_strtod_l+0x138>
 80077b0:	2f08      	cmp	r7, #8
 80077b2:	bfd5      	itete	le
 80077b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80077b6:	9908      	ldrgt	r1, [sp, #32]
 80077b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80077bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80077c0:	f100 0001 	add.w	r0, r0, #1
 80077c4:	bfd4      	ite	le
 80077c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80077c8:	9308      	strgt	r3, [sp, #32]
 80077ca:	3701      	adds	r7, #1
 80077cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80077ce:	e7bf      	b.n	8007750 <_strtod_l+0x148>
 80077d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80077d6:	785a      	ldrb	r2, [r3, #1]
 80077d8:	b37f      	cbz	r7, 800783a <_strtod_l+0x232>
 80077da:	4681      	mov	r9, r0
 80077dc:	463d      	mov	r5, r7
 80077de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80077e2:	2b09      	cmp	r3, #9
 80077e4:	d912      	bls.n	800780c <_strtod_l+0x204>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e7c4      	b.n	8007774 <_strtod_l+0x16c>
 80077ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80077f0:	785a      	ldrb	r2, [r3, #1]
 80077f2:	3001      	adds	r0, #1
 80077f4:	2a30      	cmp	r2, #48	@ 0x30
 80077f6:	d0f8      	beq.n	80077ea <_strtod_l+0x1e2>
 80077f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	f200 84d3 	bhi.w	80081a8 <_strtod_l+0xba0>
 8007802:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007804:	930c      	str	r3, [sp, #48]	@ 0x30
 8007806:	4681      	mov	r9, r0
 8007808:	2000      	movs	r0, #0
 800780a:	4605      	mov	r5, r0
 800780c:	3a30      	subs	r2, #48	@ 0x30
 800780e:	f100 0301 	add.w	r3, r0, #1
 8007812:	d02a      	beq.n	800786a <_strtod_l+0x262>
 8007814:	4499      	add	r9, r3
 8007816:	eb00 0c05 	add.w	ip, r0, r5
 800781a:	462b      	mov	r3, r5
 800781c:	210a      	movs	r1, #10
 800781e:	4563      	cmp	r3, ip
 8007820:	d10d      	bne.n	800783e <_strtod_l+0x236>
 8007822:	1c69      	adds	r1, r5, #1
 8007824:	4401      	add	r1, r0
 8007826:	4428      	add	r0, r5
 8007828:	2808      	cmp	r0, #8
 800782a:	dc16      	bgt.n	800785a <_strtod_l+0x252>
 800782c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800782e:	230a      	movs	r3, #10
 8007830:	fb03 2300 	mla	r3, r3, r0, r2
 8007834:	930a      	str	r3, [sp, #40]	@ 0x28
 8007836:	2300      	movs	r3, #0
 8007838:	e018      	b.n	800786c <_strtod_l+0x264>
 800783a:	4638      	mov	r0, r7
 800783c:	e7da      	b.n	80077f4 <_strtod_l+0x1ec>
 800783e:	2b08      	cmp	r3, #8
 8007840:	f103 0301 	add.w	r3, r3, #1
 8007844:	dc03      	bgt.n	800784e <_strtod_l+0x246>
 8007846:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007848:	434e      	muls	r6, r1
 800784a:	960a      	str	r6, [sp, #40]	@ 0x28
 800784c:	e7e7      	b.n	800781e <_strtod_l+0x216>
 800784e:	2b10      	cmp	r3, #16
 8007850:	bfde      	ittt	le
 8007852:	9e08      	ldrle	r6, [sp, #32]
 8007854:	434e      	mulle	r6, r1
 8007856:	9608      	strle	r6, [sp, #32]
 8007858:	e7e1      	b.n	800781e <_strtod_l+0x216>
 800785a:	280f      	cmp	r0, #15
 800785c:	dceb      	bgt.n	8007836 <_strtod_l+0x22e>
 800785e:	9808      	ldr	r0, [sp, #32]
 8007860:	230a      	movs	r3, #10
 8007862:	fb03 2300 	mla	r3, r3, r0, r2
 8007866:	9308      	str	r3, [sp, #32]
 8007868:	e7e5      	b.n	8007836 <_strtod_l+0x22e>
 800786a:	4629      	mov	r1, r5
 800786c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800786e:	1c50      	adds	r0, r2, #1
 8007870:	9019      	str	r0, [sp, #100]	@ 0x64
 8007872:	7852      	ldrb	r2, [r2, #1]
 8007874:	4618      	mov	r0, r3
 8007876:	460d      	mov	r5, r1
 8007878:	e7b1      	b.n	80077de <_strtod_l+0x1d6>
 800787a:	f04f 0900 	mov.w	r9, #0
 800787e:	2301      	movs	r3, #1
 8007880:	e77d      	b.n	800777e <_strtod_l+0x176>
 8007882:	f04f 0c00 	mov.w	ip, #0
 8007886:	1ca2      	adds	r2, r4, #2
 8007888:	9219      	str	r2, [sp, #100]	@ 0x64
 800788a:	78a2      	ldrb	r2, [r4, #2]
 800788c:	e785      	b.n	800779a <_strtod_l+0x192>
 800788e:	f04f 0c01 	mov.w	ip, #1
 8007892:	e7f8      	b.n	8007886 <_strtod_l+0x27e>
 8007894:	080096c0 	.word	0x080096c0
 8007898:	080096a8 	.word	0x080096a8
 800789c:	7ff00000 	.word	0x7ff00000
 80078a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078a2:	1c51      	adds	r1, r2, #1
 80078a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80078a6:	7852      	ldrb	r2, [r2, #1]
 80078a8:	2a30      	cmp	r2, #48	@ 0x30
 80078aa:	d0f9      	beq.n	80078a0 <_strtod_l+0x298>
 80078ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80078b0:	2908      	cmp	r1, #8
 80078b2:	f63f af78 	bhi.w	80077a6 <_strtod_l+0x19e>
 80078b6:	3a30      	subs	r2, #48	@ 0x30
 80078b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80078ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80078be:	f04f 080a 	mov.w	r8, #10
 80078c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078c4:	1c56      	adds	r6, r2, #1
 80078c6:	9619      	str	r6, [sp, #100]	@ 0x64
 80078c8:	7852      	ldrb	r2, [r2, #1]
 80078ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80078ce:	f1be 0f09 	cmp.w	lr, #9
 80078d2:	d939      	bls.n	8007948 <_strtod_l+0x340>
 80078d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80078d6:	1a76      	subs	r6, r6, r1
 80078d8:	2e08      	cmp	r6, #8
 80078da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80078de:	dc03      	bgt.n	80078e8 <_strtod_l+0x2e0>
 80078e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80078e2:	4588      	cmp	r8, r1
 80078e4:	bfa8      	it	ge
 80078e6:	4688      	movge	r8, r1
 80078e8:	f1bc 0f00 	cmp.w	ip, #0
 80078ec:	d001      	beq.n	80078f2 <_strtod_l+0x2ea>
 80078ee:	f1c8 0800 	rsb	r8, r8, #0
 80078f2:	2d00      	cmp	r5, #0
 80078f4:	d14e      	bne.n	8007994 <_strtod_l+0x38c>
 80078f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078f8:	4308      	orrs	r0, r1
 80078fa:	f47f aebe 	bne.w	800767a <_strtod_l+0x72>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f47f aed6 	bne.w	80076b0 <_strtod_l+0xa8>
 8007904:	2a69      	cmp	r2, #105	@ 0x69
 8007906:	d028      	beq.n	800795a <_strtod_l+0x352>
 8007908:	dc25      	bgt.n	8007956 <_strtod_l+0x34e>
 800790a:	2a49      	cmp	r2, #73	@ 0x49
 800790c:	d025      	beq.n	800795a <_strtod_l+0x352>
 800790e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007910:	f47f aece 	bne.w	80076b0 <_strtod_l+0xa8>
 8007914:	499b      	ldr	r1, [pc, #620]	@ (8007b84 <_strtod_l+0x57c>)
 8007916:	a819      	add	r0, sp, #100	@ 0x64
 8007918:	f001 fa66 	bl	8008de8 <__match>
 800791c:	2800      	cmp	r0, #0
 800791e:	f43f aec7 	beq.w	80076b0 <_strtod_l+0xa8>
 8007922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b28      	cmp	r3, #40	@ 0x28
 8007928:	d12e      	bne.n	8007988 <_strtod_l+0x380>
 800792a:	4997      	ldr	r1, [pc, #604]	@ (8007b88 <_strtod_l+0x580>)
 800792c:	aa1c      	add	r2, sp, #112	@ 0x70
 800792e:	a819      	add	r0, sp, #100	@ 0x64
 8007930:	f001 fa6e 	bl	8008e10 <__hexnan>
 8007934:	2805      	cmp	r0, #5
 8007936:	d127      	bne.n	8007988 <_strtod_l+0x380>
 8007938:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800793a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800793e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007942:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007946:	e698      	b.n	800767a <_strtod_l+0x72>
 8007948:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800794a:	fb08 2101 	mla	r1, r8, r1, r2
 800794e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007952:	920e      	str	r2, [sp, #56]	@ 0x38
 8007954:	e7b5      	b.n	80078c2 <_strtod_l+0x2ba>
 8007956:	2a6e      	cmp	r2, #110	@ 0x6e
 8007958:	e7da      	b.n	8007910 <_strtod_l+0x308>
 800795a:	498c      	ldr	r1, [pc, #560]	@ (8007b8c <_strtod_l+0x584>)
 800795c:	a819      	add	r0, sp, #100	@ 0x64
 800795e:	f001 fa43 	bl	8008de8 <__match>
 8007962:	2800      	cmp	r0, #0
 8007964:	f43f aea4 	beq.w	80076b0 <_strtod_l+0xa8>
 8007968:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800796a:	4989      	ldr	r1, [pc, #548]	@ (8007b90 <_strtod_l+0x588>)
 800796c:	3b01      	subs	r3, #1
 800796e:	a819      	add	r0, sp, #100	@ 0x64
 8007970:	9319      	str	r3, [sp, #100]	@ 0x64
 8007972:	f001 fa39 	bl	8008de8 <__match>
 8007976:	b910      	cbnz	r0, 800797e <_strtod_l+0x376>
 8007978:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800797a:	3301      	adds	r3, #1
 800797c:	9319      	str	r3, [sp, #100]	@ 0x64
 800797e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007ba0 <_strtod_l+0x598>
 8007982:	f04f 0a00 	mov.w	sl, #0
 8007986:	e678      	b.n	800767a <_strtod_l+0x72>
 8007988:	4882      	ldr	r0, [pc, #520]	@ (8007b94 <_strtod_l+0x58c>)
 800798a:	f000 ff69 	bl	8008860 <nan>
 800798e:	ec5b ab10 	vmov	sl, fp, d0
 8007992:	e672      	b.n	800767a <_strtod_l+0x72>
 8007994:	eba8 0309 	sub.w	r3, r8, r9
 8007998:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800799a:	9309      	str	r3, [sp, #36]	@ 0x24
 800799c:	2f00      	cmp	r7, #0
 800799e:	bf08      	it	eq
 80079a0:	462f      	moveq	r7, r5
 80079a2:	2d10      	cmp	r5, #16
 80079a4:	462c      	mov	r4, r5
 80079a6:	bfa8      	it	ge
 80079a8:	2410      	movge	r4, #16
 80079aa:	f7f8 fdb3 	bl	8000514 <__aeabi_ui2d>
 80079ae:	2d09      	cmp	r5, #9
 80079b0:	4682      	mov	sl, r0
 80079b2:	468b      	mov	fp, r1
 80079b4:	dc13      	bgt.n	80079de <_strtod_l+0x3d6>
 80079b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f43f ae5e 	beq.w	800767a <_strtod_l+0x72>
 80079be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c0:	dd78      	ble.n	8007ab4 <_strtod_l+0x4ac>
 80079c2:	2b16      	cmp	r3, #22
 80079c4:	dc5f      	bgt.n	8007a86 <_strtod_l+0x47e>
 80079c6:	4974      	ldr	r1, [pc, #464]	@ (8007b98 <_strtod_l+0x590>)
 80079c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079d0:	4652      	mov	r2, sl
 80079d2:	465b      	mov	r3, fp
 80079d4:	f7f8 fe18 	bl	8000608 <__aeabi_dmul>
 80079d8:	4682      	mov	sl, r0
 80079da:	468b      	mov	fp, r1
 80079dc:	e64d      	b.n	800767a <_strtod_l+0x72>
 80079de:	4b6e      	ldr	r3, [pc, #440]	@ (8007b98 <_strtod_l+0x590>)
 80079e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80079e8:	f7f8 fe0e 	bl	8000608 <__aeabi_dmul>
 80079ec:	4682      	mov	sl, r0
 80079ee:	9808      	ldr	r0, [sp, #32]
 80079f0:	468b      	mov	fp, r1
 80079f2:	f7f8 fd8f 	bl	8000514 <__aeabi_ui2d>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4650      	mov	r0, sl
 80079fc:	4659      	mov	r1, fp
 80079fe:	f7f8 fc4d 	bl	800029c <__adddf3>
 8007a02:	2d0f      	cmp	r5, #15
 8007a04:	4682      	mov	sl, r0
 8007a06:	468b      	mov	fp, r1
 8007a08:	ddd5      	ble.n	80079b6 <_strtod_l+0x3ae>
 8007a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a0c:	1b2c      	subs	r4, r5, r4
 8007a0e:	441c      	add	r4, r3
 8007a10:	2c00      	cmp	r4, #0
 8007a12:	f340 8096 	ble.w	8007b42 <_strtod_l+0x53a>
 8007a16:	f014 030f 	ands.w	r3, r4, #15
 8007a1a:	d00a      	beq.n	8007a32 <_strtod_l+0x42a>
 8007a1c:	495e      	ldr	r1, [pc, #376]	@ (8007b98 <_strtod_l+0x590>)
 8007a1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a22:	4652      	mov	r2, sl
 8007a24:	465b      	mov	r3, fp
 8007a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a2a:	f7f8 fded 	bl	8000608 <__aeabi_dmul>
 8007a2e:	4682      	mov	sl, r0
 8007a30:	468b      	mov	fp, r1
 8007a32:	f034 040f 	bics.w	r4, r4, #15
 8007a36:	d073      	beq.n	8007b20 <_strtod_l+0x518>
 8007a38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007a3c:	dd48      	ble.n	8007ad0 <_strtod_l+0x4c8>
 8007a3e:	2400      	movs	r4, #0
 8007a40:	46a0      	mov	r8, r4
 8007a42:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a44:	46a1      	mov	r9, r4
 8007a46:	9a05      	ldr	r2, [sp, #20]
 8007a48:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007ba0 <_strtod_l+0x598>
 8007a4c:	2322      	movs	r3, #34	@ 0x22
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	f04f 0a00 	mov.w	sl, #0
 8007a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f43f ae0f 	beq.w	800767a <_strtod_l+0x72>
 8007a5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a5e:	9805      	ldr	r0, [sp, #20]
 8007a60:	f7ff f942 	bl	8006ce8 <_Bfree>
 8007a64:	9805      	ldr	r0, [sp, #20]
 8007a66:	4649      	mov	r1, r9
 8007a68:	f7ff f93e 	bl	8006ce8 <_Bfree>
 8007a6c:	9805      	ldr	r0, [sp, #20]
 8007a6e:	4641      	mov	r1, r8
 8007a70:	f7ff f93a 	bl	8006ce8 <_Bfree>
 8007a74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a76:	9805      	ldr	r0, [sp, #20]
 8007a78:	f7ff f936 	bl	8006ce8 <_Bfree>
 8007a7c:	9805      	ldr	r0, [sp, #20]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	f7ff f932 	bl	8006ce8 <_Bfree>
 8007a84:	e5f9      	b.n	800767a <_strtod_l+0x72>
 8007a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	dbbc      	blt.n	8007a0a <_strtod_l+0x402>
 8007a90:	4c41      	ldr	r4, [pc, #260]	@ (8007b98 <_strtod_l+0x590>)
 8007a92:	f1c5 050f 	rsb	r5, r5, #15
 8007a96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	465b      	mov	r3, fp
 8007a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aa2:	f7f8 fdb1 	bl	8000608 <__aeabi_dmul>
 8007aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa8:	1b5d      	subs	r5, r3, r5
 8007aaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007aae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007ab2:	e78f      	b.n	80079d4 <_strtod_l+0x3cc>
 8007ab4:	3316      	adds	r3, #22
 8007ab6:	dba8      	blt.n	8007a0a <_strtod_l+0x402>
 8007ab8:	4b37      	ldr	r3, [pc, #220]	@ (8007b98 <_strtod_l+0x590>)
 8007aba:	eba9 0808 	sub.w	r8, r9, r8
 8007abe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007ac2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007ac6:	4650      	mov	r0, sl
 8007ac8:	4659      	mov	r1, fp
 8007aca:	f7f8 fec7 	bl	800085c <__aeabi_ddiv>
 8007ace:	e783      	b.n	80079d8 <_strtod_l+0x3d0>
 8007ad0:	4b32      	ldr	r3, [pc, #200]	@ (8007b9c <_strtod_l+0x594>)
 8007ad2:	9308      	str	r3, [sp, #32]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	1124      	asrs	r4, r4, #4
 8007ad8:	4650      	mov	r0, sl
 8007ada:	4659      	mov	r1, fp
 8007adc:	461e      	mov	r6, r3
 8007ade:	2c01      	cmp	r4, #1
 8007ae0:	dc21      	bgt.n	8007b26 <_strtod_l+0x51e>
 8007ae2:	b10b      	cbz	r3, 8007ae8 <_strtod_l+0x4e0>
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	468b      	mov	fp, r1
 8007ae8:	492c      	ldr	r1, [pc, #176]	@ (8007b9c <_strtod_l+0x594>)
 8007aea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007aee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007af2:	4652      	mov	r2, sl
 8007af4:	465b      	mov	r3, fp
 8007af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007afa:	f7f8 fd85 	bl	8000608 <__aeabi_dmul>
 8007afe:	4b28      	ldr	r3, [pc, #160]	@ (8007ba0 <_strtod_l+0x598>)
 8007b00:	460a      	mov	r2, r1
 8007b02:	400b      	ands	r3, r1
 8007b04:	4927      	ldr	r1, [pc, #156]	@ (8007ba4 <_strtod_l+0x59c>)
 8007b06:	428b      	cmp	r3, r1
 8007b08:	4682      	mov	sl, r0
 8007b0a:	d898      	bhi.n	8007a3e <_strtod_l+0x436>
 8007b0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007b10:	428b      	cmp	r3, r1
 8007b12:	bf86      	itte	hi
 8007b14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007ba8 <_strtod_l+0x5a0>
 8007b18:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007b20:	2300      	movs	r3, #0
 8007b22:	9308      	str	r3, [sp, #32]
 8007b24:	e07a      	b.n	8007c1c <_strtod_l+0x614>
 8007b26:	07e2      	lsls	r2, r4, #31
 8007b28:	d505      	bpl.n	8007b36 <_strtod_l+0x52e>
 8007b2a:	9b08      	ldr	r3, [sp, #32]
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	f7f8 fd6a 	bl	8000608 <__aeabi_dmul>
 8007b34:	2301      	movs	r3, #1
 8007b36:	9a08      	ldr	r2, [sp, #32]
 8007b38:	3208      	adds	r2, #8
 8007b3a:	3601      	adds	r6, #1
 8007b3c:	1064      	asrs	r4, r4, #1
 8007b3e:	9208      	str	r2, [sp, #32]
 8007b40:	e7cd      	b.n	8007ade <_strtod_l+0x4d6>
 8007b42:	d0ed      	beq.n	8007b20 <_strtod_l+0x518>
 8007b44:	4264      	negs	r4, r4
 8007b46:	f014 020f 	ands.w	r2, r4, #15
 8007b4a:	d00a      	beq.n	8007b62 <_strtod_l+0x55a>
 8007b4c:	4b12      	ldr	r3, [pc, #72]	@ (8007b98 <_strtod_l+0x590>)
 8007b4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b52:	4650      	mov	r0, sl
 8007b54:	4659      	mov	r1, fp
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	f7f8 fe7f 	bl	800085c <__aeabi_ddiv>
 8007b5e:	4682      	mov	sl, r0
 8007b60:	468b      	mov	fp, r1
 8007b62:	1124      	asrs	r4, r4, #4
 8007b64:	d0dc      	beq.n	8007b20 <_strtod_l+0x518>
 8007b66:	2c1f      	cmp	r4, #31
 8007b68:	dd20      	ble.n	8007bac <_strtod_l+0x5a4>
 8007b6a:	2400      	movs	r4, #0
 8007b6c:	46a0      	mov	r8, r4
 8007b6e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b70:	46a1      	mov	r9, r4
 8007b72:	9a05      	ldr	r2, [sp, #20]
 8007b74:	2322      	movs	r3, #34	@ 0x22
 8007b76:	f04f 0a00 	mov.w	sl, #0
 8007b7a:	f04f 0b00 	mov.w	fp, #0
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	e768      	b.n	8007a54 <_strtod_l+0x44c>
 8007b82:	bf00      	nop
 8007b84:	08009495 	.word	0x08009495
 8007b88:	080096ac 	.word	0x080096ac
 8007b8c:	0800948d 	.word	0x0800948d
 8007b90:	080094c4 	.word	0x080094c4
 8007b94:	08009855 	.word	0x08009855
 8007b98:	080095e0 	.word	0x080095e0
 8007b9c:	080095b8 	.word	0x080095b8
 8007ba0:	7ff00000 	.word	0x7ff00000
 8007ba4:	7ca00000 	.word	0x7ca00000
 8007ba8:	7fefffff 	.word	0x7fefffff
 8007bac:	f014 0310 	ands.w	r3, r4, #16
 8007bb0:	bf18      	it	ne
 8007bb2:	236a      	movne	r3, #106	@ 0x6a
 8007bb4:	4ea9      	ldr	r6, [pc, #676]	@ (8007e5c <_strtod_l+0x854>)
 8007bb6:	9308      	str	r3, [sp, #32]
 8007bb8:	4650      	mov	r0, sl
 8007bba:	4659      	mov	r1, fp
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	07e2      	lsls	r2, r4, #31
 8007bc0:	d504      	bpl.n	8007bcc <_strtod_l+0x5c4>
 8007bc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bc6:	f7f8 fd1f 	bl	8000608 <__aeabi_dmul>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	1064      	asrs	r4, r4, #1
 8007bce:	f106 0608 	add.w	r6, r6, #8
 8007bd2:	d1f4      	bne.n	8007bbe <_strtod_l+0x5b6>
 8007bd4:	b10b      	cbz	r3, 8007bda <_strtod_l+0x5d2>
 8007bd6:	4682      	mov	sl, r0
 8007bd8:	468b      	mov	fp, r1
 8007bda:	9b08      	ldr	r3, [sp, #32]
 8007bdc:	b1b3      	cbz	r3, 8007c0c <_strtod_l+0x604>
 8007bde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007be2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	4659      	mov	r1, fp
 8007bea:	dd0f      	ble.n	8007c0c <_strtod_l+0x604>
 8007bec:	2b1f      	cmp	r3, #31
 8007bee:	dd55      	ble.n	8007c9c <_strtod_l+0x694>
 8007bf0:	2b34      	cmp	r3, #52	@ 0x34
 8007bf2:	bfde      	ittt	le
 8007bf4:	f04f 33ff 	movle.w	r3, #4294967295
 8007bf8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007bfc:	4093      	lslle	r3, r2
 8007bfe:	f04f 0a00 	mov.w	sl, #0
 8007c02:	bfcc      	ite	gt
 8007c04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007c08:	ea03 0b01 	andle.w	fp, r3, r1
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	4650      	mov	r0, sl
 8007c12:	4659      	mov	r1, fp
 8007c14:	f7f8 ff60 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d1a6      	bne.n	8007b6a <_strtod_l+0x562>
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007c22:	9805      	ldr	r0, [sp, #20]
 8007c24:	462b      	mov	r3, r5
 8007c26:	463a      	mov	r2, r7
 8007c28:	f7ff f8c6 	bl	8006db8 <__s2b>
 8007c2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f43f af05 	beq.w	8007a3e <_strtod_l+0x436>
 8007c34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c36:	2a00      	cmp	r2, #0
 8007c38:	eba9 0308 	sub.w	r3, r9, r8
 8007c3c:	bfa8      	it	ge
 8007c3e:	2300      	movge	r3, #0
 8007c40:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c42:	2400      	movs	r4, #0
 8007c44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c48:	9316      	str	r3, [sp, #88]	@ 0x58
 8007c4a:	46a0      	mov	r8, r4
 8007c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c4e:	9805      	ldr	r0, [sp, #20]
 8007c50:	6859      	ldr	r1, [r3, #4]
 8007c52:	f7ff f809 	bl	8006c68 <_Balloc>
 8007c56:	4681      	mov	r9, r0
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f43f aef4 	beq.w	8007a46 <_strtod_l+0x43e>
 8007c5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c60:	691a      	ldr	r2, [r3, #16]
 8007c62:	3202      	adds	r2, #2
 8007c64:	f103 010c 	add.w	r1, r3, #12
 8007c68:	0092      	lsls	r2, r2, #2
 8007c6a:	300c      	adds	r0, #12
 8007c6c:	f7fe f899 	bl	8005da2 <memcpy>
 8007c70:	ec4b ab10 	vmov	d0, sl, fp
 8007c74:	9805      	ldr	r0, [sp, #20]
 8007c76:	aa1c      	add	r2, sp, #112	@ 0x70
 8007c78:	a91b      	add	r1, sp, #108	@ 0x6c
 8007c7a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007c7e:	f7ff fbd7 	bl	8007430 <__d2b>
 8007c82:	901a      	str	r0, [sp, #104]	@ 0x68
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f43f aede 	beq.w	8007a46 <_strtod_l+0x43e>
 8007c8a:	9805      	ldr	r0, [sp, #20]
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	f7ff f929 	bl	8006ee4 <__i2b>
 8007c92:	4680      	mov	r8, r0
 8007c94:	b948      	cbnz	r0, 8007caa <_strtod_l+0x6a2>
 8007c96:	f04f 0800 	mov.w	r8, #0
 8007c9a:	e6d4      	b.n	8007a46 <_strtod_l+0x43e>
 8007c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca4:	ea03 0a0a 	and.w	sl, r3, sl
 8007ca8:	e7b0      	b.n	8007c0c <_strtod_l+0x604>
 8007caa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007cac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	bfab      	itete	ge
 8007cb2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007cb4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007cb6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007cb8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007cba:	bfac      	ite	ge
 8007cbc:	18ef      	addge	r7, r5, r3
 8007cbe:	1b5e      	sublt	r6, r3, r5
 8007cc0:	9b08      	ldr	r3, [sp, #32]
 8007cc2:	1aed      	subs	r5, r5, r3
 8007cc4:	4415      	add	r5, r2
 8007cc6:	4b66      	ldr	r3, [pc, #408]	@ (8007e60 <_strtod_l+0x858>)
 8007cc8:	3d01      	subs	r5, #1
 8007cca:	429d      	cmp	r5, r3
 8007ccc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007cd0:	da50      	bge.n	8007d74 <_strtod_l+0x76c>
 8007cd2:	1b5b      	subs	r3, r3, r5
 8007cd4:	2b1f      	cmp	r3, #31
 8007cd6:	eba2 0203 	sub.w	r2, r2, r3
 8007cda:	f04f 0101 	mov.w	r1, #1
 8007cde:	dc3d      	bgt.n	8007d5c <_strtod_l+0x754>
 8007ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007cea:	18bd      	adds	r5, r7, r2
 8007cec:	9b08      	ldr	r3, [sp, #32]
 8007cee:	42af      	cmp	r7, r5
 8007cf0:	4416      	add	r6, r2
 8007cf2:	441e      	add	r6, r3
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	bfa8      	it	ge
 8007cf8:	462b      	movge	r3, r5
 8007cfa:	42b3      	cmp	r3, r6
 8007cfc:	bfa8      	it	ge
 8007cfe:	4633      	movge	r3, r6
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	bfc2      	ittt	gt
 8007d04:	1aed      	subgt	r5, r5, r3
 8007d06:	1af6      	subgt	r6, r6, r3
 8007d08:	1aff      	subgt	r7, r7, r3
 8007d0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dd16      	ble.n	8007d3e <_strtod_l+0x736>
 8007d10:	4641      	mov	r1, r8
 8007d12:	9805      	ldr	r0, [sp, #20]
 8007d14:	461a      	mov	r2, r3
 8007d16:	f7ff f9a5 	bl	8007064 <__pow5mult>
 8007d1a:	4680      	mov	r8, r0
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d0ba      	beq.n	8007c96 <_strtod_l+0x68e>
 8007d20:	4601      	mov	r1, r0
 8007d22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d24:	9805      	ldr	r0, [sp, #20]
 8007d26:	f7ff f8f3 	bl	8006f10 <__multiply>
 8007d2a:	900e      	str	r0, [sp, #56]	@ 0x38
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	f43f ae8a 	beq.w	8007a46 <_strtod_l+0x43e>
 8007d32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d34:	9805      	ldr	r0, [sp, #20]
 8007d36:	f7fe ffd7 	bl	8006ce8 <_Bfree>
 8007d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d3e:	2d00      	cmp	r5, #0
 8007d40:	dc1d      	bgt.n	8007d7e <_strtod_l+0x776>
 8007d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dd23      	ble.n	8007d90 <_strtod_l+0x788>
 8007d48:	4649      	mov	r1, r9
 8007d4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007d4c:	9805      	ldr	r0, [sp, #20]
 8007d4e:	f7ff f989 	bl	8007064 <__pow5mult>
 8007d52:	4681      	mov	r9, r0
 8007d54:	b9e0      	cbnz	r0, 8007d90 <_strtod_l+0x788>
 8007d56:	f04f 0900 	mov.w	r9, #0
 8007d5a:	e674      	b.n	8007a46 <_strtod_l+0x43e>
 8007d5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007d60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007d64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007d68:	35e2      	adds	r5, #226	@ 0xe2
 8007d6a:	fa01 f305 	lsl.w	r3, r1, r5
 8007d6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d70:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007d72:	e7ba      	b.n	8007cea <_strtod_l+0x6e2>
 8007d74:	2300      	movs	r3, #0
 8007d76:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d78:	2301      	movs	r3, #1
 8007d7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d7c:	e7b5      	b.n	8007cea <_strtod_l+0x6e2>
 8007d7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d80:	9805      	ldr	r0, [sp, #20]
 8007d82:	462a      	mov	r2, r5
 8007d84:	f7ff f9c8 	bl	8007118 <__lshift>
 8007d88:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d1d9      	bne.n	8007d42 <_strtod_l+0x73a>
 8007d8e:	e65a      	b.n	8007a46 <_strtod_l+0x43e>
 8007d90:	2e00      	cmp	r6, #0
 8007d92:	dd07      	ble.n	8007da4 <_strtod_l+0x79c>
 8007d94:	4649      	mov	r1, r9
 8007d96:	9805      	ldr	r0, [sp, #20]
 8007d98:	4632      	mov	r2, r6
 8007d9a:	f7ff f9bd 	bl	8007118 <__lshift>
 8007d9e:	4681      	mov	r9, r0
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d0d8      	beq.n	8007d56 <_strtod_l+0x74e>
 8007da4:	2f00      	cmp	r7, #0
 8007da6:	dd08      	ble.n	8007dba <_strtod_l+0x7b2>
 8007da8:	4641      	mov	r1, r8
 8007daa:	9805      	ldr	r0, [sp, #20]
 8007dac:	463a      	mov	r2, r7
 8007dae:	f7ff f9b3 	bl	8007118 <__lshift>
 8007db2:	4680      	mov	r8, r0
 8007db4:	2800      	cmp	r0, #0
 8007db6:	f43f ae46 	beq.w	8007a46 <_strtod_l+0x43e>
 8007dba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007dbc:	9805      	ldr	r0, [sp, #20]
 8007dbe:	464a      	mov	r2, r9
 8007dc0:	f7ff fa32 	bl	8007228 <__mdiff>
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	f43f ae3d 	beq.w	8007a46 <_strtod_l+0x43e>
 8007dcc:	68c3      	ldr	r3, [r0, #12]
 8007dce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60c3      	str	r3, [r0, #12]
 8007dd4:	4641      	mov	r1, r8
 8007dd6:	f7ff fa0b 	bl	80071f0 <__mcmp>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	da46      	bge.n	8007e6c <_strtod_l+0x864>
 8007dde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007de0:	ea53 030a 	orrs.w	r3, r3, sl
 8007de4:	d16c      	bne.n	8007ec0 <_strtod_l+0x8b8>
 8007de6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d168      	bne.n	8007ec0 <_strtod_l+0x8b8>
 8007dee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007df2:	0d1b      	lsrs	r3, r3, #20
 8007df4:	051b      	lsls	r3, r3, #20
 8007df6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007dfa:	d961      	bls.n	8007ec0 <_strtod_l+0x8b8>
 8007dfc:	6963      	ldr	r3, [r4, #20]
 8007dfe:	b913      	cbnz	r3, 8007e06 <_strtod_l+0x7fe>
 8007e00:	6923      	ldr	r3, [r4, #16]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	dd5c      	ble.n	8007ec0 <_strtod_l+0x8b8>
 8007e06:	4621      	mov	r1, r4
 8007e08:	2201      	movs	r2, #1
 8007e0a:	9805      	ldr	r0, [sp, #20]
 8007e0c:	f7ff f984 	bl	8007118 <__lshift>
 8007e10:	4641      	mov	r1, r8
 8007e12:	4604      	mov	r4, r0
 8007e14:	f7ff f9ec 	bl	80071f0 <__mcmp>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	dd51      	ble.n	8007ec0 <_strtod_l+0x8b8>
 8007e1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e20:	9a08      	ldr	r2, [sp, #32]
 8007e22:	0d1b      	lsrs	r3, r3, #20
 8007e24:	051b      	lsls	r3, r3, #20
 8007e26:	2a00      	cmp	r2, #0
 8007e28:	d06b      	beq.n	8007f02 <_strtod_l+0x8fa>
 8007e2a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e2e:	d868      	bhi.n	8007f02 <_strtod_l+0x8fa>
 8007e30:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007e34:	f67f ae9d 	bls.w	8007b72 <_strtod_l+0x56a>
 8007e38:	4b0a      	ldr	r3, [pc, #40]	@ (8007e64 <_strtod_l+0x85c>)
 8007e3a:	4650      	mov	r0, sl
 8007e3c:	4659      	mov	r1, fp
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f7f8 fbe2 	bl	8000608 <__aeabi_dmul>
 8007e44:	4b08      	ldr	r3, [pc, #32]	@ (8007e68 <_strtod_l+0x860>)
 8007e46:	400b      	ands	r3, r1
 8007e48:	4682      	mov	sl, r0
 8007e4a:	468b      	mov	fp, r1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f47f ae05 	bne.w	8007a5c <_strtod_l+0x454>
 8007e52:	9a05      	ldr	r2, [sp, #20]
 8007e54:	2322      	movs	r3, #34	@ 0x22
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	e600      	b.n	8007a5c <_strtod_l+0x454>
 8007e5a:	bf00      	nop
 8007e5c:	080096d8 	.word	0x080096d8
 8007e60:	fffffc02 	.word	0xfffffc02
 8007e64:	39500000 	.word	0x39500000
 8007e68:	7ff00000 	.word	0x7ff00000
 8007e6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007e70:	d165      	bne.n	8007f3e <_strtod_l+0x936>
 8007e72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e78:	b35a      	cbz	r2, 8007ed2 <_strtod_l+0x8ca>
 8007e7a:	4a9f      	ldr	r2, [pc, #636]	@ (80080f8 <_strtod_l+0xaf0>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d12b      	bne.n	8007ed8 <_strtod_l+0x8d0>
 8007e80:	9b08      	ldr	r3, [sp, #32]
 8007e82:	4651      	mov	r1, sl
 8007e84:	b303      	cbz	r3, 8007ec8 <_strtod_l+0x8c0>
 8007e86:	4b9d      	ldr	r3, [pc, #628]	@ (80080fc <_strtod_l+0xaf4>)
 8007e88:	465a      	mov	r2, fp
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007e90:	f04f 32ff 	mov.w	r2, #4294967295
 8007e94:	d81b      	bhi.n	8007ece <_strtod_l+0x8c6>
 8007e96:	0d1b      	lsrs	r3, r3, #20
 8007e98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea0:	4299      	cmp	r1, r3
 8007ea2:	d119      	bne.n	8007ed8 <_strtod_l+0x8d0>
 8007ea4:	4b96      	ldr	r3, [pc, #600]	@ (8008100 <_strtod_l+0xaf8>)
 8007ea6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d102      	bne.n	8007eb2 <_strtod_l+0x8aa>
 8007eac:	3101      	adds	r1, #1
 8007eae:	f43f adca 	beq.w	8007a46 <_strtod_l+0x43e>
 8007eb2:	4b92      	ldr	r3, [pc, #584]	@ (80080fc <_strtod_l+0xaf4>)
 8007eb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007eb6:	401a      	ands	r2, r3
 8007eb8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007ebc:	f04f 0a00 	mov.w	sl, #0
 8007ec0:	9b08      	ldr	r3, [sp, #32]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1b8      	bne.n	8007e38 <_strtod_l+0x830>
 8007ec6:	e5c9      	b.n	8007a5c <_strtod_l+0x454>
 8007ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ecc:	e7e8      	b.n	8007ea0 <_strtod_l+0x898>
 8007ece:	4613      	mov	r3, r2
 8007ed0:	e7e6      	b.n	8007ea0 <_strtod_l+0x898>
 8007ed2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ed6:	d0a1      	beq.n	8007e1c <_strtod_l+0x814>
 8007ed8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007eda:	b1db      	cbz	r3, 8007f14 <_strtod_l+0x90c>
 8007edc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ede:	4213      	tst	r3, r2
 8007ee0:	d0ee      	beq.n	8007ec0 <_strtod_l+0x8b8>
 8007ee2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ee4:	9a08      	ldr	r2, [sp, #32]
 8007ee6:	4650      	mov	r0, sl
 8007ee8:	4659      	mov	r1, fp
 8007eea:	b1bb      	cbz	r3, 8007f1c <_strtod_l+0x914>
 8007eec:	f7ff fb6e 	bl	80075cc <sulp>
 8007ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ef4:	ec53 2b10 	vmov	r2, r3, d0
 8007ef8:	f7f8 f9d0 	bl	800029c <__adddf3>
 8007efc:	4682      	mov	sl, r0
 8007efe:	468b      	mov	fp, r1
 8007f00:	e7de      	b.n	8007ec0 <_strtod_l+0x8b8>
 8007f02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007f06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f0e:	f04f 3aff 	mov.w	sl, #4294967295
 8007f12:	e7d5      	b.n	8007ec0 <_strtod_l+0x8b8>
 8007f14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f16:	ea13 0f0a 	tst.w	r3, sl
 8007f1a:	e7e1      	b.n	8007ee0 <_strtod_l+0x8d8>
 8007f1c:	f7ff fb56 	bl	80075cc <sulp>
 8007f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f24:	ec53 2b10 	vmov	r2, r3, d0
 8007f28:	f7f8 f9b6 	bl	8000298 <__aeabi_dsub>
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2300      	movs	r3, #0
 8007f30:	4682      	mov	sl, r0
 8007f32:	468b      	mov	fp, r1
 8007f34:	f7f8 fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d0c1      	beq.n	8007ec0 <_strtod_l+0x8b8>
 8007f3c:	e619      	b.n	8007b72 <_strtod_l+0x56a>
 8007f3e:	4641      	mov	r1, r8
 8007f40:	4620      	mov	r0, r4
 8007f42:	f7ff facd 	bl	80074e0 <__ratio>
 8007f46:	ec57 6b10 	vmov	r6, r7, d0
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 fdd4 	bl	8000b00 <__aeabi_dcmple>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d06f      	beq.n	800803c <_strtod_l+0xa34>
 8007f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d17a      	bne.n	8008058 <_strtod_l+0xa50>
 8007f62:	f1ba 0f00 	cmp.w	sl, #0
 8007f66:	d158      	bne.n	800801a <_strtod_l+0xa12>
 8007f68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d15a      	bne.n	8008028 <_strtod_l+0xa20>
 8007f72:	4b64      	ldr	r3, [pc, #400]	@ (8008104 <_strtod_l+0xafc>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	4630      	mov	r0, r6
 8007f78:	4639      	mov	r1, r7
 8007f7a:	f7f8 fdb7 	bl	8000aec <__aeabi_dcmplt>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d159      	bne.n	8008036 <_strtod_l+0xa2e>
 8007f82:	4630      	mov	r0, r6
 8007f84:	4639      	mov	r1, r7
 8007f86:	4b60      	ldr	r3, [pc, #384]	@ (8008108 <_strtod_l+0xb00>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f7f8 fb3d 	bl	8000608 <__aeabi_dmul>
 8007f8e:	4606      	mov	r6, r0
 8007f90:	460f      	mov	r7, r1
 8007f92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007f96:	9606      	str	r6, [sp, #24]
 8007f98:	9307      	str	r3, [sp, #28]
 8007f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f9e:	4d57      	ldr	r5, [pc, #348]	@ (80080fc <_strtod_l+0xaf4>)
 8007fa0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007fa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fa6:	401d      	ands	r5, r3
 8007fa8:	4b58      	ldr	r3, [pc, #352]	@ (800810c <_strtod_l+0xb04>)
 8007faa:	429d      	cmp	r5, r3
 8007fac:	f040 80b2 	bne.w	8008114 <_strtod_l+0xb0c>
 8007fb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007fb6:	ec4b ab10 	vmov	d0, sl, fp
 8007fba:	f7ff f9c9 	bl	8007350 <__ulp>
 8007fbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fc2:	ec51 0b10 	vmov	r0, r1, d0
 8007fc6:	f7f8 fb1f 	bl	8000608 <__aeabi_dmul>
 8007fca:	4652      	mov	r2, sl
 8007fcc:	465b      	mov	r3, fp
 8007fce:	f7f8 f965 	bl	800029c <__adddf3>
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4949      	ldr	r1, [pc, #292]	@ (80080fc <_strtod_l+0xaf4>)
 8007fd6:	4a4e      	ldr	r2, [pc, #312]	@ (8008110 <_strtod_l+0xb08>)
 8007fd8:	4019      	ands	r1, r3
 8007fda:	4291      	cmp	r1, r2
 8007fdc:	4682      	mov	sl, r0
 8007fde:	d942      	bls.n	8008066 <_strtod_l+0xa5e>
 8007fe0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007fe2:	4b47      	ldr	r3, [pc, #284]	@ (8008100 <_strtod_l+0xaf8>)
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d103      	bne.n	8007ff0 <_strtod_l+0x9e8>
 8007fe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007fea:	3301      	adds	r3, #1
 8007fec:	f43f ad2b 	beq.w	8007a46 <_strtod_l+0x43e>
 8007ff0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008100 <_strtod_l+0xaf8>
 8007ff4:	f04f 3aff 	mov.w	sl, #4294967295
 8007ff8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ffa:	9805      	ldr	r0, [sp, #20]
 8007ffc:	f7fe fe74 	bl	8006ce8 <_Bfree>
 8008000:	9805      	ldr	r0, [sp, #20]
 8008002:	4649      	mov	r1, r9
 8008004:	f7fe fe70 	bl	8006ce8 <_Bfree>
 8008008:	9805      	ldr	r0, [sp, #20]
 800800a:	4641      	mov	r1, r8
 800800c:	f7fe fe6c 	bl	8006ce8 <_Bfree>
 8008010:	9805      	ldr	r0, [sp, #20]
 8008012:	4621      	mov	r1, r4
 8008014:	f7fe fe68 	bl	8006ce8 <_Bfree>
 8008018:	e618      	b.n	8007c4c <_strtod_l+0x644>
 800801a:	f1ba 0f01 	cmp.w	sl, #1
 800801e:	d103      	bne.n	8008028 <_strtod_l+0xa20>
 8008020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008022:	2b00      	cmp	r3, #0
 8008024:	f43f ada5 	beq.w	8007b72 <_strtod_l+0x56a>
 8008028:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80080d8 <_strtod_l+0xad0>
 800802c:	4f35      	ldr	r7, [pc, #212]	@ (8008104 <_strtod_l+0xafc>)
 800802e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008032:	2600      	movs	r6, #0
 8008034:	e7b1      	b.n	8007f9a <_strtod_l+0x992>
 8008036:	4f34      	ldr	r7, [pc, #208]	@ (8008108 <_strtod_l+0xb00>)
 8008038:	2600      	movs	r6, #0
 800803a:	e7aa      	b.n	8007f92 <_strtod_l+0x98a>
 800803c:	4b32      	ldr	r3, [pc, #200]	@ (8008108 <_strtod_l+0xb00>)
 800803e:	4630      	mov	r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	2200      	movs	r2, #0
 8008044:	f7f8 fae0 	bl	8000608 <__aeabi_dmul>
 8008048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800804a:	4606      	mov	r6, r0
 800804c:	460f      	mov	r7, r1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d09f      	beq.n	8007f92 <_strtod_l+0x98a>
 8008052:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008056:	e7a0      	b.n	8007f9a <_strtod_l+0x992>
 8008058:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80080e0 <_strtod_l+0xad8>
 800805c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008060:	ec57 6b17 	vmov	r6, r7, d7
 8008064:	e799      	b.n	8007f9a <_strtod_l+0x992>
 8008066:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800806a:	9b08      	ldr	r3, [sp, #32]
 800806c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1c1      	bne.n	8007ff8 <_strtod_l+0x9f0>
 8008074:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008078:	0d1b      	lsrs	r3, r3, #20
 800807a:	051b      	lsls	r3, r3, #20
 800807c:	429d      	cmp	r5, r3
 800807e:	d1bb      	bne.n	8007ff8 <_strtod_l+0x9f0>
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 fe20 	bl	8000cc8 <__aeabi_d2lz>
 8008088:	f7f8 fa90 	bl	80005ac <__aeabi_l2d>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4630      	mov	r0, r6
 8008092:	4639      	mov	r1, r7
 8008094:	f7f8 f900 	bl	8000298 <__aeabi_dsub>
 8008098:	460b      	mov	r3, r1
 800809a:	4602      	mov	r2, r0
 800809c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80080a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80080a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080a6:	ea46 060a 	orr.w	r6, r6, sl
 80080aa:	431e      	orrs	r6, r3
 80080ac:	d06f      	beq.n	800818e <_strtod_l+0xb86>
 80080ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80080e8 <_strtod_l+0xae0>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	f7f8 fd1a 	bl	8000aec <__aeabi_dcmplt>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f47f accf 	bne.w	8007a5c <_strtod_l+0x454>
 80080be:	a30c      	add	r3, pc, #48	@ (adr r3, 80080f0 <_strtod_l+0xae8>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080c8:	f7f8 fd2e 	bl	8000b28 <__aeabi_dcmpgt>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d093      	beq.n	8007ff8 <_strtod_l+0x9f0>
 80080d0:	e4c4      	b.n	8007a5c <_strtod_l+0x454>
 80080d2:	bf00      	nop
 80080d4:	f3af 8000 	nop.w
 80080d8:	00000000 	.word	0x00000000
 80080dc:	bff00000 	.word	0xbff00000
 80080e0:	00000000 	.word	0x00000000
 80080e4:	3ff00000 	.word	0x3ff00000
 80080e8:	94a03595 	.word	0x94a03595
 80080ec:	3fdfffff 	.word	0x3fdfffff
 80080f0:	35afe535 	.word	0x35afe535
 80080f4:	3fe00000 	.word	0x3fe00000
 80080f8:	000fffff 	.word	0x000fffff
 80080fc:	7ff00000 	.word	0x7ff00000
 8008100:	7fefffff 	.word	0x7fefffff
 8008104:	3ff00000 	.word	0x3ff00000
 8008108:	3fe00000 	.word	0x3fe00000
 800810c:	7fe00000 	.word	0x7fe00000
 8008110:	7c9fffff 	.word	0x7c9fffff
 8008114:	9b08      	ldr	r3, [sp, #32]
 8008116:	b323      	cbz	r3, 8008162 <_strtod_l+0xb5a>
 8008118:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800811c:	d821      	bhi.n	8008162 <_strtod_l+0xb5a>
 800811e:	a328      	add	r3, pc, #160	@ (adr r3, 80081c0 <_strtod_l+0xbb8>)
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	4630      	mov	r0, r6
 8008126:	4639      	mov	r1, r7
 8008128:	f7f8 fcea 	bl	8000b00 <__aeabi_dcmple>
 800812c:	b1a0      	cbz	r0, 8008158 <_strtod_l+0xb50>
 800812e:	4639      	mov	r1, r7
 8008130:	4630      	mov	r0, r6
 8008132:	f7f8 fd41 	bl	8000bb8 <__aeabi_d2uiz>
 8008136:	2801      	cmp	r0, #1
 8008138:	bf38      	it	cc
 800813a:	2001      	movcc	r0, #1
 800813c:	f7f8 f9ea 	bl	8000514 <__aeabi_ui2d>
 8008140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008142:	4606      	mov	r6, r0
 8008144:	460f      	mov	r7, r1
 8008146:	b9fb      	cbnz	r3, 8008188 <_strtod_l+0xb80>
 8008148:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800814c:	9014      	str	r0, [sp, #80]	@ 0x50
 800814e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008150:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008154:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008158:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800815a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800815e:	1b5b      	subs	r3, r3, r5
 8008160:	9311      	str	r3, [sp, #68]	@ 0x44
 8008162:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008166:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800816a:	f7ff f8f1 	bl	8007350 <__ulp>
 800816e:	4650      	mov	r0, sl
 8008170:	ec53 2b10 	vmov	r2, r3, d0
 8008174:	4659      	mov	r1, fp
 8008176:	f7f8 fa47 	bl	8000608 <__aeabi_dmul>
 800817a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800817e:	f7f8 f88d 	bl	800029c <__adddf3>
 8008182:	4682      	mov	sl, r0
 8008184:	468b      	mov	fp, r1
 8008186:	e770      	b.n	800806a <_strtod_l+0xa62>
 8008188:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800818c:	e7e0      	b.n	8008150 <_strtod_l+0xb48>
 800818e:	a30e      	add	r3, pc, #56	@ (adr r3, 80081c8 <_strtod_l+0xbc0>)
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	f7f8 fcaa 	bl	8000aec <__aeabi_dcmplt>
 8008198:	e798      	b.n	80080cc <_strtod_l+0xac4>
 800819a:	2300      	movs	r3, #0
 800819c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800819e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80081a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	f7ff ba6d 	b.w	8007682 <_strtod_l+0x7a>
 80081a8:	2a65      	cmp	r2, #101	@ 0x65
 80081aa:	f43f ab66 	beq.w	800787a <_strtod_l+0x272>
 80081ae:	2a45      	cmp	r2, #69	@ 0x45
 80081b0:	f43f ab63 	beq.w	800787a <_strtod_l+0x272>
 80081b4:	2301      	movs	r3, #1
 80081b6:	f7ff bb9e 	b.w	80078f6 <_strtod_l+0x2ee>
 80081ba:	bf00      	nop
 80081bc:	f3af 8000 	nop.w
 80081c0:	ffc00000 	.word	0xffc00000
 80081c4:	41dfffff 	.word	0x41dfffff
 80081c8:	94a03595 	.word	0x94a03595
 80081cc:	3fcfffff 	.word	0x3fcfffff

080081d0 <_strtod_r>:
 80081d0:	4b01      	ldr	r3, [pc, #4]	@ (80081d8 <_strtod_r+0x8>)
 80081d2:	f7ff ba19 	b.w	8007608 <_strtod_l>
 80081d6:	bf00      	nop
 80081d8:	2000006c 	.word	0x2000006c

080081dc <_strtol_l.constprop.0>:
 80081dc:	2b24      	cmp	r3, #36	@ 0x24
 80081de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e2:	4686      	mov	lr, r0
 80081e4:	4690      	mov	r8, r2
 80081e6:	d801      	bhi.n	80081ec <_strtol_l.constprop.0+0x10>
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d106      	bne.n	80081fa <_strtol_l.constprop.0+0x1e>
 80081ec:	f7fd fdac 	bl	8005d48 <__errno>
 80081f0:	2316      	movs	r3, #22
 80081f2:	6003      	str	r3, [r0, #0]
 80081f4:	2000      	movs	r0, #0
 80081f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fa:	4834      	ldr	r0, [pc, #208]	@ (80082cc <_strtol_l.constprop.0+0xf0>)
 80081fc:	460d      	mov	r5, r1
 80081fe:	462a      	mov	r2, r5
 8008200:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008204:	5d06      	ldrb	r6, [r0, r4]
 8008206:	f016 0608 	ands.w	r6, r6, #8
 800820a:	d1f8      	bne.n	80081fe <_strtol_l.constprop.0+0x22>
 800820c:	2c2d      	cmp	r4, #45	@ 0x2d
 800820e:	d12d      	bne.n	800826c <_strtol_l.constprop.0+0x90>
 8008210:	782c      	ldrb	r4, [r5, #0]
 8008212:	2601      	movs	r6, #1
 8008214:	1c95      	adds	r5, r2, #2
 8008216:	f033 0210 	bics.w	r2, r3, #16
 800821a:	d109      	bne.n	8008230 <_strtol_l.constprop.0+0x54>
 800821c:	2c30      	cmp	r4, #48	@ 0x30
 800821e:	d12a      	bne.n	8008276 <_strtol_l.constprop.0+0x9a>
 8008220:	782a      	ldrb	r2, [r5, #0]
 8008222:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008226:	2a58      	cmp	r2, #88	@ 0x58
 8008228:	d125      	bne.n	8008276 <_strtol_l.constprop.0+0x9a>
 800822a:	786c      	ldrb	r4, [r5, #1]
 800822c:	2310      	movs	r3, #16
 800822e:	3502      	adds	r5, #2
 8008230:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008234:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008238:	2200      	movs	r2, #0
 800823a:	fbbc f9f3 	udiv	r9, ip, r3
 800823e:	4610      	mov	r0, r2
 8008240:	fb03 ca19 	mls	sl, r3, r9, ip
 8008244:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008248:	2f09      	cmp	r7, #9
 800824a:	d81b      	bhi.n	8008284 <_strtol_l.constprop.0+0xa8>
 800824c:	463c      	mov	r4, r7
 800824e:	42a3      	cmp	r3, r4
 8008250:	dd27      	ble.n	80082a2 <_strtol_l.constprop.0+0xc6>
 8008252:	1c57      	adds	r7, r2, #1
 8008254:	d007      	beq.n	8008266 <_strtol_l.constprop.0+0x8a>
 8008256:	4581      	cmp	r9, r0
 8008258:	d320      	bcc.n	800829c <_strtol_l.constprop.0+0xc0>
 800825a:	d101      	bne.n	8008260 <_strtol_l.constprop.0+0x84>
 800825c:	45a2      	cmp	sl, r4
 800825e:	db1d      	blt.n	800829c <_strtol_l.constprop.0+0xc0>
 8008260:	fb00 4003 	mla	r0, r0, r3, r4
 8008264:	2201      	movs	r2, #1
 8008266:	f815 4b01 	ldrb.w	r4, [r5], #1
 800826a:	e7eb      	b.n	8008244 <_strtol_l.constprop.0+0x68>
 800826c:	2c2b      	cmp	r4, #43	@ 0x2b
 800826e:	bf04      	itt	eq
 8008270:	782c      	ldrbeq	r4, [r5, #0]
 8008272:	1c95      	addeq	r5, r2, #2
 8008274:	e7cf      	b.n	8008216 <_strtol_l.constprop.0+0x3a>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1da      	bne.n	8008230 <_strtol_l.constprop.0+0x54>
 800827a:	2c30      	cmp	r4, #48	@ 0x30
 800827c:	bf0c      	ite	eq
 800827e:	2308      	moveq	r3, #8
 8008280:	230a      	movne	r3, #10
 8008282:	e7d5      	b.n	8008230 <_strtol_l.constprop.0+0x54>
 8008284:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008288:	2f19      	cmp	r7, #25
 800828a:	d801      	bhi.n	8008290 <_strtol_l.constprop.0+0xb4>
 800828c:	3c37      	subs	r4, #55	@ 0x37
 800828e:	e7de      	b.n	800824e <_strtol_l.constprop.0+0x72>
 8008290:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008294:	2f19      	cmp	r7, #25
 8008296:	d804      	bhi.n	80082a2 <_strtol_l.constprop.0+0xc6>
 8008298:	3c57      	subs	r4, #87	@ 0x57
 800829a:	e7d8      	b.n	800824e <_strtol_l.constprop.0+0x72>
 800829c:	f04f 32ff 	mov.w	r2, #4294967295
 80082a0:	e7e1      	b.n	8008266 <_strtol_l.constprop.0+0x8a>
 80082a2:	1c53      	adds	r3, r2, #1
 80082a4:	d108      	bne.n	80082b8 <_strtol_l.constprop.0+0xdc>
 80082a6:	2322      	movs	r3, #34	@ 0x22
 80082a8:	f8ce 3000 	str.w	r3, [lr]
 80082ac:	4660      	mov	r0, ip
 80082ae:	f1b8 0f00 	cmp.w	r8, #0
 80082b2:	d0a0      	beq.n	80081f6 <_strtol_l.constprop.0+0x1a>
 80082b4:	1e69      	subs	r1, r5, #1
 80082b6:	e006      	b.n	80082c6 <_strtol_l.constprop.0+0xea>
 80082b8:	b106      	cbz	r6, 80082bc <_strtol_l.constprop.0+0xe0>
 80082ba:	4240      	negs	r0, r0
 80082bc:	f1b8 0f00 	cmp.w	r8, #0
 80082c0:	d099      	beq.n	80081f6 <_strtol_l.constprop.0+0x1a>
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	d1f6      	bne.n	80082b4 <_strtol_l.constprop.0+0xd8>
 80082c6:	f8c8 1000 	str.w	r1, [r8]
 80082ca:	e794      	b.n	80081f6 <_strtol_l.constprop.0+0x1a>
 80082cc:	08009701 	.word	0x08009701

080082d0 <_strtol_r>:
 80082d0:	f7ff bf84 	b.w	80081dc <_strtol_l.constprop.0>

080082d4 <__ssputs_r>:
 80082d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d8:	688e      	ldr	r6, [r1, #8]
 80082da:	461f      	mov	r7, r3
 80082dc:	42be      	cmp	r6, r7
 80082de:	680b      	ldr	r3, [r1, #0]
 80082e0:	4682      	mov	sl, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	4690      	mov	r8, r2
 80082e6:	d82d      	bhi.n	8008344 <__ssputs_r+0x70>
 80082e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082f0:	d026      	beq.n	8008340 <__ssputs_r+0x6c>
 80082f2:	6965      	ldr	r5, [r4, #20]
 80082f4:	6909      	ldr	r1, [r1, #16]
 80082f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082fa:	eba3 0901 	sub.w	r9, r3, r1
 80082fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008302:	1c7b      	adds	r3, r7, #1
 8008304:	444b      	add	r3, r9
 8008306:	106d      	asrs	r5, r5, #1
 8008308:	429d      	cmp	r5, r3
 800830a:	bf38      	it	cc
 800830c:	461d      	movcc	r5, r3
 800830e:	0553      	lsls	r3, r2, #21
 8008310:	d527      	bpl.n	8008362 <__ssputs_r+0x8e>
 8008312:	4629      	mov	r1, r5
 8008314:	f7fe fc1c 	bl	8006b50 <_malloc_r>
 8008318:	4606      	mov	r6, r0
 800831a:	b360      	cbz	r0, 8008376 <__ssputs_r+0xa2>
 800831c:	6921      	ldr	r1, [r4, #16]
 800831e:	464a      	mov	r2, r9
 8008320:	f7fd fd3f 	bl	8005da2 <memcpy>
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800832a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	6126      	str	r6, [r4, #16]
 8008332:	6165      	str	r5, [r4, #20]
 8008334:	444e      	add	r6, r9
 8008336:	eba5 0509 	sub.w	r5, r5, r9
 800833a:	6026      	str	r6, [r4, #0]
 800833c:	60a5      	str	r5, [r4, #8]
 800833e:	463e      	mov	r6, r7
 8008340:	42be      	cmp	r6, r7
 8008342:	d900      	bls.n	8008346 <__ssputs_r+0x72>
 8008344:	463e      	mov	r6, r7
 8008346:	6820      	ldr	r0, [r4, #0]
 8008348:	4632      	mov	r2, r6
 800834a:	4641      	mov	r1, r8
 800834c:	f000 fa28 	bl	80087a0 <memmove>
 8008350:	68a3      	ldr	r3, [r4, #8]
 8008352:	1b9b      	subs	r3, r3, r6
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	4433      	add	r3, r6
 800835a:	6023      	str	r3, [r4, #0]
 800835c:	2000      	movs	r0, #0
 800835e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008362:	462a      	mov	r2, r5
 8008364:	f000 fe01 	bl	8008f6a <_realloc_r>
 8008368:	4606      	mov	r6, r0
 800836a:	2800      	cmp	r0, #0
 800836c:	d1e0      	bne.n	8008330 <__ssputs_r+0x5c>
 800836e:	6921      	ldr	r1, [r4, #16]
 8008370:	4650      	mov	r0, sl
 8008372:	f7fe fb79 	bl	8006a68 <_free_r>
 8008376:	230c      	movs	r3, #12
 8008378:	f8ca 3000 	str.w	r3, [sl]
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	e7e9      	b.n	800835e <__ssputs_r+0x8a>
	...

0800838c <_svfiprintf_r>:
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	4698      	mov	r8, r3
 8008392:	898b      	ldrh	r3, [r1, #12]
 8008394:	061b      	lsls	r3, r3, #24
 8008396:	b09d      	sub	sp, #116	@ 0x74
 8008398:	4607      	mov	r7, r0
 800839a:	460d      	mov	r5, r1
 800839c:	4614      	mov	r4, r2
 800839e:	d510      	bpl.n	80083c2 <_svfiprintf_r+0x36>
 80083a0:	690b      	ldr	r3, [r1, #16]
 80083a2:	b973      	cbnz	r3, 80083c2 <_svfiprintf_r+0x36>
 80083a4:	2140      	movs	r1, #64	@ 0x40
 80083a6:	f7fe fbd3 	bl	8006b50 <_malloc_r>
 80083aa:	6028      	str	r0, [r5, #0]
 80083ac:	6128      	str	r0, [r5, #16]
 80083ae:	b930      	cbnz	r0, 80083be <_svfiprintf_r+0x32>
 80083b0:	230c      	movs	r3, #12
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	f04f 30ff 	mov.w	r0, #4294967295
 80083b8:	b01d      	add	sp, #116	@ 0x74
 80083ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083be:	2340      	movs	r3, #64	@ 0x40
 80083c0:	616b      	str	r3, [r5, #20]
 80083c2:	2300      	movs	r3, #0
 80083c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c6:	2320      	movs	r3, #32
 80083c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80083d0:	2330      	movs	r3, #48	@ 0x30
 80083d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008570 <_svfiprintf_r+0x1e4>
 80083d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083da:	f04f 0901 	mov.w	r9, #1
 80083de:	4623      	mov	r3, r4
 80083e0:	469a      	mov	sl, r3
 80083e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083e6:	b10a      	cbz	r2, 80083ec <_svfiprintf_r+0x60>
 80083e8:	2a25      	cmp	r2, #37	@ 0x25
 80083ea:	d1f9      	bne.n	80083e0 <_svfiprintf_r+0x54>
 80083ec:	ebba 0b04 	subs.w	fp, sl, r4
 80083f0:	d00b      	beq.n	800840a <_svfiprintf_r+0x7e>
 80083f2:	465b      	mov	r3, fp
 80083f4:	4622      	mov	r2, r4
 80083f6:	4629      	mov	r1, r5
 80083f8:	4638      	mov	r0, r7
 80083fa:	f7ff ff6b 	bl	80082d4 <__ssputs_r>
 80083fe:	3001      	adds	r0, #1
 8008400:	f000 80a7 	beq.w	8008552 <_svfiprintf_r+0x1c6>
 8008404:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008406:	445a      	add	r2, fp
 8008408:	9209      	str	r2, [sp, #36]	@ 0x24
 800840a:	f89a 3000 	ldrb.w	r3, [sl]
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 809f 	beq.w	8008552 <_svfiprintf_r+0x1c6>
 8008414:	2300      	movs	r3, #0
 8008416:	f04f 32ff 	mov.w	r2, #4294967295
 800841a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800841e:	f10a 0a01 	add.w	sl, sl, #1
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	9307      	str	r3, [sp, #28]
 8008426:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800842a:	931a      	str	r3, [sp, #104]	@ 0x68
 800842c:	4654      	mov	r4, sl
 800842e:	2205      	movs	r2, #5
 8008430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008434:	484e      	ldr	r0, [pc, #312]	@ (8008570 <_svfiprintf_r+0x1e4>)
 8008436:	f7f7 fed3 	bl	80001e0 <memchr>
 800843a:	9a04      	ldr	r2, [sp, #16]
 800843c:	b9d8      	cbnz	r0, 8008476 <_svfiprintf_r+0xea>
 800843e:	06d0      	lsls	r0, r2, #27
 8008440:	bf44      	itt	mi
 8008442:	2320      	movmi	r3, #32
 8008444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008448:	0711      	lsls	r1, r2, #28
 800844a:	bf44      	itt	mi
 800844c:	232b      	movmi	r3, #43	@ 0x2b
 800844e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008452:	f89a 3000 	ldrb.w	r3, [sl]
 8008456:	2b2a      	cmp	r3, #42	@ 0x2a
 8008458:	d015      	beq.n	8008486 <_svfiprintf_r+0xfa>
 800845a:	9a07      	ldr	r2, [sp, #28]
 800845c:	4654      	mov	r4, sl
 800845e:	2000      	movs	r0, #0
 8008460:	f04f 0c0a 	mov.w	ip, #10
 8008464:	4621      	mov	r1, r4
 8008466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800846a:	3b30      	subs	r3, #48	@ 0x30
 800846c:	2b09      	cmp	r3, #9
 800846e:	d94b      	bls.n	8008508 <_svfiprintf_r+0x17c>
 8008470:	b1b0      	cbz	r0, 80084a0 <_svfiprintf_r+0x114>
 8008472:	9207      	str	r2, [sp, #28]
 8008474:	e014      	b.n	80084a0 <_svfiprintf_r+0x114>
 8008476:	eba0 0308 	sub.w	r3, r0, r8
 800847a:	fa09 f303 	lsl.w	r3, r9, r3
 800847e:	4313      	orrs	r3, r2
 8008480:	9304      	str	r3, [sp, #16]
 8008482:	46a2      	mov	sl, r4
 8008484:	e7d2      	b.n	800842c <_svfiprintf_r+0xa0>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	1d19      	adds	r1, r3, #4
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	9103      	str	r1, [sp, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	bfbb      	ittet	lt
 8008492:	425b      	neglt	r3, r3
 8008494:	f042 0202 	orrlt.w	r2, r2, #2
 8008498:	9307      	strge	r3, [sp, #28]
 800849a:	9307      	strlt	r3, [sp, #28]
 800849c:	bfb8      	it	lt
 800849e:	9204      	strlt	r2, [sp, #16]
 80084a0:	7823      	ldrb	r3, [r4, #0]
 80084a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80084a4:	d10a      	bne.n	80084bc <_svfiprintf_r+0x130>
 80084a6:	7863      	ldrb	r3, [r4, #1]
 80084a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80084aa:	d132      	bne.n	8008512 <_svfiprintf_r+0x186>
 80084ac:	9b03      	ldr	r3, [sp, #12]
 80084ae:	1d1a      	adds	r2, r3, #4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	9203      	str	r2, [sp, #12]
 80084b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084b8:	3402      	adds	r4, #2
 80084ba:	9305      	str	r3, [sp, #20]
 80084bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008580 <_svfiprintf_r+0x1f4>
 80084c0:	7821      	ldrb	r1, [r4, #0]
 80084c2:	2203      	movs	r2, #3
 80084c4:	4650      	mov	r0, sl
 80084c6:	f7f7 fe8b 	bl	80001e0 <memchr>
 80084ca:	b138      	cbz	r0, 80084dc <_svfiprintf_r+0x150>
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	eba0 000a 	sub.w	r0, r0, sl
 80084d2:	2240      	movs	r2, #64	@ 0x40
 80084d4:	4082      	lsls	r2, r0
 80084d6:	4313      	orrs	r3, r2
 80084d8:	3401      	adds	r4, #1
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e0:	4824      	ldr	r0, [pc, #144]	@ (8008574 <_svfiprintf_r+0x1e8>)
 80084e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084e6:	2206      	movs	r2, #6
 80084e8:	f7f7 fe7a 	bl	80001e0 <memchr>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d036      	beq.n	800855e <_svfiprintf_r+0x1d2>
 80084f0:	4b21      	ldr	r3, [pc, #132]	@ (8008578 <_svfiprintf_r+0x1ec>)
 80084f2:	bb1b      	cbnz	r3, 800853c <_svfiprintf_r+0x1b0>
 80084f4:	9b03      	ldr	r3, [sp, #12]
 80084f6:	3307      	adds	r3, #7
 80084f8:	f023 0307 	bic.w	r3, r3, #7
 80084fc:	3308      	adds	r3, #8
 80084fe:	9303      	str	r3, [sp, #12]
 8008500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008502:	4433      	add	r3, r6
 8008504:	9309      	str	r3, [sp, #36]	@ 0x24
 8008506:	e76a      	b.n	80083de <_svfiprintf_r+0x52>
 8008508:	fb0c 3202 	mla	r2, ip, r2, r3
 800850c:	460c      	mov	r4, r1
 800850e:	2001      	movs	r0, #1
 8008510:	e7a8      	b.n	8008464 <_svfiprintf_r+0xd8>
 8008512:	2300      	movs	r3, #0
 8008514:	3401      	adds	r4, #1
 8008516:	9305      	str	r3, [sp, #20]
 8008518:	4619      	mov	r1, r3
 800851a:	f04f 0c0a 	mov.w	ip, #10
 800851e:	4620      	mov	r0, r4
 8008520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008524:	3a30      	subs	r2, #48	@ 0x30
 8008526:	2a09      	cmp	r2, #9
 8008528:	d903      	bls.n	8008532 <_svfiprintf_r+0x1a6>
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0c6      	beq.n	80084bc <_svfiprintf_r+0x130>
 800852e:	9105      	str	r1, [sp, #20]
 8008530:	e7c4      	b.n	80084bc <_svfiprintf_r+0x130>
 8008532:	fb0c 2101 	mla	r1, ip, r1, r2
 8008536:	4604      	mov	r4, r0
 8008538:	2301      	movs	r3, #1
 800853a:	e7f0      	b.n	800851e <_svfiprintf_r+0x192>
 800853c:	ab03      	add	r3, sp, #12
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	462a      	mov	r2, r5
 8008542:	4b0e      	ldr	r3, [pc, #56]	@ (800857c <_svfiprintf_r+0x1f0>)
 8008544:	a904      	add	r1, sp, #16
 8008546:	4638      	mov	r0, r7
 8008548:	f7fc fb14 	bl	8004b74 <_printf_float>
 800854c:	1c42      	adds	r2, r0, #1
 800854e:	4606      	mov	r6, r0
 8008550:	d1d6      	bne.n	8008500 <_svfiprintf_r+0x174>
 8008552:	89ab      	ldrh	r3, [r5, #12]
 8008554:	065b      	lsls	r3, r3, #25
 8008556:	f53f af2d 	bmi.w	80083b4 <_svfiprintf_r+0x28>
 800855a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800855c:	e72c      	b.n	80083b8 <_svfiprintf_r+0x2c>
 800855e:	ab03      	add	r3, sp, #12
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	462a      	mov	r2, r5
 8008564:	4b05      	ldr	r3, [pc, #20]	@ (800857c <_svfiprintf_r+0x1f0>)
 8008566:	a904      	add	r1, sp, #16
 8008568:	4638      	mov	r0, r7
 800856a:	f7fc fd9b 	bl	80050a4 <_printf_i>
 800856e:	e7ed      	b.n	800854c <_svfiprintf_r+0x1c0>
 8008570:	08009801 	.word	0x08009801
 8008574:	0800980b 	.word	0x0800980b
 8008578:	08004b75 	.word	0x08004b75
 800857c:	080082d5 	.word	0x080082d5
 8008580:	08009807 	.word	0x08009807

08008584 <__sflush_r>:
 8008584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858c:	0716      	lsls	r6, r2, #28
 800858e:	4605      	mov	r5, r0
 8008590:	460c      	mov	r4, r1
 8008592:	d454      	bmi.n	800863e <__sflush_r+0xba>
 8008594:	684b      	ldr	r3, [r1, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	dc02      	bgt.n	80085a0 <__sflush_r+0x1c>
 800859a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800859c:	2b00      	cmp	r3, #0
 800859e:	dd48      	ble.n	8008632 <__sflush_r+0xae>
 80085a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085a2:	2e00      	cmp	r6, #0
 80085a4:	d045      	beq.n	8008632 <__sflush_r+0xae>
 80085a6:	2300      	movs	r3, #0
 80085a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085ac:	682f      	ldr	r7, [r5, #0]
 80085ae:	6a21      	ldr	r1, [r4, #32]
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	d030      	beq.n	8008616 <__sflush_r+0x92>
 80085b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	0759      	lsls	r1, r3, #29
 80085ba:	d505      	bpl.n	80085c8 <__sflush_r+0x44>
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085c2:	b10b      	cbz	r3, 80085c8 <__sflush_r+0x44>
 80085c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	2300      	movs	r3, #0
 80085ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085cc:	6a21      	ldr	r1, [r4, #32]
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b0      	blx	r6
 80085d2:	1c43      	adds	r3, r0, #1
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	d106      	bne.n	80085e6 <__sflush_r+0x62>
 80085d8:	6829      	ldr	r1, [r5, #0]
 80085da:	291d      	cmp	r1, #29
 80085dc:	d82b      	bhi.n	8008636 <__sflush_r+0xb2>
 80085de:	4a2a      	ldr	r2, [pc, #168]	@ (8008688 <__sflush_r+0x104>)
 80085e0:	410a      	asrs	r2, r1
 80085e2:	07d6      	lsls	r6, r2, #31
 80085e4:	d427      	bmi.n	8008636 <__sflush_r+0xb2>
 80085e6:	2200      	movs	r2, #0
 80085e8:	6062      	str	r2, [r4, #4]
 80085ea:	04d9      	lsls	r1, r3, #19
 80085ec:	6922      	ldr	r2, [r4, #16]
 80085ee:	6022      	str	r2, [r4, #0]
 80085f0:	d504      	bpl.n	80085fc <__sflush_r+0x78>
 80085f2:	1c42      	adds	r2, r0, #1
 80085f4:	d101      	bne.n	80085fa <__sflush_r+0x76>
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	b903      	cbnz	r3, 80085fc <__sflush_r+0x78>
 80085fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80085fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085fe:	602f      	str	r7, [r5, #0]
 8008600:	b1b9      	cbz	r1, 8008632 <__sflush_r+0xae>
 8008602:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008606:	4299      	cmp	r1, r3
 8008608:	d002      	beq.n	8008610 <__sflush_r+0x8c>
 800860a:	4628      	mov	r0, r5
 800860c:	f7fe fa2c 	bl	8006a68 <_free_r>
 8008610:	2300      	movs	r3, #0
 8008612:	6363      	str	r3, [r4, #52]	@ 0x34
 8008614:	e00d      	b.n	8008632 <__sflush_r+0xae>
 8008616:	2301      	movs	r3, #1
 8008618:	4628      	mov	r0, r5
 800861a:	47b0      	blx	r6
 800861c:	4602      	mov	r2, r0
 800861e:	1c50      	adds	r0, r2, #1
 8008620:	d1c9      	bne.n	80085b6 <__sflush_r+0x32>
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d0c6      	beq.n	80085b6 <__sflush_r+0x32>
 8008628:	2b1d      	cmp	r3, #29
 800862a:	d001      	beq.n	8008630 <__sflush_r+0xac>
 800862c:	2b16      	cmp	r3, #22
 800862e:	d11e      	bne.n	800866e <__sflush_r+0xea>
 8008630:	602f      	str	r7, [r5, #0]
 8008632:	2000      	movs	r0, #0
 8008634:	e022      	b.n	800867c <__sflush_r+0xf8>
 8008636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800863a:	b21b      	sxth	r3, r3
 800863c:	e01b      	b.n	8008676 <__sflush_r+0xf2>
 800863e:	690f      	ldr	r7, [r1, #16]
 8008640:	2f00      	cmp	r7, #0
 8008642:	d0f6      	beq.n	8008632 <__sflush_r+0xae>
 8008644:	0793      	lsls	r3, r2, #30
 8008646:	680e      	ldr	r6, [r1, #0]
 8008648:	bf08      	it	eq
 800864a:	694b      	ldreq	r3, [r1, #20]
 800864c:	600f      	str	r7, [r1, #0]
 800864e:	bf18      	it	ne
 8008650:	2300      	movne	r3, #0
 8008652:	eba6 0807 	sub.w	r8, r6, r7
 8008656:	608b      	str	r3, [r1, #8]
 8008658:	f1b8 0f00 	cmp.w	r8, #0
 800865c:	dde9      	ble.n	8008632 <__sflush_r+0xae>
 800865e:	6a21      	ldr	r1, [r4, #32]
 8008660:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008662:	4643      	mov	r3, r8
 8008664:	463a      	mov	r2, r7
 8008666:	4628      	mov	r0, r5
 8008668:	47b0      	blx	r6
 800866a:	2800      	cmp	r0, #0
 800866c:	dc08      	bgt.n	8008680 <__sflush_r+0xfc>
 800866e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008676:	81a3      	strh	r3, [r4, #12]
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008680:	4407      	add	r7, r0
 8008682:	eba8 0800 	sub.w	r8, r8, r0
 8008686:	e7e7      	b.n	8008658 <__sflush_r+0xd4>
 8008688:	dfbffffe 	.word	0xdfbffffe

0800868c <_fflush_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	690b      	ldr	r3, [r1, #16]
 8008690:	4605      	mov	r5, r0
 8008692:	460c      	mov	r4, r1
 8008694:	b913      	cbnz	r3, 800869c <_fflush_r+0x10>
 8008696:	2500      	movs	r5, #0
 8008698:	4628      	mov	r0, r5
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	b118      	cbz	r0, 80086a6 <_fflush_r+0x1a>
 800869e:	6a03      	ldr	r3, [r0, #32]
 80086a0:	b90b      	cbnz	r3, 80086a6 <_fflush_r+0x1a>
 80086a2:	f7fd f92f 	bl	8005904 <__sinit>
 80086a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0f3      	beq.n	8008696 <_fflush_r+0xa>
 80086ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086b0:	07d0      	lsls	r0, r2, #31
 80086b2:	d404      	bmi.n	80086be <_fflush_r+0x32>
 80086b4:	0599      	lsls	r1, r3, #22
 80086b6:	d402      	bmi.n	80086be <_fflush_r+0x32>
 80086b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ba:	f7fd fb70 	bl	8005d9e <__retarget_lock_acquire_recursive>
 80086be:	4628      	mov	r0, r5
 80086c0:	4621      	mov	r1, r4
 80086c2:	f7ff ff5f 	bl	8008584 <__sflush_r>
 80086c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086c8:	07da      	lsls	r2, r3, #31
 80086ca:	4605      	mov	r5, r0
 80086cc:	d4e4      	bmi.n	8008698 <_fflush_r+0xc>
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	059b      	lsls	r3, r3, #22
 80086d2:	d4e1      	bmi.n	8008698 <_fflush_r+0xc>
 80086d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086d6:	f7fd fb63 	bl	8005da0 <__retarget_lock_release_recursive>
 80086da:	e7dd      	b.n	8008698 <_fflush_r+0xc>

080086dc <__swhatbuf_r>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	460c      	mov	r4, r1
 80086e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e4:	2900      	cmp	r1, #0
 80086e6:	b096      	sub	sp, #88	@ 0x58
 80086e8:	4615      	mov	r5, r2
 80086ea:	461e      	mov	r6, r3
 80086ec:	da0d      	bge.n	800870a <__swhatbuf_r+0x2e>
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086f4:	f04f 0100 	mov.w	r1, #0
 80086f8:	bf14      	ite	ne
 80086fa:	2340      	movne	r3, #64	@ 0x40
 80086fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008700:	2000      	movs	r0, #0
 8008702:	6031      	str	r1, [r6, #0]
 8008704:	602b      	str	r3, [r5, #0]
 8008706:	b016      	add	sp, #88	@ 0x58
 8008708:	bd70      	pop	{r4, r5, r6, pc}
 800870a:	466a      	mov	r2, sp
 800870c:	f000 f874 	bl	80087f8 <_fstat_r>
 8008710:	2800      	cmp	r0, #0
 8008712:	dbec      	blt.n	80086ee <__swhatbuf_r+0x12>
 8008714:	9901      	ldr	r1, [sp, #4]
 8008716:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800871a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800871e:	4259      	negs	r1, r3
 8008720:	4159      	adcs	r1, r3
 8008722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008726:	e7eb      	b.n	8008700 <__swhatbuf_r+0x24>

08008728 <__smakebuf_r>:
 8008728:	898b      	ldrh	r3, [r1, #12]
 800872a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800872c:	079d      	lsls	r5, r3, #30
 800872e:	4606      	mov	r6, r0
 8008730:	460c      	mov	r4, r1
 8008732:	d507      	bpl.n	8008744 <__smakebuf_r+0x1c>
 8008734:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	2301      	movs	r3, #1
 800873e:	6163      	str	r3, [r4, #20]
 8008740:	b003      	add	sp, #12
 8008742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008744:	ab01      	add	r3, sp, #4
 8008746:	466a      	mov	r2, sp
 8008748:	f7ff ffc8 	bl	80086dc <__swhatbuf_r>
 800874c:	9f00      	ldr	r7, [sp, #0]
 800874e:	4605      	mov	r5, r0
 8008750:	4639      	mov	r1, r7
 8008752:	4630      	mov	r0, r6
 8008754:	f7fe f9fc 	bl	8006b50 <_malloc_r>
 8008758:	b948      	cbnz	r0, 800876e <__smakebuf_r+0x46>
 800875a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800875e:	059a      	lsls	r2, r3, #22
 8008760:	d4ee      	bmi.n	8008740 <__smakebuf_r+0x18>
 8008762:	f023 0303 	bic.w	r3, r3, #3
 8008766:	f043 0302 	orr.w	r3, r3, #2
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	e7e2      	b.n	8008734 <__smakebuf_r+0xc>
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	6020      	str	r0, [r4, #0]
 8008772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008776:	81a3      	strh	r3, [r4, #12]
 8008778:	9b01      	ldr	r3, [sp, #4]
 800877a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800877e:	b15b      	cbz	r3, 8008798 <__smakebuf_r+0x70>
 8008780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008784:	4630      	mov	r0, r6
 8008786:	f000 f849 	bl	800881c <_isatty_r>
 800878a:	b128      	cbz	r0, 8008798 <__smakebuf_r+0x70>
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	f023 0303 	bic.w	r3, r3, #3
 8008792:	f043 0301 	orr.w	r3, r3, #1
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	431d      	orrs	r5, r3
 800879c:	81a5      	strh	r5, [r4, #12]
 800879e:	e7cf      	b.n	8008740 <__smakebuf_r+0x18>

080087a0 <memmove>:
 80087a0:	4288      	cmp	r0, r1
 80087a2:	b510      	push	{r4, lr}
 80087a4:	eb01 0402 	add.w	r4, r1, r2
 80087a8:	d902      	bls.n	80087b0 <memmove+0x10>
 80087aa:	4284      	cmp	r4, r0
 80087ac:	4623      	mov	r3, r4
 80087ae:	d807      	bhi.n	80087c0 <memmove+0x20>
 80087b0:	1e43      	subs	r3, r0, #1
 80087b2:	42a1      	cmp	r1, r4
 80087b4:	d008      	beq.n	80087c8 <memmove+0x28>
 80087b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087be:	e7f8      	b.n	80087b2 <memmove+0x12>
 80087c0:	4402      	add	r2, r0
 80087c2:	4601      	mov	r1, r0
 80087c4:	428a      	cmp	r2, r1
 80087c6:	d100      	bne.n	80087ca <memmove+0x2a>
 80087c8:	bd10      	pop	{r4, pc}
 80087ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087d2:	e7f7      	b.n	80087c4 <memmove+0x24>

080087d4 <strncmp>:
 80087d4:	b510      	push	{r4, lr}
 80087d6:	b16a      	cbz	r2, 80087f4 <strncmp+0x20>
 80087d8:	3901      	subs	r1, #1
 80087da:	1884      	adds	r4, r0, r2
 80087dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d103      	bne.n	80087f0 <strncmp+0x1c>
 80087e8:	42a0      	cmp	r0, r4
 80087ea:	d001      	beq.n	80087f0 <strncmp+0x1c>
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	d1f5      	bne.n	80087dc <strncmp+0x8>
 80087f0:	1ad0      	subs	r0, r2, r3
 80087f2:	bd10      	pop	{r4, pc}
 80087f4:	4610      	mov	r0, r2
 80087f6:	e7fc      	b.n	80087f2 <strncmp+0x1e>

080087f8 <_fstat_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d07      	ldr	r5, [pc, #28]	@ (8008818 <_fstat_r+0x20>)
 80087fc:	2300      	movs	r3, #0
 80087fe:	4604      	mov	r4, r0
 8008800:	4608      	mov	r0, r1
 8008802:	4611      	mov	r1, r2
 8008804:	602b      	str	r3, [r5, #0]
 8008806:	f7f9 f881 	bl	800190c <_fstat>
 800880a:	1c43      	adds	r3, r0, #1
 800880c:	d102      	bne.n	8008814 <_fstat_r+0x1c>
 800880e:	682b      	ldr	r3, [r5, #0]
 8008810:	b103      	cbz	r3, 8008814 <_fstat_r+0x1c>
 8008812:	6023      	str	r3, [r4, #0]
 8008814:	bd38      	pop	{r3, r4, r5, pc}
 8008816:	bf00      	nop
 8008818:	20000528 	.word	0x20000528

0800881c <_isatty_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4d06      	ldr	r5, [pc, #24]	@ (8008838 <_isatty_r+0x1c>)
 8008820:	2300      	movs	r3, #0
 8008822:	4604      	mov	r4, r0
 8008824:	4608      	mov	r0, r1
 8008826:	602b      	str	r3, [r5, #0]
 8008828:	f7f9 f880 	bl	800192c <_isatty>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d102      	bne.n	8008836 <_isatty_r+0x1a>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	b103      	cbz	r3, 8008836 <_isatty_r+0x1a>
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	20000528 	.word	0x20000528

0800883c <_sbrk_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4d06      	ldr	r5, [pc, #24]	@ (8008858 <_sbrk_r+0x1c>)
 8008840:	2300      	movs	r3, #0
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	f7f9 f888 	bl	800195c <_sbrk>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_sbrk_r+0x1a>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_sbrk_r+0x1a>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20000528 	.word	0x20000528
 800885c:	00000000 	.word	0x00000000

08008860 <nan>:
 8008860:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008868 <nan+0x8>
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	00000000 	.word	0x00000000
 800886c:	7ff80000 	.word	0x7ff80000

08008870 <__assert_func>:
 8008870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008872:	4614      	mov	r4, r2
 8008874:	461a      	mov	r2, r3
 8008876:	4b09      	ldr	r3, [pc, #36]	@ (800889c <__assert_func+0x2c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4605      	mov	r5, r0
 800887c:	68d8      	ldr	r0, [r3, #12]
 800887e:	b954      	cbnz	r4, 8008896 <__assert_func+0x26>
 8008880:	4b07      	ldr	r3, [pc, #28]	@ (80088a0 <__assert_func+0x30>)
 8008882:	461c      	mov	r4, r3
 8008884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008888:	9100      	str	r1, [sp, #0]
 800888a:	462b      	mov	r3, r5
 800888c:	4905      	ldr	r1, [pc, #20]	@ (80088a4 <__assert_func+0x34>)
 800888e:	f000 fba7 	bl	8008fe0 <fiprintf>
 8008892:	f000 fbb7 	bl	8009004 <abort>
 8008896:	4b04      	ldr	r3, [pc, #16]	@ (80088a8 <__assert_func+0x38>)
 8008898:	e7f4      	b.n	8008884 <__assert_func+0x14>
 800889a:	bf00      	nop
 800889c:	2000001c 	.word	0x2000001c
 80088a0:	08009855 	.word	0x08009855
 80088a4:	08009827 	.word	0x08009827
 80088a8:	0800981a 	.word	0x0800981a

080088ac <_calloc_r>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	fba1 5402 	umull	r5, r4, r1, r2
 80088b2:	b93c      	cbnz	r4, 80088c4 <_calloc_r+0x18>
 80088b4:	4629      	mov	r1, r5
 80088b6:	f7fe f94b 	bl	8006b50 <_malloc_r>
 80088ba:	4606      	mov	r6, r0
 80088bc:	b928      	cbnz	r0, 80088ca <_calloc_r+0x1e>
 80088be:	2600      	movs	r6, #0
 80088c0:	4630      	mov	r0, r6
 80088c2:	bd70      	pop	{r4, r5, r6, pc}
 80088c4:	220c      	movs	r2, #12
 80088c6:	6002      	str	r2, [r0, #0]
 80088c8:	e7f9      	b.n	80088be <_calloc_r+0x12>
 80088ca:	462a      	mov	r2, r5
 80088cc:	4621      	mov	r1, r4
 80088ce:	f7fd f9e8 	bl	8005ca2 <memset>
 80088d2:	e7f5      	b.n	80088c0 <_calloc_r+0x14>

080088d4 <rshift>:
 80088d4:	6903      	ldr	r3, [r0, #16]
 80088d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088e2:	f100 0414 	add.w	r4, r0, #20
 80088e6:	dd45      	ble.n	8008974 <rshift+0xa0>
 80088e8:	f011 011f 	ands.w	r1, r1, #31
 80088ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088f4:	d10c      	bne.n	8008910 <rshift+0x3c>
 80088f6:	f100 0710 	add.w	r7, r0, #16
 80088fa:	4629      	mov	r1, r5
 80088fc:	42b1      	cmp	r1, r6
 80088fe:	d334      	bcc.n	800896a <rshift+0x96>
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	1eea      	subs	r2, r5, #3
 8008906:	4296      	cmp	r6, r2
 8008908:	bf38      	it	cc
 800890a:	2300      	movcc	r3, #0
 800890c:	4423      	add	r3, r4
 800890e:	e015      	b.n	800893c <rshift+0x68>
 8008910:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008914:	f1c1 0820 	rsb	r8, r1, #32
 8008918:	40cf      	lsrs	r7, r1
 800891a:	f105 0e04 	add.w	lr, r5, #4
 800891e:	46a1      	mov	r9, r4
 8008920:	4576      	cmp	r6, lr
 8008922:	46f4      	mov	ip, lr
 8008924:	d815      	bhi.n	8008952 <rshift+0x7e>
 8008926:	1a9a      	subs	r2, r3, r2
 8008928:	0092      	lsls	r2, r2, #2
 800892a:	3a04      	subs	r2, #4
 800892c:	3501      	adds	r5, #1
 800892e:	42ae      	cmp	r6, r5
 8008930:	bf38      	it	cc
 8008932:	2200      	movcc	r2, #0
 8008934:	18a3      	adds	r3, r4, r2
 8008936:	50a7      	str	r7, [r4, r2]
 8008938:	b107      	cbz	r7, 800893c <rshift+0x68>
 800893a:	3304      	adds	r3, #4
 800893c:	1b1a      	subs	r2, r3, r4
 800893e:	42a3      	cmp	r3, r4
 8008940:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008944:	bf08      	it	eq
 8008946:	2300      	moveq	r3, #0
 8008948:	6102      	str	r2, [r0, #16]
 800894a:	bf08      	it	eq
 800894c:	6143      	streq	r3, [r0, #20]
 800894e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008952:	f8dc c000 	ldr.w	ip, [ip]
 8008956:	fa0c fc08 	lsl.w	ip, ip, r8
 800895a:	ea4c 0707 	orr.w	r7, ip, r7
 800895e:	f849 7b04 	str.w	r7, [r9], #4
 8008962:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008966:	40cf      	lsrs	r7, r1
 8008968:	e7da      	b.n	8008920 <rshift+0x4c>
 800896a:	f851 cb04 	ldr.w	ip, [r1], #4
 800896e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008972:	e7c3      	b.n	80088fc <rshift+0x28>
 8008974:	4623      	mov	r3, r4
 8008976:	e7e1      	b.n	800893c <rshift+0x68>

08008978 <__hexdig_fun>:
 8008978:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800897c:	2b09      	cmp	r3, #9
 800897e:	d802      	bhi.n	8008986 <__hexdig_fun+0xe>
 8008980:	3820      	subs	r0, #32
 8008982:	b2c0      	uxtb	r0, r0
 8008984:	4770      	bx	lr
 8008986:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800898a:	2b05      	cmp	r3, #5
 800898c:	d801      	bhi.n	8008992 <__hexdig_fun+0x1a>
 800898e:	3847      	subs	r0, #71	@ 0x47
 8008990:	e7f7      	b.n	8008982 <__hexdig_fun+0xa>
 8008992:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008996:	2b05      	cmp	r3, #5
 8008998:	d801      	bhi.n	800899e <__hexdig_fun+0x26>
 800899a:	3827      	subs	r0, #39	@ 0x27
 800899c:	e7f1      	b.n	8008982 <__hexdig_fun+0xa>
 800899e:	2000      	movs	r0, #0
 80089a0:	4770      	bx	lr
	...

080089a4 <__gethex>:
 80089a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	b085      	sub	sp, #20
 80089aa:	468a      	mov	sl, r1
 80089ac:	9302      	str	r3, [sp, #8]
 80089ae:	680b      	ldr	r3, [r1, #0]
 80089b0:	9001      	str	r0, [sp, #4]
 80089b2:	4690      	mov	r8, r2
 80089b4:	1c9c      	adds	r4, r3, #2
 80089b6:	46a1      	mov	r9, r4
 80089b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80089bc:	2830      	cmp	r0, #48	@ 0x30
 80089be:	d0fa      	beq.n	80089b6 <__gethex+0x12>
 80089c0:	eba9 0303 	sub.w	r3, r9, r3
 80089c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80089c8:	f7ff ffd6 	bl	8008978 <__hexdig_fun>
 80089cc:	4605      	mov	r5, r0
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d168      	bne.n	8008aa4 <__gethex+0x100>
 80089d2:	49a0      	ldr	r1, [pc, #640]	@ (8008c54 <__gethex+0x2b0>)
 80089d4:	2201      	movs	r2, #1
 80089d6:	4648      	mov	r0, r9
 80089d8:	f7ff fefc 	bl	80087d4 <strncmp>
 80089dc:	4607      	mov	r7, r0
 80089de:	2800      	cmp	r0, #0
 80089e0:	d167      	bne.n	8008ab2 <__gethex+0x10e>
 80089e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80089e6:	4626      	mov	r6, r4
 80089e8:	f7ff ffc6 	bl	8008978 <__hexdig_fun>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d062      	beq.n	8008ab6 <__gethex+0x112>
 80089f0:	4623      	mov	r3, r4
 80089f2:	7818      	ldrb	r0, [r3, #0]
 80089f4:	2830      	cmp	r0, #48	@ 0x30
 80089f6:	4699      	mov	r9, r3
 80089f8:	f103 0301 	add.w	r3, r3, #1
 80089fc:	d0f9      	beq.n	80089f2 <__gethex+0x4e>
 80089fe:	f7ff ffbb 	bl	8008978 <__hexdig_fun>
 8008a02:	fab0 f580 	clz	r5, r0
 8008a06:	096d      	lsrs	r5, r5, #5
 8008a08:	f04f 0b01 	mov.w	fp, #1
 8008a0c:	464a      	mov	r2, r9
 8008a0e:	4616      	mov	r6, r2
 8008a10:	3201      	adds	r2, #1
 8008a12:	7830      	ldrb	r0, [r6, #0]
 8008a14:	f7ff ffb0 	bl	8008978 <__hexdig_fun>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d1f8      	bne.n	8008a0e <__gethex+0x6a>
 8008a1c:	498d      	ldr	r1, [pc, #564]	@ (8008c54 <__gethex+0x2b0>)
 8008a1e:	2201      	movs	r2, #1
 8008a20:	4630      	mov	r0, r6
 8008a22:	f7ff fed7 	bl	80087d4 <strncmp>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d13f      	bne.n	8008aaa <__gethex+0x106>
 8008a2a:	b944      	cbnz	r4, 8008a3e <__gethex+0x9a>
 8008a2c:	1c74      	adds	r4, r6, #1
 8008a2e:	4622      	mov	r2, r4
 8008a30:	4616      	mov	r6, r2
 8008a32:	3201      	adds	r2, #1
 8008a34:	7830      	ldrb	r0, [r6, #0]
 8008a36:	f7ff ff9f 	bl	8008978 <__hexdig_fun>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d1f8      	bne.n	8008a30 <__gethex+0x8c>
 8008a3e:	1ba4      	subs	r4, r4, r6
 8008a40:	00a7      	lsls	r7, r4, #2
 8008a42:	7833      	ldrb	r3, [r6, #0]
 8008a44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008a48:	2b50      	cmp	r3, #80	@ 0x50
 8008a4a:	d13e      	bne.n	8008aca <__gethex+0x126>
 8008a4c:	7873      	ldrb	r3, [r6, #1]
 8008a4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a50:	d033      	beq.n	8008aba <__gethex+0x116>
 8008a52:	2b2d      	cmp	r3, #45	@ 0x2d
 8008a54:	d034      	beq.n	8008ac0 <__gethex+0x11c>
 8008a56:	1c71      	adds	r1, r6, #1
 8008a58:	2400      	movs	r4, #0
 8008a5a:	7808      	ldrb	r0, [r1, #0]
 8008a5c:	f7ff ff8c 	bl	8008978 <__hexdig_fun>
 8008a60:	1e43      	subs	r3, r0, #1
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b18      	cmp	r3, #24
 8008a66:	d830      	bhi.n	8008aca <__gethex+0x126>
 8008a68:	f1a0 0210 	sub.w	r2, r0, #16
 8008a6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a70:	f7ff ff82 	bl	8008978 <__hexdig_fun>
 8008a74:	f100 3cff 	add.w	ip, r0, #4294967295
 8008a78:	fa5f fc8c 	uxtb.w	ip, ip
 8008a7c:	f1bc 0f18 	cmp.w	ip, #24
 8008a80:	f04f 030a 	mov.w	r3, #10
 8008a84:	d91e      	bls.n	8008ac4 <__gethex+0x120>
 8008a86:	b104      	cbz	r4, 8008a8a <__gethex+0xe6>
 8008a88:	4252      	negs	r2, r2
 8008a8a:	4417      	add	r7, r2
 8008a8c:	f8ca 1000 	str.w	r1, [sl]
 8008a90:	b1ed      	cbz	r5, 8008ace <__gethex+0x12a>
 8008a92:	f1bb 0f00 	cmp.w	fp, #0
 8008a96:	bf0c      	ite	eq
 8008a98:	2506      	moveq	r5, #6
 8008a9a:	2500      	movne	r5, #0
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	b005      	add	sp, #20
 8008aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa4:	2500      	movs	r5, #0
 8008aa6:	462c      	mov	r4, r5
 8008aa8:	e7b0      	b.n	8008a0c <__gethex+0x68>
 8008aaa:	2c00      	cmp	r4, #0
 8008aac:	d1c7      	bne.n	8008a3e <__gethex+0x9a>
 8008aae:	4627      	mov	r7, r4
 8008ab0:	e7c7      	b.n	8008a42 <__gethex+0x9e>
 8008ab2:	464e      	mov	r6, r9
 8008ab4:	462f      	mov	r7, r5
 8008ab6:	2501      	movs	r5, #1
 8008ab8:	e7c3      	b.n	8008a42 <__gethex+0x9e>
 8008aba:	2400      	movs	r4, #0
 8008abc:	1cb1      	adds	r1, r6, #2
 8008abe:	e7cc      	b.n	8008a5a <__gethex+0xb6>
 8008ac0:	2401      	movs	r4, #1
 8008ac2:	e7fb      	b.n	8008abc <__gethex+0x118>
 8008ac4:	fb03 0002 	mla	r0, r3, r2, r0
 8008ac8:	e7ce      	b.n	8008a68 <__gethex+0xc4>
 8008aca:	4631      	mov	r1, r6
 8008acc:	e7de      	b.n	8008a8c <__gethex+0xe8>
 8008ace:	eba6 0309 	sub.w	r3, r6, r9
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	2b07      	cmp	r3, #7
 8008ad8:	dc0a      	bgt.n	8008af0 <__gethex+0x14c>
 8008ada:	9801      	ldr	r0, [sp, #4]
 8008adc:	f7fe f8c4 	bl	8006c68 <_Balloc>
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	b940      	cbnz	r0, 8008af6 <__gethex+0x152>
 8008ae4:	4b5c      	ldr	r3, [pc, #368]	@ (8008c58 <__gethex+0x2b4>)
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	21e4      	movs	r1, #228	@ 0xe4
 8008aea:	485c      	ldr	r0, [pc, #368]	@ (8008c5c <__gethex+0x2b8>)
 8008aec:	f7ff fec0 	bl	8008870 <__assert_func>
 8008af0:	3101      	adds	r1, #1
 8008af2:	105b      	asrs	r3, r3, #1
 8008af4:	e7ef      	b.n	8008ad6 <__gethex+0x132>
 8008af6:	f100 0a14 	add.w	sl, r0, #20
 8008afa:	2300      	movs	r3, #0
 8008afc:	4655      	mov	r5, sl
 8008afe:	469b      	mov	fp, r3
 8008b00:	45b1      	cmp	r9, r6
 8008b02:	d337      	bcc.n	8008b74 <__gethex+0x1d0>
 8008b04:	f845 bb04 	str.w	fp, [r5], #4
 8008b08:	eba5 050a 	sub.w	r5, r5, sl
 8008b0c:	10ad      	asrs	r5, r5, #2
 8008b0e:	6125      	str	r5, [r4, #16]
 8008b10:	4658      	mov	r0, fp
 8008b12:	f7fe f99b 	bl	8006e4c <__hi0bits>
 8008b16:	016d      	lsls	r5, r5, #5
 8008b18:	f8d8 6000 	ldr.w	r6, [r8]
 8008b1c:	1a2d      	subs	r5, r5, r0
 8008b1e:	42b5      	cmp	r5, r6
 8008b20:	dd54      	ble.n	8008bcc <__gethex+0x228>
 8008b22:	1bad      	subs	r5, r5, r6
 8008b24:	4629      	mov	r1, r5
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7fe fd2f 	bl	800758a <__any_on>
 8008b2c:	4681      	mov	r9, r0
 8008b2e:	b178      	cbz	r0, 8008b50 <__gethex+0x1ac>
 8008b30:	1e6b      	subs	r3, r5, #1
 8008b32:	1159      	asrs	r1, r3, #5
 8008b34:	f003 021f 	and.w	r2, r3, #31
 8008b38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008b3c:	f04f 0901 	mov.w	r9, #1
 8008b40:	fa09 f202 	lsl.w	r2, r9, r2
 8008b44:	420a      	tst	r2, r1
 8008b46:	d003      	beq.n	8008b50 <__gethex+0x1ac>
 8008b48:	454b      	cmp	r3, r9
 8008b4a:	dc36      	bgt.n	8008bba <__gethex+0x216>
 8008b4c:	f04f 0902 	mov.w	r9, #2
 8008b50:	4629      	mov	r1, r5
 8008b52:	4620      	mov	r0, r4
 8008b54:	f7ff febe 	bl	80088d4 <rshift>
 8008b58:	442f      	add	r7, r5
 8008b5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b5e:	42bb      	cmp	r3, r7
 8008b60:	da42      	bge.n	8008be8 <__gethex+0x244>
 8008b62:	9801      	ldr	r0, [sp, #4]
 8008b64:	4621      	mov	r1, r4
 8008b66:	f7fe f8bf 	bl	8006ce8 <_Bfree>
 8008b6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	25a3      	movs	r5, #163	@ 0xa3
 8008b72:	e793      	b.n	8008a9c <__gethex+0xf8>
 8008b74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008b78:	2a2e      	cmp	r2, #46	@ 0x2e
 8008b7a:	d012      	beq.n	8008ba2 <__gethex+0x1fe>
 8008b7c:	2b20      	cmp	r3, #32
 8008b7e:	d104      	bne.n	8008b8a <__gethex+0x1e6>
 8008b80:	f845 bb04 	str.w	fp, [r5], #4
 8008b84:	f04f 0b00 	mov.w	fp, #0
 8008b88:	465b      	mov	r3, fp
 8008b8a:	7830      	ldrb	r0, [r6, #0]
 8008b8c:	9303      	str	r3, [sp, #12]
 8008b8e:	f7ff fef3 	bl	8008978 <__hexdig_fun>
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	f000 000f 	and.w	r0, r0, #15
 8008b98:	4098      	lsls	r0, r3
 8008b9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	e7ae      	b.n	8008b00 <__gethex+0x15c>
 8008ba2:	45b1      	cmp	r9, r6
 8008ba4:	d8ea      	bhi.n	8008b7c <__gethex+0x1d8>
 8008ba6:	492b      	ldr	r1, [pc, #172]	@ (8008c54 <__gethex+0x2b0>)
 8008ba8:	9303      	str	r3, [sp, #12]
 8008baa:	2201      	movs	r2, #1
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff fe11 	bl	80087d4 <strncmp>
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d1e1      	bne.n	8008b7c <__gethex+0x1d8>
 8008bb8:	e7a2      	b.n	8008b00 <__gethex+0x15c>
 8008bba:	1ea9      	subs	r1, r5, #2
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f7fe fce4 	bl	800758a <__any_on>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d0c2      	beq.n	8008b4c <__gethex+0x1a8>
 8008bc6:	f04f 0903 	mov.w	r9, #3
 8008bca:	e7c1      	b.n	8008b50 <__gethex+0x1ac>
 8008bcc:	da09      	bge.n	8008be2 <__gethex+0x23e>
 8008bce:	1b75      	subs	r5, r6, r5
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	9801      	ldr	r0, [sp, #4]
 8008bd4:	462a      	mov	r2, r5
 8008bd6:	f7fe fa9f 	bl	8007118 <__lshift>
 8008bda:	1b7f      	subs	r7, r7, r5
 8008bdc:	4604      	mov	r4, r0
 8008bde:	f100 0a14 	add.w	sl, r0, #20
 8008be2:	f04f 0900 	mov.w	r9, #0
 8008be6:	e7b8      	b.n	8008b5a <__gethex+0x1b6>
 8008be8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008bec:	42bd      	cmp	r5, r7
 8008bee:	dd6f      	ble.n	8008cd0 <__gethex+0x32c>
 8008bf0:	1bed      	subs	r5, r5, r7
 8008bf2:	42ae      	cmp	r6, r5
 8008bf4:	dc34      	bgt.n	8008c60 <__gethex+0x2bc>
 8008bf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d022      	beq.n	8008c44 <__gethex+0x2a0>
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d024      	beq.n	8008c4c <__gethex+0x2a8>
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d115      	bne.n	8008c32 <__gethex+0x28e>
 8008c06:	42ae      	cmp	r6, r5
 8008c08:	d113      	bne.n	8008c32 <__gethex+0x28e>
 8008c0a:	2e01      	cmp	r6, #1
 8008c0c:	d10b      	bne.n	8008c26 <__gethex+0x282>
 8008c0e:	9a02      	ldr	r2, [sp, #8]
 8008c10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	2301      	movs	r3, #1
 8008c18:	6123      	str	r3, [r4, #16]
 8008c1a:	f8ca 3000 	str.w	r3, [sl]
 8008c1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c20:	2562      	movs	r5, #98	@ 0x62
 8008c22:	601c      	str	r4, [r3, #0]
 8008c24:	e73a      	b.n	8008a9c <__gethex+0xf8>
 8008c26:	1e71      	subs	r1, r6, #1
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f7fe fcae 	bl	800758a <__any_on>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d1ed      	bne.n	8008c0e <__gethex+0x26a>
 8008c32:	9801      	ldr	r0, [sp, #4]
 8008c34:	4621      	mov	r1, r4
 8008c36:	f7fe f857 	bl	8006ce8 <_Bfree>
 8008c3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	2550      	movs	r5, #80	@ 0x50
 8008c42:	e72b      	b.n	8008a9c <__gethex+0xf8>
 8008c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f3      	bne.n	8008c32 <__gethex+0x28e>
 8008c4a:	e7e0      	b.n	8008c0e <__gethex+0x26a>
 8008c4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1dd      	bne.n	8008c0e <__gethex+0x26a>
 8008c52:	e7ee      	b.n	8008c32 <__gethex+0x28e>
 8008c54:	080096a8 	.word	0x080096a8
 8008c58:	0800953d 	.word	0x0800953d
 8008c5c:	08009856 	.word	0x08009856
 8008c60:	1e6f      	subs	r7, r5, #1
 8008c62:	f1b9 0f00 	cmp.w	r9, #0
 8008c66:	d130      	bne.n	8008cca <__gethex+0x326>
 8008c68:	b127      	cbz	r7, 8008c74 <__gethex+0x2d0>
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f7fe fc8c 	bl	800758a <__any_on>
 8008c72:	4681      	mov	r9, r0
 8008c74:	117a      	asrs	r2, r7, #5
 8008c76:	2301      	movs	r3, #1
 8008c78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c7c:	f007 071f 	and.w	r7, r7, #31
 8008c80:	40bb      	lsls	r3, r7
 8008c82:	4213      	tst	r3, r2
 8008c84:	4629      	mov	r1, r5
 8008c86:	4620      	mov	r0, r4
 8008c88:	bf18      	it	ne
 8008c8a:	f049 0902 	orrne.w	r9, r9, #2
 8008c8e:	f7ff fe21 	bl	80088d4 <rshift>
 8008c92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008c96:	1b76      	subs	r6, r6, r5
 8008c98:	2502      	movs	r5, #2
 8008c9a:	f1b9 0f00 	cmp.w	r9, #0
 8008c9e:	d047      	beq.n	8008d30 <__gethex+0x38c>
 8008ca0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d015      	beq.n	8008cd4 <__gethex+0x330>
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d017      	beq.n	8008cdc <__gethex+0x338>
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d109      	bne.n	8008cc4 <__gethex+0x320>
 8008cb0:	f019 0f02 	tst.w	r9, #2
 8008cb4:	d006      	beq.n	8008cc4 <__gethex+0x320>
 8008cb6:	f8da 3000 	ldr.w	r3, [sl]
 8008cba:	ea49 0903 	orr.w	r9, r9, r3
 8008cbe:	f019 0f01 	tst.w	r9, #1
 8008cc2:	d10e      	bne.n	8008ce2 <__gethex+0x33e>
 8008cc4:	f045 0510 	orr.w	r5, r5, #16
 8008cc8:	e032      	b.n	8008d30 <__gethex+0x38c>
 8008cca:	f04f 0901 	mov.w	r9, #1
 8008cce:	e7d1      	b.n	8008c74 <__gethex+0x2d0>
 8008cd0:	2501      	movs	r5, #1
 8008cd2:	e7e2      	b.n	8008c9a <__gethex+0x2f6>
 8008cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cd6:	f1c3 0301 	rsb	r3, r3, #1
 8008cda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0f0      	beq.n	8008cc4 <__gethex+0x320>
 8008ce2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ce6:	f104 0314 	add.w	r3, r4, #20
 8008cea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008cee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008cf2:	f04f 0c00 	mov.w	ip, #0
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cfc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d00:	d01b      	beq.n	8008d3a <__gethex+0x396>
 8008d02:	3201      	adds	r2, #1
 8008d04:	6002      	str	r2, [r0, #0]
 8008d06:	2d02      	cmp	r5, #2
 8008d08:	f104 0314 	add.w	r3, r4, #20
 8008d0c:	d13c      	bne.n	8008d88 <__gethex+0x3e4>
 8008d0e:	f8d8 2000 	ldr.w	r2, [r8]
 8008d12:	3a01      	subs	r2, #1
 8008d14:	42b2      	cmp	r2, r6
 8008d16:	d109      	bne.n	8008d2c <__gethex+0x388>
 8008d18:	1171      	asrs	r1, r6, #5
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d20:	f006 061f 	and.w	r6, r6, #31
 8008d24:	fa02 f606 	lsl.w	r6, r2, r6
 8008d28:	421e      	tst	r6, r3
 8008d2a:	d13a      	bne.n	8008da2 <__gethex+0x3fe>
 8008d2c:	f045 0520 	orr.w	r5, r5, #32
 8008d30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d32:	601c      	str	r4, [r3, #0]
 8008d34:	9b02      	ldr	r3, [sp, #8]
 8008d36:	601f      	str	r7, [r3, #0]
 8008d38:	e6b0      	b.n	8008a9c <__gethex+0xf8>
 8008d3a:	4299      	cmp	r1, r3
 8008d3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d40:	d8d9      	bhi.n	8008cf6 <__gethex+0x352>
 8008d42:	68a3      	ldr	r3, [r4, #8]
 8008d44:	459b      	cmp	fp, r3
 8008d46:	db17      	blt.n	8008d78 <__gethex+0x3d4>
 8008d48:	6861      	ldr	r1, [r4, #4]
 8008d4a:	9801      	ldr	r0, [sp, #4]
 8008d4c:	3101      	adds	r1, #1
 8008d4e:	f7fd ff8b 	bl	8006c68 <_Balloc>
 8008d52:	4681      	mov	r9, r0
 8008d54:	b918      	cbnz	r0, 8008d5e <__gethex+0x3ba>
 8008d56:	4b1a      	ldr	r3, [pc, #104]	@ (8008dc0 <__gethex+0x41c>)
 8008d58:	4602      	mov	r2, r0
 8008d5a:	2184      	movs	r1, #132	@ 0x84
 8008d5c:	e6c5      	b.n	8008aea <__gethex+0x146>
 8008d5e:	6922      	ldr	r2, [r4, #16]
 8008d60:	3202      	adds	r2, #2
 8008d62:	f104 010c 	add.w	r1, r4, #12
 8008d66:	0092      	lsls	r2, r2, #2
 8008d68:	300c      	adds	r0, #12
 8008d6a:	f7fd f81a 	bl	8005da2 <memcpy>
 8008d6e:	4621      	mov	r1, r4
 8008d70:	9801      	ldr	r0, [sp, #4]
 8008d72:	f7fd ffb9 	bl	8006ce8 <_Bfree>
 8008d76:	464c      	mov	r4, r9
 8008d78:	6923      	ldr	r3, [r4, #16]
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d80:	6122      	str	r2, [r4, #16]
 8008d82:	2201      	movs	r2, #1
 8008d84:	615a      	str	r2, [r3, #20]
 8008d86:	e7be      	b.n	8008d06 <__gethex+0x362>
 8008d88:	6922      	ldr	r2, [r4, #16]
 8008d8a:	455a      	cmp	r2, fp
 8008d8c:	dd0b      	ble.n	8008da6 <__gethex+0x402>
 8008d8e:	2101      	movs	r1, #1
 8008d90:	4620      	mov	r0, r4
 8008d92:	f7ff fd9f 	bl	80088d4 <rshift>
 8008d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d9a:	3701      	adds	r7, #1
 8008d9c:	42bb      	cmp	r3, r7
 8008d9e:	f6ff aee0 	blt.w	8008b62 <__gethex+0x1be>
 8008da2:	2501      	movs	r5, #1
 8008da4:	e7c2      	b.n	8008d2c <__gethex+0x388>
 8008da6:	f016 061f 	ands.w	r6, r6, #31
 8008daa:	d0fa      	beq.n	8008da2 <__gethex+0x3fe>
 8008dac:	4453      	add	r3, sl
 8008dae:	f1c6 0620 	rsb	r6, r6, #32
 8008db2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008db6:	f7fe f849 	bl	8006e4c <__hi0bits>
 8008dba:	42b0      	cmp	r0, r6
 8008dbc:	dbe7      	blt.n	8008d8e <__gethex+0x3ea>
 8008dbe:	e7f0      	b.n	8008da2 <__gethex+0x3fe>
 8008dc0:	0800953d 	.word	0x0800953d

08008dc4 <L_shift>:
 8008dc4:	f1c2 0208 	rsb	r2, r2, #8
 8008dc8:	0092      	lsls	r2, r2, #2
 8008dca:	b570      	push	{r4, r5, r6, lr}
 8008dcc:	f1c2 0620 	rsb	r6, r2, #32
 8008dd0:	6843      	ldr	r3, [r0, #4]
 8008dd2:	6804      	ldr	r4, [r0, #0]
 8008dd4:	fa03 f506 	lsl.w	r5, r3, r6
 8008dd8:	432c      	orrs	r4, r5
 8008dda:	40d3      	lsrs	r3, r2
 8008ddc:	6004      	str	r4, [r0, #0]
 8008dde:	f840 3f04 	str.w	r3, [r0, #4]!
 8008de2:	4288      	cmp	r0, r1
 8008de4:	d3f4      	bcc.n	8008dd0 <L_shift+0xc>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}

08008de8 <__match>:
 8008de8:	b530      	push	{r4, r5, lr}
 8008dea:	6803      	ldr	r3, [r0, #0]
 8008dec:	3301      	adds	r3, #1
 8008dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df2:	b914      	cbnz	r4, 8008dfa <__match+0x12>
 8008df4:	6003      	str	r3, [r0, #0]
 8008df6:	2001      	movs	r0, #1
 8008df8:	bd30      	pop	{r4, r5, pc}
 8008dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dfe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008e02:	2d19      	cmp	r5, #25
 8008e04:	bf98      	it	ls
 8008e06:	3220      	addls	r2, #32
 8008e08:	42a2      	cmp	r2, r4
 8008e0a:	d0f0      	beq.n	8008dee <__match+0x6>
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	e7f3      	b.n	8008df8 <__match+0x10>

08008e10 <__hexnan>:
 8008e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e14:	680b      	ldr	r3, [r1, #0]
 8008e16:	6801      	ldr	r1, [r0, #0]
 8008e18:	115e      	asrs	r6, r3, #5
 8008e1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e1e:	f013 031f 	ands.w	r3, r3, #31
 8008e22:	b087      	sub	sp, #28
 8008e24:	bf18      	it	ne
 8008e26:	3604      	addne	r6, #4
 8008e28:	2500      	movs	r5, #0
 8008e2a:	1f37      	subs	r7, r6, #4
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	4690      	mov	r8, r2
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e36:	46b9      	mov	r9, r7
 8008e38:	463c      	mov	r4, r7
 8008e3a:	9502      	str	r5, [sp, #8]
 8008e3c:	46ab      	mov	fp, r5
 8008e3e:	784a      	ldrb	r2, [r1, #1]
 8008e40:	1c4b      	adds	r3, r1, #1
 8008e42:	9303      	str	r3, [sp, #12]
 8008e44:	b342      	cbz	r2, 8008e98 <__hexnan+0x88>
 8008e46:	4610      	mov	r0, r2
 8008e48:	9105      	str	r1, [sp, #20]
 8008e4a:	9204      	str	r2, [sp, #16]
 8008e4c:	f7ff fd94 	bl	8008978 <__hexdig_fun>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d151      	bne.n	8008ef8 <__hexnan+0xe8>
 8008e54:	9a04      	ldr	r2, [sp, #16]
 8008e56:	9905      	ldr	r1, [sp, #20]
 8008e58:	2a20      	cmp	r2, #32
 8008e5a:	d818      	bhi.n	8008e8e <__hexnan+0x7e>
 8008e5c:	9b02      	ldr	r3, [sp, #8]
 8008e5e:	459b      	cmp	fp, r3
 8008e60:	dd13      	ble.n	8008e8a <__hexnan+0x7a>
 8008e62:	454c      	cmp	r4, r9
 8008e64:	d206      	bcs.n	8008e74 <__hexnan+0x64>
 8008e66:	2d07      	cmp	r5, #7
 8008e68:	dc04      	bgt.n	8008e74 <__hexnan+0x64>
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f7ff ffa8 	bl	8008dc4 <L_shift>
 8008e74:	4544      	cmp	r4, r8
 8008e76:	d952      	bls.n	8008f1e <__hexnan+0x10e>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f1a4 0904 	sub.w	r9, r4, #4
 8008e7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e82:	f8cd b008 	str.w	fp, [sp, #8]
 8008e86:	464c      	mov	r4, r9
 8008e88:	461d      	mov	r5, r3
 8008e8a:	9903      	ldr	r1, [sp, #12]
 8008e8c:	e7d7      	b.n	8008e3e <__hexnan+0x2e>
 8008e8e:	2a29      	cmp	r2, #41	@ 0x29
 8008e90:	d157      	bne.n	8008f42 <__hexnan+0x132>
 8008e92:	3102      	adds	r1, #2
 8008e94:	f8ca 1000 	str.w	r1, [sl]
 8008e98:	f1bb 0f00 	cmp.w	fp, #0
 8008e9c:	d051      	beq.n	8008f42 <__hexnan+0x132>
 8008e9e:	454c      	cmp	r4, r9
 8008ea0:	d206      	bcs.n	8008eb0 <__hexnan+0xa0>
 8008ea2:	2d07      	cmp	r5, #7
 8008ea4:	dc04      	bgt.n	8008eb0 <__hexnan+0xa0>
 8008ea6:	462a      	mov	r2, r5
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7ff ff8a 	bl	8008dc4 <L_shift>
 8008eb0:	4544      	cmp	r4, r8
 8008eb2:	d936      	bls.n	8008f22 <__hexnan+0x112>
 8008eb4:	f1a8 0204 	sub.w	r2, r8, #4
 8008eb8:	4623      	mov	r3, r4
 8008eba:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ebe:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ec2:	429f      	cmp	r7, r3
 8008ec4:	d2f9      	bcs.n	8008eba <__hexnan+0xaa>
 8008ec6:	1b3b      	subs	r3, r7, r4
 8008ec8:	f023 0303 	bic.w	r3, r3, #3
 8008ecc:	3304      	adds	r3, #4
 8008ece:	3401      	adds	r4, #1
 8008ed0:	3e03      	subs	r6, #3
 8008ed2:	42b4      	cmp	r4, r6
 8008ed4:	bf88      	it	hi
 8008ed6:	2304      	movhi	r3, #4
 8008ed8:	4443      	add	r3, r8
 8008eda:	2200      	movs	r2, #0
 8008edc:	f843 2b04 	str.w	r2, [r3], #4
 8008ee0:	429f      	cmp	r7, r3
 8008ee2:	d2fb      	bcs.n	8008edc <__hexnan+0xcc>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	b91b      	cbnz	r3, 8008ef0 <__hexnan+0xe0>
 8008ee8:	4547      	cmp	r7, r8
 8008eea:	d128      	bne.n	8008f3e <__hexnan+0x12e>
 8008eec:	2301      	movs	r3, #1
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	2005      	movs	r0, #5
 8008ef2:	b007      	add	sp, #28
 8008ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef8:	3501      	adds	r5, #1
 8008efa:	2d08      	cmp	r5, #8
 8008efc:	f10b 0b01 	add.w	fp, fp, #1
 8008f00:	dd06      	ble.n	8008f10 <__hexnan+0x100>
 8008f02:	4544      	cmp	r4, r8
 8008f04:	d9c1      	bls.n	8008e8a <__hexnan+0x7a>
 8008f06:	2300      	movs	r3, #0
 8008f08:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f0c:	2501      	movs	r5, #1
 8008f0e:	3c04      	subs	r4, #4
 8008f10:	6822      	ldr	r2, [r4, #0]
 8008f12:	f000 000f 	and.w	r0, r0, #15
 8008f16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f1a:	6020      	str	r0, [r4, #0]
 8008f1c:	e7b5      	b.n	8008e8a <__hexnan+0x7a>
 8008f1e:	2508      	movs	r5, #8
 8008f20:	e7b3      	b.n	8008e8a <__hexnan+0x7a>
 8008f22:	9b01      	ldr	r3, [sp, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d0dd      	beq.n	8008ee4 <__hexnan+0xd4>
 8008f28:	f1c3 0320 	rsb	r3, r3, #32
 8008f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f30:	40da      	lsrs	r2, r3
 8008f32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008f36:	4013      	ands	r3, r2
 8008f38:	f846 3c04 	str.w	r3, [r6, #-4]
 8008f3c:	e7d2      	b.n	8008ee4 <__hexnan+0xd4>
 8008f3e:	3f04      	subs	r7, #4
 8008f40:	e7d0      	b.n	8008ee4 <__hexnan+0xd4>
 8008f42:	2004      	movs	r0, #4
 8008f44:	e7d5      	b.n	8008ef2 <__hexnan+0xe2>

08008f46 <__ascii_mbtowc>:
 8008f46:	b082      	sub	sp, #8
 8008f48:	b901      	cbnz	r1, 8008f4c <__ascii_mbtowc+0x6>
 8008f4a:	a901      	add	r1, sp, #4
 8008f4c:	b142      	cbz	r2, 8008f60 <__ascii_mbtowc+0x1a>
 8008f4e:	b14b      	cbz	r3, 8008f64 <__ascii_mbtowc+0x1e>
 8008f50:	7813      	ldrb	r3, [r2, #0]
 8008f52:	600b      	str	r3, [r1, #0]
 8008f54:	7812      	ldrb	r2, [r2, #0]
 8008f56:	1e10      	subs	r0, r2, #0
 8008f58:	bf18      	it	ne
 8008f5a:	2001      	movne	r0, #1
 8008f5c:	b002      	add	sp, #8
 8008f5e:	4770      	bx	lr
 8008f60:	4610      	mov	r0, r2
 8008f62:	e7fb      	b.n	8008f5c <__ascii_mbtowc+0x16>
 8008f64:	f06f 0001 	mvn.w	r0, #1
 8008f68:	e7f8      	b.n	8008f5c <__ascii_mbtowc+0x16>

08008f6a <_realloc_r>:
 8008f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6e:	4680      	mov	r8, r0
 8008f70:	4615      	mov	r5, r2
 8008f72:	460c      	mov	r4, r1
 8008f74:	b921      	cbnz	r1, 8008f80 <_realloc_r+0x16>
 8008f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	f7fd bde8 	b.w	8006b50 <_malloc_r>
 8008f80:	b92a      	cbnz	r2, 8008f8e <_realloc_r+0x24>
 8008f82:	f7fd fd71 	bl	8006a68 <_free_r>
 8008f86:	2400      	movs	r4, #0
 8008f88:	4620      	mov	r0, r4
 8008f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f8e:	f000 f840 	bl	8009012 <_malloc_usable_size_r>
 8008f92:	4285      	cmp	r5, r0
 8008f94:	4606      	mov	r6, r0
 8008f96:	d802      	bhi.n	8008f9e <_realloc_r+0x34>
 8008f98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f9c:	d8f4      	bhi.n	8008f88 <_realloc_r+0x1e>
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	f7fd fdd5 	bl	8006b50 <_malloc_r>
 8008fa6:	4607      	mov	r7, r0
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d0ec      	beq.n	8008f86 <_realloc_r+0x1c>
 8008fac:	42b5      	cmp	r5, r6
 8008fae:	462a      	mov	r2, r5
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	bf28      	it	cs
 8008fb4:	4632      	movcs	r2, r6
 8008fb6:	f7fc fef4 	bl	8005da2 <memcpy>
 8008fba:	4621      	mov	r1, r4
 8008fbc:	4640      	mov	r0, r8
 8008fbe:	f7fd fd53 	bl	8006a68 <_free_r>
 8008fc2:	463c      	mov	r4, r7
 8008fc4:	e7e0      	b.n	8008f88 <_realloc_r+0x1e>

08008fc6 <__ascii_wctomb>:
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	4608      	mov	r0, r1
 8008fca:	b141      	cbz	r1, 8008fde <__ascii_wctomb+0x18>
 8008fcc:	2aff      	cmp	r2, #255	@ 0xff
 8008fce:	d904      	bls.n	8008fda <__ascii_wctomb+0x14>
 8008fd0:	228a      	movs	r2, #138	@ 0x8a
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	4770      	bx	lr
 8008fda:	700a      	strb	r2, [r1, #0]
 8008fdc:	2001      	movs	r0, #1
 8008fde:	4770      	bx	lr

08008fe0 <fiprintf>:
 8008fe0:	b40e      	push	{r1, r2, r3}
 8008fe2:	b503      	push	{r0, r1, lr}
 8008fe4:	4601      	mov	r1, r0
 8008fe6:	ab03      	add	r3, sp, #12
 8008fe8:	4805      	ldr	r0, [pc, #20]	@ (8009000 <fiprintf+0x20>)
 8008fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fee:	6800      	ldr	r0, [r0, #0]
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	f000 f83f 	bl	8009074 <_vfiprintf_r>
 8008ff6:	b002      	add	sp, #8
 8008ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ffc:	b003      	add	sp, #12
 8008ffe:	4770      	bx	lr
 8009000:	2000001c 	.word	0x2000001c

08009004 <abort>:
 8009004:	b508      	push	{r3, lr}
 8009006:	2006      	movs	r0, #6
 8009008:	f000 fa08 	bl	800941c <raise>
 800900c:	2001      	movs	r0, #1
 800900e:	f7f8 fc2d 	bl	800186c <_exit>

08009012 <_malloc_usable_size_r>:
 8009012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009016:	1f18      	subs	r0, r3, #4
 8009018:	2b00      	cmp	r3, #0
 800901a:	bfbc      	itt	lt
 800901c:	580b      	ldrlt	r3, [r1, r0]
 800901e:	18c0      	addlt	r0, r0, r3
 8009020:	4770      	bx	lr

08009022 <__sfputc_r>:
 8009022:	6893      	ldr	r3, [r2, #8]
 8009024:	3b01      	subs	r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	b410      	push	{r4}
 800902a:	6093      	str	r3, [r2, #8]
 800902c:	da08      	bge.n	8009040 <__sfputc_r+0x1e>
 800902e:	6994      	ldr	r4, [r2, #24]
 8009030:	42a3      	cmp	r3, r4
 8009032:	db01      	blt.n	8009038 <__sfputc_r+0x16>
 8009034:	290a      	cmp	r1, #10
 8009036:	d103      	bne.n	8009040 <__sfputc_r+0x1e>
 8009038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800903c:	f000 b932 	b.w	80092a4 <__swbuf_r>
 8009040:	6813      	ldr	r3, [r2, #0]
 8009042:	1c58      	adds	r0, r3, #1
 8009044:	6010      	str	r0, [r2, #0]
 8009046:	7019      	strb	r1, [r3, #0]
 8009048:	4608      	mov	r0, r1
 800904a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800904e:	4770      	bx	lr

08009050 <__sfputs_r>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	4606      	mov	r6, r0
 8009054:	460f      	mov	r7, r1
 8009056:	4614      	mov	r4, r2
 8009058:	18d5      	adds	r5, r2, r3
 800905a:	42ac      	cmp	r4, r5
 800905c:	d101      	bne.n	8009062 <__sfputs_r+0x12>
 800905e:	2000      	movs	r0, #0
 8009060:	e007      	b.n	8009072 <__sfputs_r+0x22>
 8009062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009066:	463a      	mov	r2, r7
 8009068:	4630      	mov	r0, r6
 800906a:	f7ff ffda 	bl	8009022 <__sfputc_r>
 800906e:	1c43      	adds	r3, r0, #1
 8009070:	d1f3      	bne.n	800905a <__sfputs_r+0xa>
 8009072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009074 <_vfiprintf_r>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	460d      	mov	r5, r1
 800907a:	b09d      	sub	sp, #116	@ 0x74
 800907c:	4614      	mov	r4, r2
 800907e:	4698      	mov	r8, r3
 8009080:	4606      	mov	r6, r0
 8009082:	b118      	cbz	r0, 800908c <_vfiprintf_r+0x18>
 8009084:	6a03      	ldr	r3, [r0, #32]
 8009086:	b90b      	cbnz	r3, 800908c <_vfiprintf_r+0x18>
 8009088:	f7fc fc3c 	bl	8005904 <__sinit>
 800908c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800908e:	07d9      	lsls	r1, r3, #31
 8009090:	d405      	bmi.n	800909e <_vfiprintf_r+0x2a>
 8009092:	89ab      	ldrh	r3, [r5, #12]
 8009094:	059a      	lsls	r2, r3, #22
 8009096:	d402      	bmi.n	800909e <_vfiprintf_r+0x2a>
 8009098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800909a:	f7fc fe80 	bl	8005d9e <__retarget_lock_acquire_recursive>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	071b      	lsls	r3, r3, #28
 80090a2:	d501      	bpl.n	80090a8 <_vfiprintf_r+0x34>
 80090a4:	692b      	ldr	r3, [r5, #16]
 80090a6:	b99b      	cbnz	r3, 80090d0 <_vfiprintf_r+0x5c>
 80090a8:	4629      	mov	r1, r5
 80090aa:	4630      	mov	r0, r6
 80090ac:	f000 f938 	bl	8009320 <__swsetup_r>
 80090b0:	b170      	cbz	r0, 80090d0 <_vfiprintf_r+0x5c>
 80090b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090b4:	07dc      	lsls	r4, r3, #31
 80090b6:	d504      	bpl.n	80090c2 <_vfiprintf_r+0x4e>
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	b01d      	add	sp, #116	@ 0x74
 80090be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c2:	89ab      	ldrh	r3, [r5, #12]
 80090c4:	0598      	lsls	r0, r3, #22
 80090c6:	d4f7      	bmi.n	80090b8 <_vfiprintf_r+0x44>
 80090c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090ca:	f7fc fe69 	bl	8005da0 <__retarget_lock_release_recursive>
 80090ce:	e7f3      	b.n	80090b8 <_vfiprintf_r+0x44>
 80090d0:	2300      	movs	r3, #0
 80090d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80090d4:	2320      	movs	r3, #32
 80090d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090da:	f8cd 800c 	str.w	r8, [sp, #12]
 80090de:	2330      	movs	r3, #48	@ 0x30
 80090e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009290 <_vfiprintf_r+0x21c>
 80090e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090e8:	f04f 0901 	mov.w	r9, #1
 80090ec:	4623      	mov	r3, r4
 80090ee:	469a      	mov	sl, r3
 80090f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090f4:	b10a      	cbz	r2, 80090fa <_vfiprintf_r+0x86>
 80090f6:	2a25      	cmp	r2, #37	@ 0x25
 80090f8:	d1f9      	bne.n	80090ee <_vfiprintf_r+0x7a>
 80090fa:	ebba 0b04 	subs.w	fp, sl, r4
 80090fe:	d00b      	beq.n	8009118 <_vfiprintf_r+0xa4>
 8009100:	465b      	mov	r3, fp
 8009102:	4622      	mov	r2, r4
 8009104:	4629      	mov	r1, r5
 8009106:	4630      	mov	r0, r6
 8009108:	f7ff ffa2 	bl	8009050 <__sfputs_r>
 800910c:	3001      	adds	r0, #1
 800910e:	f000 80a7 	beq.w	8009260 <_vfiprintf_r+0x1ec>
 8009112:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009114:	445a      	add	r2, fp
 8009116:	9209      	str	r2, [sp, #36]	@ 0x24
 8009118:	f89a 3000 	ldrb.w	r3, [sl]
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 809f 	beq.w	8009260 <_vfiprintf_r+0x1ec>
 8009122:	2300      	movs	r3, #0
 8009124:	f04f 32ff 	mov.w	r2, #4294967295
 8009128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800912c:	f10a 0a01 	add.w	sl, sl, #1
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	9307      	str	r3, [sp, #28]
 8009134:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009138:	931a      	str	r3, [sp, #104]	@ 0x68
 800913a:	4654      	mov	r4, sl
 800913c:	2205      	movs	r2, #5
 800913e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009142:	4853      	ldr	r0, [pc, #332]	@ (8009290 <_vfiprintf_r+0x21c>)
 8009144:	f7f7 f84c 	bl	80001e0 <memchr>
 8009148:	9a04      	ldr	r2, [sp, #16]
 800914a:	b9d8      	cbnz	r0, 8009184 <_vfiprintf_r+0x110>
 800914c:	06d1      	lsls	r1, r2, #27
 800914e:	bf44      	itt	mi
 8009150:	2320      	movmi	r3, #32
 8009152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009156:	0713      	lsls	r3, r2, #28
 8009158:	bf44      	itt	mi
 800915a:	232b      	movmi	r3, #43	@ 0x2b
 800915c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009160:	f89a 3000 	ldrb.w	r3, [sl]
 8009164:	2b2a      	cmp	r3, #42	@ 0x2a
 8009166:	d015      	beq.n	8009194 <_vfiprintf_r+0x120>
 8009168:	9a07      	ldr	r2, [sp, #28]
 800916a:	4654      	mov	r4, sl
 800916c:	2000      	movs	r0, #0
 800916e:	f04f 0c0a 	mov.w	ip, #10
 8009172:	4621      	mov	r1, r4
 8009174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009178:	3b30      	subs	r3, #48	@ 0x30
 800917a:	2b09      	cmp	r3, #9
 800917c:	d94b      	bls.n	8009216 <_vfiprintf_r+0x1a2>
 800917e:	b1b0      	cbz	r0, 80091ae <_vfiprintf_r+0x13a>
 8009180:	9207      	str	r2, [sp, #28]
 8009182:	e014      	b.n	80091ae <_vfiprintf_r+0x13a>
 8009184:	eba0 0308 	sub.w	r3, r0, r8
 8009188:	fa09 f303 	lsl.w	r3, r9, r3
 800918c:	4313      	orrs	r3, r2
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	46a2      	mov	sl, r4
 8009192:	e7d2      	b.n	800913a <_vfiprintf_r+0xc6>
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	1d19      	adds	r1, r3, #4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	9103      	str	r1, [sp, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	bfbb      	ittet	lt
 80091a0:	425b      	neglt	r3, r3
 80091a2:	f042 0202 	orrlt.w	r2, r2, #2
 80091a6:	9307      	strge	r3, [sp, #28]
 80091a8:	9307      	strlt	r3, [sp, #28]
 80091aa:	bfb8      	it	lt
 80091ac:	9204      	strlt	r2, [sp, #16]
 80091ae:	7823      	ldrb	r3, [r4, #0]
 80091b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80091b2:	d10a      	bne.n	80091ca <_vfiprintf_r+0x156>
 80091b4:	7863      	ldrb	r3, [r4, #1]
 80091b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80091b8:	d132      	bne.n	8009220 <_vfiprintf_r+0x1ac>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	1d1a      	adds	r2, r3, #4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	9203      	str	r2, [sp, #12]
 80091c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091c6:	3402      	adds	r4, #2
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80092a0 <_vfiprintf_r+0x22c>
 80091ce:	7821      	ldrb	r1, [r4, #0]
 80091d0:	2203      	movs	r2, #3
 80091d2:	4650      	mov	r0, sl
 80091d4:	f7f7 f804 	bl	80001e0 <memchr>
 80091d8:	b138      	cbz	r0, 80091ea <_vfiprintf_r+0x176>
 80091da:	9b04      	ldr	r3, [sp, #16]
 80091dc:	eba0 000a 	sub.w	r0, r0, sl
 80091e0:	2240      	movs	r2, #64	@ 0x40
 80091e2:	4082      	lsls	r2, r0
 80091e4:	4313      	orrs	r3, r2
 80091e6:	3401      	adds	r4, #1
 80091e8:	9304      	str	r3, [sp, #16]
 80091ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ee:	4829      	ldr	r0, [pc, #164]	@ (8009294 <_vfiprintf_r+0x220>)
 80091f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091f4:	2206      	movs	r2, #6
 80091f6:	f7f6 fff3 	bl	80001e0 <memchr>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d03f      	beq.n	800927e <_vfiprintf_r+0x20a>
 80091fe:	4b26      	ldr	r3, [pc, #152]	@ (8009298 <_vfiprintf_r+0x224>)
 8009200:	bb1b      	cbnz	r3, 800924a <_vfiprintf_r+0x1d6>
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	3307      	adds	r3, #7
 8009206:	f023 0307 	bic.w	r3, r3, #7
 800920a:	3308      	adds	r3, #8
 800920c:	9303      	str	r3, [sp, #12]
 800920e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009210:	443b      	add	r3, r7
 8009212:	9309      	str	r3, [sp, #36]	@ 0x24
 8009214:	e76a      	b.n	80090ec <_vfiprintf_r+0x78>
 8009216:	fb0c 3202 	mla	r2, ip, r2, r3
 800921a:	460c      	mov	r4, r1
 800921c:	2001      	movs	r0, #1
 800921e:	e7a8      	b.n	8009172 <_vfiprintf_r+0xfe>
 8009220:	2300      	movs	r3, #0
 8009222:	3401      	adds	r4, #1
 8009224:	9305      	str	r3, [sp, #20]
 8009226:	4619      	mov	r1, r3
 8009228:	f04f 0c0a 	mov.w	ip, #10
 800922c:	4620      	mov	r0, r4
 800922e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009232:	3a30      	subs	r2, #48	@ 0x30
 8009234:	2a09      	cmp	r2, #9
 8009236:	d903      	bls.n	8009240 <_vfiprintf_r+0x1cc>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d0c6      	beq.n	80091ca <_vfiprintf_r+0x156>
 800923c:	9105      	str	r1, [sp, #20]
 800923e:	e7c4      	b.n	80091ca <_vfiprintf_r+0x156>
 8009240:	fb0c 2101 	mla	r1, ip, r1, r2
 8009244:	4604      	mov	r4, r0
 8009246:	2301      	movs	r3, #1
 8009248:	e7f0      	b.n	800922c <_vfiprintf_r+0x1b8>
 800924a:	ab03      	add	r3, sp, #12
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	462a      	mov	r2, r5
 8009250:	4b12      	ldr	r3, [pc, #72]	@ (800929c <_vfiprintf_r+0x228>)
 8009252:	a904      	add	r1, sp, #16
 8009254:	4630      	mov	r0, r6
 8009256:	f7fb fc8d 	bl	8004b74 <_printf_float>
 800925a:	4607      	mov	r7, r0
 800925c:	1c78      	adds	r0, r7, #1
 800925e:	d1d6      	bne.n	800920e <_vfiprintf_r+0x19a>
 8009260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009262:	07d9      	lsls	r1, r3, #31
 8009264:	d405      	bmi.n	8009272 <_vfiprintf_r+0x1fe>
 8009266:	89ab      	ldrh	r3, [r5, #12]
 8009268:	059a      	lsls	r2, r3, #22
 800926a:	d402      	bmi.n	8009272 <_vfiprintf_r+0x1fe>
 800926c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800926e:	f7fc fd97 	bl	8005da0 <__retarget_lock_release_recursive>
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	065b      	lsls	r3, r3, #25
 8009276:	f53f af1f 	bmi.w	80090b8 <_vfiprintf_r+0x44>
 800927a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800927c:	e71e      	b.n	80090bc <_vfiprintf_r+0x48>
 800927e:	ab03      	add	r3, sp, #12
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	462a      	mov	r2, r5
 8009284:	4b05      	ldr	r3, [pc, #20]	@ (800929c <_vfiprintf_r+0x228>)
 8009286:	a904      	add	r1, sp, #16
 8009288:	4630      	mov	r0, r6
 800928a:	f7fb ff0b 	bl	80050a4 <_printf_i>
 800928e:	e7e4      	b.n	800925a <_vfiprintf_r+0x1e6>
 8009290:	08009801 	.word	0x08009801
 8009294:	0800980b 	.word	0x0800980b
 8009298:	08004b75 	.word	0x08004b75
 800929c:	08009051 	.word	0x08009051
 80092a0:	08009807 	.word	0x08009807

080092a4 <__swbuf_r>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	460e      	mov	r6, r1
 80092a8:	4614      	mov	r4, r2
 80092aa:	4605      	mov	r5, r0
 80092ac:	b118      	cbz	r0, 80092b6 <__swbuf_r+0x12>
 80092ae:	6a03      	ldr	r3, [r0, #32]
 80092b0:	b90b      	cbnz	r3, 80092b6 <__swbuf_r+0x12>
 80092b2:	f7fc fb27 	bl	8005904 <__sinit>
 80092b6:	69a3      	ldr	r3, [r4, #24]
 80092b8:	60a3      	str	r3, [r4, #8]
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	071a      	lsls	r2, r3, #28
 80092be:	d501      	bpl.n	80092c4 <__swbuf_r+0x20>
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	b943      	cbnz	r3, 80092d6 <__swbuf_r+0x32>
 80092c4:	4621      	mov	r1, r4
 80092c6:	4628      	mov	r0, r5
 80092c8:	f000 f82a 	bl	8009320 <__swsetup_r>
 80092cc:	b118      	cbz	r0, 80092d6 <__swbuf_r+0x32>
 80092ce:	f04f 37ff 	mov.w	r7, #4294967295
 80092d2:	4638      	mov	r0, r7
 80092d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	6922      	ldr	r2, [r4, #16]
 80092da:	1a98      	subs	r0, r3, r2
 80092dc:	6963      	ldr	r3, [r4, #20]
 80092de:	b2f6      	uxtb	r6, r6
 80092e0:	4283      	cmp	r3, r0
 80092e2:	4637      	mov	r7, r6
 80092e4:	dc05      	bgt.n	80092f2 <__swbuf_r+0x4e>
 80092e6:	4621      	mov	r1, r4
 80092e8:	4628      	mov	r0, r5
 80092ea:	f7ff f9cf 	bl	800868c <_fflush_r>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d1ed      	bne.n	80092ce <__swbuf_r+0x2a>
 80092f2:	68a3      	ldr	r3, [r4, #8]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	60a3      	str	r3, [r4, #8]
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	6022      	str	r2, [r4, #0]
 80092fe:	701e      	strb	r6, [r3, #0]
 8009300:	6962      	ldr	r2, [r4, #20]
 8009302:	1c43      	adds	r3, r0, #1
 8009304:	429a      	cmp	r2, r3
 8009306:	d004      	beq.n	8009312 <__swbuf_r+0x6e>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	07db      	lsls	r3, r3, #31
 800930c:	d5e1      	bpl.n	80092d2 <__swbuf_r+0x2e>
 800930e:	2e0a      	cmp	r6, #10
 8009310:	d1df      	bne.n	80092d2 <__swbuf_r+0x2e>
 8009312:	4621      	mov	r1, r4
 8009314:	4628      	mov	r0, r5
 8009316:	f7ff f9b9 	bl	800868c <_fflush_r>
 800931a:	2800      	cmp	r0, #0
 800931c:	d0d9      	beq.n	80092d2 <__swbuf_r+0x2e>
 800931e:	e7d6      	b.n	80092ce <__swbuf_r+0x2a>

08009320 <__swsetup_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4b29      	ldr	r3, [pc, #164]	@ (80093c8 <__swsetup_r+0xa8>)
 8009324:	4605      	mov	r5, r0
 8009326:	6818      	ldr	r0, [r3, #0]
 8009328:	460c      	mov	r4, r1
 800932a:	b118      	cbz	r0, 8009334 <__swsetup_r+0x14>
 800932c:	6a03      	ldr	r3, [r0, #32]
 800932e:	b90b      	cbnz	r3, 8009334 <__swsetup_r+0x14>
 8009330:	f7fc fae8 	bl	8005904 <__sinit>
 8009334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009338:	0719      	lsls	r1, r3, #28
 800933a:	d422      	bmi.n	8009382 <__swsetup_r+0x62>
 800933c:	06da      	lsls	r2, r3, #27
 800933e:	d407      	bmi.n	8009350 <__swsetup_r+0x30>
 8009340:	2209      	movs	r2, #9
 8009342:	602a      	str	r2, [r5, #0]
 8009344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009348:	81a3      	strh	r3, [r4, #12]
 800934a:	f04f 30ff 	mov.w	r0, #4294967295
 800934e:	e033      	b.n	80093b8 <__swsetup_r+0x98>
 8009350:	0758      	lsls	r0, r3, #29
 8009352:	d512      	bpl.n	800937a <__swsetup_r+0x5a>
 8009354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009356:	b141      	cbz	r1, 800936a <__swsetup_r+0x4a>
 8009358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800935c:	4299      	cmp	r1, r3
 800935e:	d002      	beq.n	8009366 <__swsetup_r+0x46>
 8009360:	4628      	mov	r0, r5
 8009362:	f7fd fb81 	bl	8006a68 <_free_r>
 8009366:	2300      	movs	r3, #0
 8009368:	6363      	str	r3, [r4, #52]	@ 0x34
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009370:	81a3      	strh	r3, [r4, #12]
 8009372:	2300      	movs	r3, #0
 8009374:	6063      	str	r3, [r4, #4]
 8009376:	6923      	ldr	r3, [r4, #16]
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f043 0308 	orr.w	r3, r3, #8
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	b94b      	cbnz	r3, 800939a <__swsetup_r+0x7a>
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800938c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009390:	d003      	beq.n	800939a <__swsetup_r+0x7a>
 8009392:	4621      	mov	r1, r4
 8009394:	4628      	mov	r0, r5
 8009396:	f7ff f9c7 	bl	8008728 <__smakebuf_r>
 800939a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939e:	f013 0201 	ands.w	r2, r3, #1
 80093a2:	d00a      	beq.n	80093ba <__swsetup_r+0x9a>
 80093a4:	2200      	movs	r2, #0
 80093a6:	60a2      	str	r2, [r4, #8]
 80093a8:	6962      	ldr	r2, [r4, #20]
 80093aa:	4252      	negs	r2, r2
 80093ac:	61a2      	str	r2, [r4, #24]
 80093ae:	6922      	ldr	r2, [r4, #16]
 80093b0:	b942      	cbnz	r2, 80093c4 <__swsetup_r+0xa4>
 80093b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093b6:	d1c5      	bne.n	8009344 <__swsetup_r+0x24>
 80093b8:	bd38      	pop	{r3, r4, r5, pc}
 80093ba:	0799      	lsls	r1, r3, #30
 80093bc:	bf58      	it	pl
 80093be:	6962      	ldrpl	r2, [r4, #20]
 80093c0:	60a2      	str	r2, [r4, #8]
 80093c2:	e7f4      	b.n	80093ae <__swsetup_r+0x8e>
 80093c4:	2000      	movs	r0, #0
 80093c6:	e7f7      	b.n	80093b8 <__swsetup_r+0x98>
 80093c8:	2000001c 	.word	0x2000001c

080093cc <_raise_r>:
 80093cc:	291f      	cmp	r1, #31
 80093ce:	b538      	push	{r3, r4, r5, lr}
 80093d0:	4605      	mov	r5, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	d904      	bls.n	80093e0 <_raise_r+0x14>
 80093d6:	2316      	movs	r3, #22
 80093d8:	6003      	str	r3, [r0, #0]
 80093da:	f04f 30ff 	mov.w	r0, #4294967295
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80093e2:	b112      	cbz	r2, 80093ea <_raise_r+0x1e>
 80093e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093e8:	b94b      	cbnz	r3, 80093fe <_raise_r+0x32>
 80093ea:	4628      	mov	r0, r5
 80093ec:	f000 f830 	bl	8009450 <_getpid_r>
 80093f0:	4622      	mov	r2, r4
 80093f2:	4601      	mov	r1, r0
 80093f4:	4628      	mov	r0, r5
 80093f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093fa:	f000 b817 	b.w	800942c <_kill_r>
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d00a      	beq.n	8009418 <_raise_r+0x4c>
 8009402:	1c59      	adds	r1, r3, #1
 8009404:	d103      	bne.n	800940e <_raise_r+0x42>
 8009406:	2316      	movs	r3, #22
 8009408:	6003      	str	r3, [r0, #0]
 800940a:	2001      	movs	r0, #1
 800940c:	e7e7      	b.n	80093de <_raise_r+0x12>
 800940e:	2100      	movs	r1, #0
 8009410:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009414:	4620      	mov	r0, r4
 8009416:	4798      	blx	r3
 8009418:	2000      	movs	r0, #0
 800941a:	e7e0      	b.n	80093de <_raise_r+0x12>

0800941c <raise>:
 800941c:	4b02      	ldr	r3, [pc, #8]	@ (8009428 <raise+0xc>)
 800941e:	4601      	mov	r1, r0
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	f7ff bfd3 	b.w	80093cc <_raise_r>
 8009426:	bf00      	nop
 8009428:	2000001c 	.word	0x2000001c

0800942c <_kill_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d07      	ldr	r5, [pc, #28]	@ (800944c <_kill_r+0x20>)
 8009430:	2300      	movs	r3, #0
 8009432:	4604      	mov	r4, r0
 8009434:	4608      	mov	r0, r1
 8009436:	4611      	mov	r1, r2
 8009438:	602b      	str	r3, [r5, #0]
 800943a:	f7f8 fa07 	bl	800184c <_kill>
 800943e:	1c43      	adds	r3, r0, #1
 8009440:	d102      	bne.n	8009448 <_kill_r+0x1c>
 8009442:	682b      	ldr	r3, [r5, #0]
 8009444:	b103      	cbz	r3, 8009448 <_kill_r+0x1c>
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	bd38      	pop	{r3, r4, r5, pc}
 800944a:	bf00      	nop
 800944c:	20000528 	.word	0x20000528

08009450 <_getpid_r>:
 8009450:	f7f8 b9f4 	b.w	800183c <_getpid>

08009454 <_init>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	bf00      	nop
 8009458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945a:	bc08      	pop	{r3}
 800945c:	469e      	mov	lr, r3
 800945e:	4770      	bx	lr

08009460 <_fini>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr
